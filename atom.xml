<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[K]]></title>
  <link href="http://k.arttechresearch.com/atom.xml" rel="self"/>
  <link href="http://k.arttechresearch.com/"/>
  <updated>2016-02-28T16:48:00+08:00</updated>
  <id>http://k.arttechresearch.com/</id>
  <author>
    <name><![CDATA[K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing Caffe on Ubuntu With VirtualBox]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/02/27/installing-caffe-on-ubuntu-with-virtualbox/"/>
    <updated>2016-02-27T22:47:46+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/02/27/installing-caffe-on-ubuntu-with-virtualbox</id>
    <content type="html"><![CDATA[<h2>Ubuntu + VirtualBox</h2>

<ul>
<li>download Ubuntu ISO file</li>
<li>create a new VM in VirtualBox (Linux/Ubuntu/64bit/DynamicHD/8GbRAM/…)</li>
<li>install Ubuntu OS and update and upgrade</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install build-essential
</span><span class='line'><span class="nv">$ </span>sudo apt-get install linux-headers-<span class="sb">`</span>uname -r<span class="sb">`</span>
</span></code></pre></td></tr></table></div></figure>


<p>VirtualBox</p>

<ul>
<li>VirtualBox ToolBar -> Devices -> Insert Guest Additions CD Image -> Install GuestAddition</li>
<li>VirtualBox VM -> Preferences -> General -> Advanced -> Shared Clipboard</li>
</ul>


<h2>Cuda</h2>

<p><a href="https://developer.nvidia.com/cuda-downloads">CUDA 7.5</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install curl
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/Downloads/
</span><span class='line'><span class="nv">$ </span>curl -O <span class="s2">&quot;http://developer.download.nvidia.com/compute/cuda/6_5/rel/installers/cuda_6.5.14_linux_64.run&quot;</span>
</span><span class='line'><span class="nv">$ </span>chmod +x cuda_6.5.14_linux_64.run
</span><span class='line'><span class="nv">$ </span>sudo ./cuda_6.5.14_linux_64.run --kernel-source-path<span class="o">=</span>/usr/src/linux-headers-<span class="sb">`</span>uname -r<span class="sb">`</span>/
</span><span class='line'><span class="c"># - Accept the EULA</span>
</span><span class='line'><span class="c"># - DO NOT INSTALL DRIVER</span>
</span><span class='line'><span class="c"># - Install the toolkit</span>
</span><span class='line'><span class="c"># - Install the symbolic link</span>
</span><span class='line'><span class="c"># - Install samples</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;export PATH=/usr/local/cuda/bin:$PATH&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s1">&#39;export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib&#39;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<h2>Caffe</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install -y libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libboost-all-dev libhdf5-serial-dev protobuf-compiler gfortran libjpeg62 libfreeimage-dev libatlas-base-dev git python-dev python-pip libgoogle-glog-dev libbz2-dev libxml2-dev libxslt-dev libffi-dev libssl-dev libgflags-dev liblmdb-dev python-yaml
</span><span class='line'><span class="nv">$ </span>sudo easy_install pillow
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/BVLC/caffe.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>caffe
</span><span class='line'><span class="nv">$ </span>cat python/requirements.txt <span class="p">|</span> xargs -L <span class="m">1</span> sudo pip install
</span><span class='line'><span class="nv">$ </span>sudo ln -s /usr/include/python2.7/ /usr/local/include/python2.7
</span><span class='line'><span class="nv">$ </span>sudo ln -s /usr/local/lib/python2.7/dist-packages/numpy/core/include/numpy/ /usr/local/include/python2.7/numpy
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>cp Makefile.config.example Makefile.config
</span><span class='line'><span class="nv">$ </span>nano Makefile.config
</span><span class='line'><span class="c"># - uncomment # CPU_ONLY := 1</span>
</span><span class='line'><span class="c"># - PYTHON_INCLUDE: </span>
</span><span class='line'><span class="c">#   - /usr/include/python2.7 -&gt; /usr/local/include/python2.7</span>
</span><span class='line'><span class="c">#   - /usr/lib/python2.7/dist-packages/numpy/core/include -&gt; /usr/local/lib/python2.7/dist-packages/numpy/core/include</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>make pycaffe
</span><span class='line'><span class="nv">$ </span>make all
</span><span class='line'><span class="nv">$ </span>make <span class="nb">test</span>
</span><span class='line'><span class="c"># if something error, then it could not recompile, try to delete build and .build_release</span>
</span><span class='line'><span class="c"># and then rerun the commands</span>
</span><span class='line'><span class="c"># or use `make clean`</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<p><a href="https://github.com/BVLC/caffe/wiki/Ubuntu-14.04-VirtualBox-VM">Ubuntu 14.04 VirtualBox VM</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Roses]]></title>
    <link href="http://k.arttechresearch.com/art/2016/02/27/roses/"/>
    <updated>2016-02-27T19:25:14+08:00</updated>
    <id>http://k.arttechresearch.com/art/2016/02/27/roses</id>
    <content type="html"><![CDATA[<p><img src="https://s-media-cache-ak0.pinimg.com/originals/b0/a2/9d/b0a29de9191ee443c1344b62f754220b.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/originals/34/8b/af/348baf3f3a6aa2f833fd9c49483a2c41.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing OpenCV on Ubuntu]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/02/25/installing-opencv-on-ubuntu/"/>
    <updated>2016-02-25T18:59:03+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/02/25/installing-opencv-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Installation Steps:</p>

<ul>
<li>Dependencies</li>
<li>Python</li>
<li>OpenCV</li>
<li>Test</li>
</ul>


<h2>Dependencies</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="c"># update os</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get upgrade
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="c"># update devtools</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install build-essential cmake git pkg-config
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="c"># image I/O dependencies</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install libjpeg8-dev libtiff4-dev libjasper-dev libpng12-dev
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="c"># highgui dependencies</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install libgtk2.0-dev
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="c"># video dependencies</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="c"># opencv optimization dependencies</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install libatlas-base-dev gfortran
</span></code></pre></td></tr></table></div></figure>


<h2>Python</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="c"># pip and virtualenv</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install python-pip
</span><span class='line'><span class="nv">$ </span>sudo pip install virtualenv virtualenvwrapper
</span><span class='line'><span class="nv">$ </span>vim ~/.bashrc
</span><span class='line'><span class="nv">$ </span><span class="c">#######################################</span>
</span><span class='line'><span class="nv">$ </span><span class="c"># virtualenv and virtualenvwrapper</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">export </span><span class="nv">WORKON_HOME</span><span class="o">=</span><span class="nv">$HOME</span>/.virtualenvs
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> /usr/local/bin/virtualenvwrapper.sh
</span><span class='line'><span class="nv">$ </span><span class="c">#######################################</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.bashrc
</span><span class='line'><span class="nv">$ </span>mkvirtualenv cv
</span><span class='line'><span class="nv">$ </span>sudo apt-get install python2.7-dev
</span><span class='line'><span class="nv">$ </span>pip install numpy
</span></code></pre></td></tr></table></div></figure>


<h2>OpenCV</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="c"># opencv</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/Itseez/opencv.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>opencv
</span><span class='line'><span class="nv">$ </span>git checkout 3.0.0
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~
</span><span class='line'><span class="nv">$ </span>git clone https://github.com/Itseez/opencv_contrib.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>opencv_contrib
</span><span class='line'><span class="nv">$ </span>git checkout 3.0.0
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/opencv
</span><span class='line'><span class="nv">$ </span>mkdir build
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>build
</span><span class='line'><span class="c"># when build python, numpy is a must</span>
</span><span class='line'><span class="nv">$ </span>cmake -D <span class="nv">CMAKE_BUILD_TYPE</span><span class="o">=</span>RELEASE <span class="se">\</span>
</span><span class='line'>        -D <span class="nv">CMAKE_INSTALL_PREFIX</span><span class="o">=</span>/usr/local <span class="se">\</span>
</span><span class='line'>        -D <span class="nv">INSTALL_C_EXAMPLES</span><span class="o">=</span>ON <span class="se">\</span>
</span><span class='line'>        -D <span class="nv">INSTALL_PYTHON_EXAMPLES</span><span class="o">=</span>ON <span class="se">\</span>
</span><span class='line'>        -D <span class="nv">OPENCV_EXTRA_MODULES_PATH</span><span class="o">=</span>~/opencv_contrib/modules <span class="se">\</span>
</span><span class='line'>        -D <span class="nv">BUILD_EXAMPLES</span><span class="o">=</span>ON ..
</span><span class='line'><span class="nv">$ </span>make -j4
</span><span class='line'><span class="nv">$ </span>sudo make install
</span><span class='line'><span class="nv">$ </span>sudo ldconfig
</span></code></pre></td></tr></table></div></figure>


<p>Installed Paths:</p>

<ul>
<li>OpenCV: /usr/local/share/OpenCV</li>
<li>PyOpenCV: /usr/local/lib/python2.7/site-packages/cv2.so</li>
</ul>


<h2>Test</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="c"># config opencv</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/.virtualenvs/cv/lib/python2.7/site-packages/
</span><span class='line'><span class="nv">$ </span>cp /usr/local/lib/python2.7/site-packages/cv2.so cv2.so
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="c"># test</span>
</span><span class='line'><span class="nv">$ </span>workon cv
</span><span class='line'><span class="nv">$ </span>python
</span><span class='line'><span class="nv">$ </span>&gt;&gt;&gt;import cv2
</span><span class='line'><span class="nv">$ </span>&gt;&gt;&gt;cv2.__version__
</span></code></pre></td></tr></table></div></figure>


<p>demo</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c"># import the necessary packages</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">cv2</span>
</span><span class='line'>
</span><span class='line'><span class="c"># load the games image</span>
</span><span class='line'><span class="c"># games.jpg: http://www.pyimagesearch.com/wp-content/uploads/2015/06/games.jpg</span>
</span><span class='line'><span class="n">image</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">imread</span><span class="p">(</span><span class="s">&quot;games.jpg&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># find the red color game in the image</span>
</span><span class='line'><span class="n">upper</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">65</span><span class="p">,</span> <span class="mi">65</span><span class="p">,</span> <span class="mi">255</span><span class="p">])</span>
</span><span class='line'><span class="n">lower</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">200</span><span class="p">])</span>
</span><span class='line'><span class="n">mask</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">inRange</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">lower</span><span class="p">,</span> <span class="n">upper</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># find contours in the masked image and keep the largest one</span>
</span><span class='line'><span class="p">(</span><span class="n">_</span><span class="p">,</span> <span class="n">cnts</span><span class="p">,</span> <span class="n">_</span><span class="p">)</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">findContours</span><span class="p">(</span><span class="n">mask</span><span class="o">.</span><span class="n">copy</span><span class="p">(),</span> <span class="n">cv2</span><span class="o">.</span><span class="n">RETR_EXTERNAL</span><span class="p">,</span>
</span><span class='line'>  <span class="n">cv2</span><span class="o">.</span><span class="n">CHAIN_APPROX_SIMPLE</span><span class="p">)</span>
</span><span class='line'><span class="n">c</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">cnts</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="n">cv2</span><span class="o">.</span><span class="n">contourArea</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># approximate the contour</span>
</span><span class='line'><span class="n">peri</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">arcLength</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'><span class="n">approx</span> <span class="o">=</span> <span class="n">cv2</span><span class="o">.</span><span class="n">approxPolyDP</span><span class="p">(</span><span class="n">c</span><span class="p">,</span> <span class="mf">0.05</span> <span class="o">*</span> <span class="n">peri</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># draw a green bounding box surrounding the red game</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">drawContours</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="p">[</span><span class="n">approx</span><span class="p">],</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">),</span> <span class="mi">4</span><span class="p">)</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Image&quot;</span><span class="p">,</span> <span class="n">image</span><span class="p">)</span>
</span><span class='line'><span class="n">cv2</span><span class="o">.</span><span class="n">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up DevEnv for Nao]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/02/25/setting-up-devenv-for-nao/"/>
    <updated>2016-02-25T13:07:11+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/02/25/setting-up-devenv-for-nao</id>
    <content type="html"><![CDATA[<p>Summary:</p>

<ul>
<li>Nao OS</li>
<li>Devkits

<ul>
<li>Choregraphe suite</li>
<li>Naoqi SDK</li>
<li>Simulators: webots</li>
</ul>
</li>
<li>VM</li>
<li>TroubleShooting</li>
</ul>


<h2>1. Nao OS</h2>

<h2>2. Choregraphe suite</h2>

<p>Linux/Mac/Windows</p>

<ul>
<li>Download the installation package, and install it in a specific os</li>
</ul>


<h2>3. Naoqi SDK</h2>

<ul>
<li>Python SDK</li>
<li>C++ SDK</li>
<li>Java SDK</li>
</ul>


<h3>3.1. Python SDK</h3>

<h4>Ubuntu</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># download the package</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /tmp
</span><span class='line'><span class="nv">$ </span>wget http://xxxx      <span class="c"># package path</span>
</span><span class='line'><span class="nv">$ </span>tar -xvf pynaoqi-python2.7-x.x.x.x-linux64
</span><span class='line'><span class="nv">$ </span>mv pynaoqi-python2.7-x.x.x.x-linux64 pynaoqi-sdk
</span><span class='line'><span class="nv">$ </span>mv pynaoqi-sdk /usr/local/pynaoqi-sdk
</span><span class='line'><span class="nv">$ </span>vim ~/.bashrc
</span><span class='line'><span class="c">###########################################</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PYTHONPATH</span><span class="k">}</span>:/usr/local/pynaoqi-sdk
</span><span class='line'><span class="c">########################################### </span>
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.bashrc
</span><span class='line'><span class="nv">$ </span>python
</span><span class='line'><span class="c">###########################################</span>
</span><span class='line'>import naoqi
</span><span class='line'><span class="c">###########################################</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Mac</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># download the package</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /tmp
</span><span class='line'><span class="nv">$ </span>wget http://xxxx      <span class="c"># package path</span>
</span><span class='line'><span class="nv">$ </span>tar -xvf pynaoqi-python2.7-x.x.x.x-linux64
</span><span class='line'><span class="nv">$ </span>mv pynaoqi-python2.7-x.x.x.x-linux64 pynaoqi-sdk
</span><span class='line'><span class="nv">$ </span>mv pynaoqi-sdk /usr/local/pynaoqi-sdk
</span><span class='line'><span class="nv">$ </span>vim ~/.bash_profile
</span><span class='line'><span class="c">###########################################</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span><span class="k">${</span><span class="nv">PYTHONPATH</span><span class="k">}</span>:/usr/local/pynaoqi-sdk
</span><span class='line'><span class="nb">export </span><span class="nv">DYLD_LIBRARY_PATH</span><span class="o">=</span><span class="k">${</span><span class="nv">DYLD_LIBRARY_PATH</span><span class="k">}</span>:/path/to/python-sdk
</span><span class='line'><span class="c">########################################### </span>
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.bash_profile
</span><span class='line'><span class="nv">$ </span>python
</span><span class='line'><span class="c">###########################################</span>
</span><span class='line'>import naoqi
</span><span class='line'><span class="c">###########################################</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Windows</h4>

<h3>3.2. C++ SDK</h3>

<h4>Ubuntu</h4>

<h4>Mac</h4>

<h4>Windows</h4>

<h3>3.3. Java SDK</h3>

<h2>4. Simulators</h2>

<h3>4.1. Webot</h3>

<ul>
<li>Download the specific installation package</li>
<li>Install</li>
<li>Register a license</li>
<li>Update the packages</li>
<li>Go to the dashboard</li>
</ul>


<h2>5. VM</h2>

<ul>
<li>Download the box file</li>
<li>Load the file into VirtualBox</li>
<li>Login the OS with user/pass: nao/nao</li>
</ul>


<h2>6. TroubleShooting</h2>

<h2>References</h2>

<ul>
<li><a href="https://community.aldebaran.com/en/resources/software/language/en-gb">Aldebaran Softwares</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenCV Overview]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/02/25/opencv-overview/"/>
    <updated>2016-02-25T00:13:01+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/02/25/opencv-overview</id>
    <content type="html"><![CDATA[<ul>
<li>installation</li>
<li>modules</li>
<li>api</li>
</ul>


<h2>Installation</h2>

<ul>
<li>OS: Ubuntu 14.04</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install libopencv-dev python-opencv
</span><span class='line'><span class="nv">$ </span><span class="c"># sudo apt-get autoremove libopencv-dev python-opencv</span>
</span><span class='line'><span class="nv">$ </span>pkg-config opencv --cflags
</span><span class='line'><span class="nv">$ </span>pkg-config opencv --libs
</span><span class='line'><span class="nv">$ </span>pkg-config --modversion opencv
</span></code></pre></td></tr></table></div></figure>


<p>test</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>vim test.cpp
</span><span class='line'><span class="nv">$ </span>g++ test.cpp -o <span class="nb">test</span>
</span><span class='line'><span class="nv">$ </span>./test
</span></code></pre></td></tr></table></div></figure>


<h2>Modules</h2>

<ul>
<li><code>core</code>: main OpenCV, data structure + basic image processing</li>
<li><code>highgui</code>: user interface, image + video codecs/capturing/mouse etc.</li>
<li><code>imgproc</code>: image processing algorithms, image filtering/transformations etc.</li>
<li><code>video</code>: video analysis, object tracking algorithms + background subtraction etc.</li>
<li><code>objdetect</code>: object detection + object recognition</li>
</ul>


<h2>API</h2>

<h3>header files</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;opencv2/core/core.hpp&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opencv2/flann/miniflann.hpp&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opencv2/imgproc/imgproc.hpp&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opencv2/photo/photo.hpp&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opencv2/video/video.hpp&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opencv2/features2d/features2d.hpp&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opencv2/objdetect/objdetect.hpp&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opencv2/calib3d/calib3d.hpp&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opencv2/ml/ml.hpp&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opencv2/highgui/highgui.hpp&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opencv2/contrib/contrib.hpp&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opencv2/core/core_c.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opencv2/highgui/highgui_c.h&quot;</span>
</span><span class='line'><span class="cp">#include &quot;opencv2/imgproc/imgproc_c.h&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>namespace</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;opencv2/core/core.hpp&quot;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">cv</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">Mat</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">cvQueryFrame</span><span class="p">(</span><span class="n">capture</span><span class="p">);</span>
</span><span class='line'>  <span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Video&quot;</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &quot;opencv2/core/core.hpp&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">Mat</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">cvQueryFrame</span><span class="p">(</span><span class="n">capture</span><span class="p">);</span>
</span><span class='line'>  <span class="n">cv</span><span class="o">::</span><span class="n">imshow</span><span class="p">(</span><span class="s">&quot;Video&quot;</span><span class="p">,</span> <span class="n">frame</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>data types for arrays</h3>

<p>single channel array:</p>

<ul>
<li>CV_8U (8 bit unsigned integer)</li>
<li>CV_8S (8 bit signed integer)</li>
<li>CV_16U (16 bit unsigned integer)</li>
<li>CV_16S (16 bit signed integer)</li>
<li>CV_32S (32 bit signed integer)</li>
<li>CV_32F (32 bit floating point number)</li>
<li>CV_64F (64 bit float floating point number)</li>
</ul>


<p>multi channel array:</p>

<ul>
<li>CV_8UC1 (single channel array with 8 bit unsigned integers)</li>
<li>CV_8UC2 (2 channel array with 8 bit unsigned integers)</li>
<li>CV_8UC3 (3 channel array with 8 bit unsigned integers)</li>
<li>CV_8UC4 (4 channel array with 8 bit unsigned integers)</li>
<li>CV_8UC(n) (n channel array with 8 bit unsigned integers (n can be from 1 to 512) )</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing ROS on Ubuntu]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/02/20/installing-ros-on-ubuntu/"/>
    <updated>2016-02-20T21:04:48+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/02/20/installing-ros-on-ubuntu</id>
    <content type="html"><![CDATA[<h2>Requirement</h2>

<ul>
<li>Ubuntu 14.04</li>
</ul>


<h2>ROS</h2>

<h3>Installation</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo sh -c <span class="s1">&#39;echo &quot;deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main&quot; &gt; /etc/apt/sources.list.d/ros-latest.list&#39;</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net:80 --recv-key 0xB01FA116
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install ros-jade-desktop-full
</span></code></pre></td></tr></table></div></figure>


<h3>Configuration</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo rosdep init
</span><span class='line'><span class="nv">$ </span>rosdep update
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span><span class="nb">echo</span> <span class="s2">&quot;source /opt/ros/jade/setup.bash&quot;</span> &gt;&gt; ~/.bashrc
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.bashrc
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>Additional Tools</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install python-rosinstall
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Design Patterns in Python]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/02/16/design-patterns-in-python/"/>
    <updated>2016-02-16T00:16:49+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/02/16/design-patterns-in-python</id>
    <content type="html"><![CDATA[<p>Study notes on <a href="http://www.amazon.com/Python-Practice-Concurrency-Libraries-Developers/dp/0321905636">Python in Practice: Create Better Programs Using Concurrency, Libraries, and Patterns</a></p>

<ul>
<li>Creational design patterns</li>
<li>Structural design patterns</li>
<li>Behavioral design patterns</li>
</ul>


<p>Comparisons:</p>

<ul>
<li>Creational design patterns concern on how objects are created;</li>
<li>Structural design patterns concern on how objects are composed together to form new and larger objects;</li>
<li>Behavioral design patterns concern on how individual objects or groups of objects can get things done.</li>
</ul>


<h2>1. Creational Design Patterns</h2>

<p>Creational design patterns are concerned with how objects are created. When we concern
on how objects are created, the creational design patterns are useful.</p>

<h3>1.1. Abstract factory</h3>

<p>The abstract facroty pattern is designed for situations where we want to create complex
objects that are composed of other objects and where the composed objects are all of one
particular &ldquo;family&rdquo;.</p>

<figure class='code'><figcaption><span>DiagramFactory</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">DiagramFactory</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">make_diagram</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">make_rectangle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="s">&quot;white&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">make_text</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SvgDiagramFactory</span><span class="p">(</span><span class="n">DiagramFactory</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">Text</span><span class="p">:</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">make_diagram</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">SvgDiagram</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SvgDiagram</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">component</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_diagram</span><span class="p">(</span><span class="n">factory</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">diagram</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">txtDiagram</span> <span class="o">=</span> <span class="n">create_diagram</span><span class="p">(</span><span class="n">DiagramFactory</span><span class="p">())</span>
</span><span class='line'>    <span class="n">svgDiagram</span> <span class="o">=</span> <span class="n">create_diagram</span><span class="p">(</span><span class="n">SvgDiagramFactory</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.2. Builder</h3>

<p>The builder pattern is similar to the abstract factory pattern in that both patterns
are designed for creating complex objects that are composed of other objects.
But builder pattern also holds the representation of the entire complex object itself.</p>

<p>The differences between abstract factory and builder are
- factory is the subclass: Car -> Honda/Ford
- builder implements the whole parts: Card -> Honda()/Ford() with custom updates</p>

<figure class='code'><figcaption><span>FormBuilder</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">AbstractFormBuilder</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">abc</span><span class="o">.</span><span class="n">ABCMeta</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@abc.abstractmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_title</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@abc.abstractmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">form</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@abc.abstractmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_label</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">column</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HtmlFormBuilder</span><span class="p">(</span><span class="n">AbstractFormBuilder</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_title</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_label</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">column</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_entry</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">variable</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">column</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">form</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TkFormBuilder</span><span class="p">(</span><span class="n">AbstractFormBuilder</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_title</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_label</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">,</span> <span class="n">row</span><span class="p">,</span> <span class="n">column</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">form</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">create_login_form</span><span class="p">(</span><span class="n">builder</span><span class="p">):</span>
</span><span class='line'>    <span class="o">...</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">builder</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="n">htmlForm</span> <span class="o">=</span> <span class="n">create_login_form</span><span class="p">(</span><span class="n">HtmlFormBuilder</span><span class="p">())</span>
</span><span class='line'>    <span class="n">tkForm</span> <span class="o">=</span> <span class="n">create_logiin_form</span><span class="p">(</span><span class="n">TkFormBuilder</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.3. Factory method</h3>

<p>The factory method pattern is intended to be used when we want subclasses to choose
which classes they should instantiate when an object is requested. This is useful in its
own right, but can be taken further and used in cases where we cannot know the class in
advance (e.g. the class to use is based on what we read from a file or depends on user
input).</p>

<figure class='code'><figcaption><span>Factory method</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">BLACK</span><span class="p">,</span> <span class="n">WHITE</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;BLACK&quot;</span><span class="p">,</span> <span class="s">&quot;WHITE&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AbstractBoard</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">rows</span><span class="p">,</span> <span class="n">columns</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">board</span> <span class="o">=</span> <span class="p">[[</span><span class="bp">None</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">columns</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">rows</span><span class="p">)]]</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">populate_board</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">populate_board</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__str__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">squares</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">y</span><span class="p">,</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">board</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">piece</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">row</span><span class="p">):</span>
</span><span class='line'>                <span class="n">square</span> <span class="o">=</span> <span class="n">console</span><span class="p">(</span><span class="n">piece</span><span class="p">,</span> <span class="n">BLACK</span> <span class="k">if</span> <span class="p">(</span><span class="n">y</span><span class="o">+</span><span class="n">x</span><span class="p">)</span> <span class="o">%</span><span class="n">s</span> <span class="k">else</span> <span class="n">WHITE</span><span class="p">)</span>
</span><span class='line'>            <span class="n">squares</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">squares</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CheckersBoard</span><span class="p">(</span><span class="n">AbstractBoard</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">populate_board</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">2</span><span class="p">):</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">row</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">4</span><span class="p">):</span>
</span><span class='line'>                <span class="n">column</span> <span class="o">=</span> <span class="n">x</span> <span class="o">+</span> <span class="p">((</span><span class="n">row</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="o">%</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">board</span><span class="p">[</span><span class="n">row</span><span class="p">][</span><span class="n">column</span><span class="p">]</span> <span class="o">=</span> <span class="n">BlackDraught</span><span class="p">()</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">board</span><span class="p">[</span><span class="n">row</span><span class="o">+</span><span class="mi">6</span><span class="p">][</span><span class="n">column</span><span class="p">]</span> <span class="o">=</span> <span class="n">WhiteDraught</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ChessBoard</span><span class="p">(</span><span class="n">AbstractBoard</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">populate_board</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="n">BlackChessRook</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">board</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="n">BlackChessKnight</span><span class="p">()</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">board</span><span class="p">[</span><span class="mi">7</span><span class="p">][</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="n">WhiteChessRook</span><span class="p">()</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">column</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">8</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">board</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="n">column</span><span class="p">]</span> <span class="o">=</span> <span class="n">BlackChessPawn</span><span class="p">()</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">board</span><span class="p">[</span><span class="mi">6</span><span class="p">][</span><span class="n">column</span><span class="p">]</span> <span class="o">=</span> <span class="n">WhiteChessPawn</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Piece</span><span class="p">(</span><span class="nb">str</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="n">ckass</span> <span class="n">BlackDraught</span><span class="p">(</span><span class="n">Piece</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">Class</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="s">&quot;\N(black draughts man)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">WhiteChessKing</span><span class="p">(</span><span class="n">Piece</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__new__</span><span class="p">(</span><span class="n">Class</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__new__</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="s">&quot;\N(white chess king)&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">checkers</span> <span class="o">=</span> <span class="n">CheckersBoard</span><span class="p">()</span>
</span><span class='line'>    <span class="n">chess</span> <span class="o">=</span> <span class="n">ChessBoard</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.4. Prototype</h3>

<p>The prototype pattern is used to create new objects by cloning an original object,
and then modifying the clone.</p>

<figure class='code'><figcaption><span>Prototype</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;x&quot;</span><span class="p">,</span> <span class="s">&quot;y&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_object</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Class</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">point1</span> <span class="o">=</span> <span class="n">Point</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">point2</span> <span class="o">=</span> <span class="nb">eval</span><span class="p">(</span><span class="s">&quot;{}({}, {}))&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="s">&quot;Point&quot;</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
</span><span class='line'>    <span class="n">point3</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">modules</span><span class="p">[</span><span class="n">__name__</span><span class="p">],</span> <span class="s">&quot;Point&quot;</span><span class="p">)(</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">)</span>
</span><span class='line'>    <span class="n">point4</span> <span class="o">=</span> <span class="nb">globals</span><span class="p">()[</span><span class="s">&quot;Point&quot;</span><span class="p">](</span><span class="mi">4</span><span class="p">,</span> <span class="mi">8</span><span class="p">)</span>
</span><span class='line'>    <span class="n">point5</span> <span class="o">=</span> <span class="n">make_object</span><span class="p">(</span><span class="n">Point</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>
</span><span class='line'>    <span class="n">point6</span> <span class="o">=</span> <span class="n">copy</span><span class="o">.</span><span class="n">deepcopy</span><span class="p">(</span><span class="n">point5</span><span class="p">)</span>
</span><span class='line'>    <span class="n">point6</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="mi">6</span>
</span><span class='line'>    <span class="n">point6</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="mi">12</span>
</span><span class='line'>    <span class="n">point7</span> <span class="o">=</span> <span class="n">point1</span><span class="o">.</span><span class="n">__class__</span><span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">14</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>1.5. Singleton</h3>

<p>The singleton pattern is used when we need a class that has only a single instance
that is the one and only instance accessed throughtout the program.</p>

<h2>2. Structural Design Patterns</h2>

<p>The primary concern of structural design patterns is how objects are composed together to
form new, larger objects.</p>

<p>Three themes stand out in structural design patterns:</p>

<ul>
<li>adapting interfaces</li>
<li>adding functionality</li>
<li>handling collections of objects</li>
</ul>


<p>Patterns:</p>

<ul>
<li>the adapter and facade patterns make it straightforward to reuse classes in new contexts</li>
<li>the bridge pattern makes it possible to embed the sophisticated functionality of one class inside another</li>
<li>the composite pattern makes it easy to create hierarchies of objects</li>
<li>the flyweight pattern is to use the object reference</li>
</ul>


<h3>2.1. Adapter</h3>

<p>The adapter pattern is a technique for adapting an interface so that one class
can make use of another &ndash; that has an incompatible interface &ndash; without changing either
of the classes being used.</p>

<figure class='code'><figcaption><span>Adapter</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">Page</span>
</span><span class='line'><span class="sd"> --&gt; renderer &lt;---- Renderer Interface</span>
</span><span class='line'><span class="sd">                         |---&gt; TextRenderer</span>
</span><span class='line'><span class="sd">                         |---&gt; HtmlRenderer &lt;---- HtmlWriter (adapter)</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Page</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">renderer</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add_paragraph</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">paragraph</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Renderer</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">abc</span><span class="o">.</span><span class="n">ABCMeta</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@classmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__subclasshook__</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">Subclass</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TextRenderer</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mi">80</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">header</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">paragraph</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">footer</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HtmlRenderer</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">htmlWriter</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">htmlWriter</span> <span class="o">=</span> <span class="n">htmlWriter</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">header</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">htmlWriter</span><span class="o">.</span><span class="n">header</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">htmlWriter</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">htmlWriter</span><span class="o">.</span><span class="n">start_body</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">paragraph</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">htmlWriter</span><span class="o">.</span><span class="n">body</span><span class="p">(</span><span class="n">text</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">footer</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">htmlWriter</span><span class="o">.</span><span class="n">end_body</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">htmlWriter</span><span class="o">.</span><span class="n">footer</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HtmlWriter</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">header</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">title</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">title</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">start_body</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">body</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">end_body</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">footer</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">textPage</span> <span class="o">=</span> <span class="n">Page</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">TextRenderer</span><span class="p">(</span><span class="mi">22</span><span class="p">))</span>
</span><span class='line'>    <span class="n">textPage</span><span class="o">.</span><span class="n">add_paragraph</span><span class="p">(</span><span class="n">paragraph1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">textPage</span><span class="o">.</span><span class="n">add_paragraph</span><span class="p">(</span><span class="n">paragraph2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">textPage</span><span class="o">.</span><span class="n">render</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">htmlPage</span> <span class="o">=</span> <span class="n">Page</span><span class="p">(</span><span class="n">title</span><span class="p">,</span> <span class="n">HtmlRenderer</span><span class="p">(</span><span class="n">HtmlWriter</span><span class="p">(</span><span class="nb">file</span><span class="p">)))</span>
</span><span class='line'>    <span class="n">htmlPage</span><span class="o">.</span><span class="n">add_paragraph</span><span class="p">(</span><span class="n">paragraph1</span><span class="p">)</span>
</span><span class='line'>    <span class="n">htmlPage</span><span class="o">.</span><span class="n">add_paragraph</span><span class="p">(</span><span class="n">paragraph2</span><span class="p">)</span>
</span><span class='line'>    <span class="n">htmlPage</span><span class="o">.</span><span class="n">render</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.2. Bridge</h3>

<p>The bridge pattern is used in situations where we want to separate an abstraction
(e.g., an interface or an algorithm from how it is implemented.</p>

<p>The conventional approach without using the bridge pattern would be to create one
or more abstract base classes and then provide two or more concrete implementations
of each of the base classes.</p>

<p>But with the bridge pattern the approach is to create two independent class hierarchies:</p>

<ul>
<li>the &ldquo;abstract&rdquo; one defining the operations (e.g., the interface and high-level algorithms)</li>
<li>the concrete one providing the implementations that the abstract operations will ultimately call.</li>
</ul>


<p>The &ldquo;abstract&rdquo; class aggregates an instance of one of the concrete implementation classes -
and this instance serves as a bridge between the abstract interface and the concrete operations.</p>

<p>Bridge pattern is to pass serveral separated classes into a base class (bridge).</p>

<figure class='code'><figcaption><span>Bridge</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">BarCharter</span>
</span><span class='line'><span class="sd">  |----&gt; renderer  &lt;---- Bar Charter Interface</span>
</span><span class='line'><span class="sd">                               |----&gt; TextBarRenderer</span>
</span><span class='line'><span class="sd">                               |----&gt; ImageBarRenderer</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">BarCharter</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">renderer</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">render</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">caption</span><span class="p">,</span> <span class="n">pairs</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Qtrac.has_methods</span><span class="p">(</span><span class="s">&quot;initialize&quot;</span><span class="p">,</span> <span class="s">&quot;draw_caption&quot;</span><span class="p">,</span> <span class="s">&quot;draw_bar&quot;</span><span class="p">,</span> <span class="s">&quot;finalize&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">class</span> <span class="nc">BarRenderer</span><span class="p">(</span><span class="n">metaclass</span><span class="o">-</span><span class="n">abc</span><span class="o">.</span><span class="n">ABCMeta</span><span class="p">):</span> <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">TextBarRenderer</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">scaleFactor</span><span class="o">=</span><span class="mi">40</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bars</span><span class="p">,</span> <span class="n">maximum</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">draw_caption</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">caption</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">draw_bar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">finalize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">ImageBarRenderer</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">COLORS</span> <span class="o">=</span> <span class="p">[</span><span class="n">Image</span><span class="o">.</span><span class="n">color_for_name</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&quot;red&quot;</span><span class="p">,</span> <span class="s">&quot;green&quot;</span><span class="p">,</span> <span class="s">&quot;blue&quot;</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">stepHeight</span><span class="o">=</span><span class="mi">10</span><span class="p">,</span> <span class="n">barWidth</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span> <span class="n">barGap</span><span class="o">=</span><span class="mi">2</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">bars</span><span class="p">,</span> <span class="n">maximum</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">draw_caption</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">caption</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">draw_bar</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">finalize</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pairs</span> <span class="o">=</span> <span class="p">((</span><span class="s">&quot;Mon&quot;</span><span class="p">,</span> <span class="mi">16</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;Tue&quot;</span><span class="p">,</span> <span class="mi">17</span><span class="p">),</span> <span class="p">(</span><span class="s">&quot;Wed&quot;</span><span class="p">,</span> <span class="mi">19</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">textBarCharter</span> <span class="o">=</span> <span class="n">BarCharter</span><span class="p">(</span><span class="n">TextBarRenderer</span><span class="p">())</span>
</span><span class='line'>    <span class="n">imageBarCharter</span> <span class="o">=</span> <span class="n">BarCharter</span><span class="p">(</span><span class="n">ImageBarRenderer</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.3. Composite</h3>

<p>The composite pattern is designed to support the uniform treatment of objects
in a hierarchy, whether they contain other objects (as part of the hierarchy) or not.
Such objects are called composite.</p>

<p>In the classic approach, composite objects have the same base class for both individual
objects and for collections of objects. Both composite and noncomposite objects normally
have the same core methods, with composite objects also having additional methods to
support adding, removing, and iterating their child objects.</p>

<p>This pattern is often used in drawing programs, such as Inkscape, to support grouping and
ungrouping. The pattern in such cases because when the user selects components to group
or ungroup, some of the components might be single items (e.g., a rectangle), while
others might be composite (e.g., a face made up of many different shapes).</p>

<figure class='code'><figcaption><span>Composite</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">Boxed Pencil Set</span>
</span><span class='line'><span class="sd">  |----&gt; Box</span>
</span><span class='line'><span class="sd">  |----&gt; PencilSet ----&gt; Pencil, Ruler, Eraser</span>
</span><span class='line'><span class="sd">  |----&gt; Pencil</span>
</span><span class='line'>
</span><span class='line'><span class="sd">SimpleItem (concrete)</span>
</span><span class='line'><span class="sd">  |----&gt; AbstractItem (abstract)</span>
</span><span class='line'>
</span><span class='line'><span class="sd">CompositeItem (concreate)</span>
</span><span class='line'><span class="sd">  |----&gt; AbstractCompositeItem (abstract)</span>
</span><span class='line'><span class="sd">                 |----&gt; AbstractItem (abstract)</span>
</span><span class='line'>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AbstractItem</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">abc</span><span class="o">.</span><span class="n">ABCMeta</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@abc.abstractproperty</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">composite</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">iter</span><span class="p">([])</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SimpleItem</span><span class="p">(</span><span class="n">AbstractItem</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">price</span><span class="o">=</span><span class="mf">0.00</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">composite</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">False</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">print</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AbstractCompositeItem</span><span class="p">(</span><span class="n">AbstractItem</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">items</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">children</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">items</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="o">*</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">first</span><span class="p">,</span> <span class="o">*</span><span class="n">items</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">first</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">items</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">remove</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">children</span><span class="o">.</span><span class="n">remove</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">iter</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">children</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">CompositeItem</span><span class="p">(</span><span class="n">AbstractCompositeItem</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="o">*</span><span class="n">items</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">items</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">composite</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">True</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">price</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">item</span><span class="o">.</span><span class="n">price</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">print</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">indent</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pencil</span> <span class="o">=</span> <span class="n">SimpleItem</span><span class="p">(</span><span class="s">&quot;Pencil&quot;</span><span class="p">,</span> <span class="mf">0.40</span><span class="p">)</span>
</span><span class='line'>    <span class="n">ruler</span> <span class="o">=</span> <span class="n">SimpleItem</span><span class="p">(</span><span class="s">&quot;Ruler&quot;</span><span class="p">,</span> <span class="mf">1.60</span><span class="p">)</span>
</span><span class='line'>    <span class="n">eraser</span> <span class="o">=</span> <span class="n">SimpleItem</span><span class="p">(</span><span class="s">&quot;Eraser&quot;</span><span class="p">,</span> <span class="mf">0.20</span><span class="p">)</span>
</span><span class='line'>    <span class="n">pencilSet</span> <span class="o">=</span> <span class="n">CompositeItem</span><span class="p">(</span><span class="s">&quot;Pencil Set&quot;</span><span class="p">,</span> <span class="n">pencil</span><span class="p">,</span> <span class="n">ruler</span><span class="p">,</span> <span class="n">eraser</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">box</span> <span class="o">=</span> <span class="n">SimpleItem</span><span class="p">(</span><span class="s">&quot;Box&quot;</span><span class="p">,</span> <span class="mf">1.00</span><span class="p">)</span>
</span><span class='line'>    <span class="n">boxedPencilSet</span> <span class="o">=</span> <span class="n">CompositeItem</span><span class="p">(</span><span class="s">&quot;Boxed Pencil Set&quot;</span><span class="p">,</span> <span class="n">box</span><span class="p">,</span> <span class="n">pencilSet</span><span class="p">)</span>
</span><span class='line'>    <span class="n">boxedPencilSet</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">pencil</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.4. Decorator</h3>

<p>A decorator is a function that takes a function as its sole argument and returns a new
function with the same name as the original function but with enhanced functionality.
Decorators are often used by frameworks (e.g., web frameworks) to make it easy to integrate
our own functions within the framework.</p>

<figure class='code'><figcaption><span>Decorator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">@decorator #3</span>
</span><span class='line'><span class="sd">  @decorator #2</span>
</span><span class='line'><span class="sd">    @decorator #1</span>
</span><span class='line'><span class="sd">      function, method, or class</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@float_args_and_return</span>
</span><span class='line'><span class="k">def</span> <span class="nf">mean</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">second</span><span class="p">,</span> <span class="o">*</span><span class="n">rest</span><span class="p">):</span>
</span><span class='line'>   <span class="n">numbers</span> <span class="o">=</span> <span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">second</span><span class="p">)</span> <span class="o">+</span> <span class="n">rest</span>
</span><span class='line'>   <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span> <span class="o">/</span> <span class="nb">len</span><span class="p">(</span><span class="n">numbers</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">float_args_and_return</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
</span><span class='line'>    <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">args</span> <span class="o">=</span> <span class="p">[</span><span class="nb">float</span><span class="p">(</span><span class="n">arg</span><span class="p">)</span> <span class="k">for</span> <span class="n">arg</span> <span class="ow">in</span> <span class="n">args</span><span class="p">]</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">float</span><span class="p">(</span><span class="n">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">))</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="nd">@statically_typed</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">str</span><span class="p">,</span> <span class="n">return_type</span><span class="o">=</span><span class="nb">str</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">make_tagged</span><span class="p">(</span><span class="n">text</span><span class="p">,</span> <span class="n">tag</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;{0}{1}{0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">tag</span><span class="p">,</span> <span class="n">escape</span><span class="p">(</span><span class="n">text</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@statically_typed</span><span class="p">(</span><span class="nb">str</span><span class="p">,</span> <span class="nb">int</span><span class="p">,</span> <span class="nb">str</span><span class="p">)</span>
</span><span class='line'><span class="k">def</span> <span class="nf">repeat</span><span class="p">(</span><span class="n">what</span><span class="p">,</span> <span class="n">count</span><span class="p">,</span> <span class="n">separator</span><span class="p">):</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">((</span><span class="n">what</span> <span class="o">+</span> <span class="n">separator</span><span class="p">)</span> <span class="o">*</span> <span class="n">count</span><span class="p">)[:</span><span class="o">-</span><span class="nb">len</span><span class="p">(</span><span class="n">separator</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">statically_typed</span><span class="p">(</span><span class="o">*</span><span class="n">types</span><span class="p">,</span> <span class="n">return_type</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
</span><span class='line'>        <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>            <span class="o">...</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">result</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">decorator</span>
</span><span class='line'>
</span><span class='line'><span class="c">#--------------------------------------------------#</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@ensure</span><span class="p">(</span><span class="s">&quot;title&quot;</span><span class="p">,</span> <span class="n">is_non_empty_str</span><span class="p">)</span>
</span><span class='line'><span class="nd">@ensure</span><span class="p">(</span><span class="s">&quot;isbn&quot;</span><span class="p">,</span> <span class="n">is_valid_isbn</span><span class="p">)</span>
</span><span class='line'><span class="nd">@ensure</span><span class="p">(</span><span class="s">&quot;price&quot;</span><span class="p">,</span> <span class="n">is_in_range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100000</span><span class="p">))</span>
</span><span class='line'><span class="nd">@ensure</span><span class="p">(</span><span class="s">&quot;quantity&quot;</span><span class="p">,</span> <span class="n">is_in_range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10000</span><span class="p">))</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Book</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">isbn</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">quantity</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">price</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">quantity</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">ensure</span><span class="p">(</span><span class="s">&quot;title&quot;</span><span class="p">,</span> <span class="n">is_non_empty_str</span><span class="p">)(</span>
</span><span class='line'>    <span class="n">ensure</span><span class="p">(</span><span class="s">&quot;isbn&quot;</span><span class="p">,</span> <span class="n">is_valid_isbn</span><span class="p">)(</span>
</span><span class='line'>      <span class="n">ensure</span><span class="p">(</span><span class="s">&quot;price&quot;</span><span class="p">,</span> <span class="n">is_in_range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">100000</span><span class="p">))(</span>
</span><span class='line'>          <span class="n">ensure</span><span class="p">(</span><span class="s">&quot;quantity&quot;</span><span class="p">,</span> <span class="n">is_in_range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10000</span><span class="p">))(</span><span class="k">class</span> <span class="nc">Book</span><span class="p">:</span> <span class="o">...</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">ensure</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">validate</span><span class="p">,</span> <span class="n">doc</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">decorator</span><span class="p">(</span><span class="n">Class</span><span class="p">):</span>
</span><span class='line'>        <span class="n">privateName</span> <span class="o">=</span> <span class="s">&quot;__&quot;</span> <span class="o">+</span> <span class="n">name</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">getter</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">privateName</span><span class="p">)</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">setter</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>            <span class="n">validate</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>            <span class="nb">setattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">privateName</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">setattr</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="nb">property</span><span class="p">(</span><span class="n">getter</span><span class="p">,</span> <span class="n">setter</span><span class="p">,</span> <span class="n">doc</span><span class="o">=</span><span class="n">doc</span><span class="p">))</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Class</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">decorator</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_non_empty_str</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">is_in_range</span><span class="p">(</span><span class="n">minimum</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">maximum</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="c">#--------------------------------------------------#</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@do_ensure</span>
</span><span class='line'><span class="k">class</span> <span class="nc">Book</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">title</span> <span class="o">=</span> <span class="n">Ensure</span><span class="p">(</span><span class="n">is_non_empty_str</span><span class="p">)</span>
</span><span class='line'>    <span class="n">isbn</span> <span class="o">=</span> <span class="n">Ensure</span><span class="p">(</span><span class="n">is_valid_isbn</span><span class="p">)</span>
</span><span class='line'>    <span class="n">price</span> <span class="o">=</span> <span class="n">Ensure</span><span class="p">(</span><span class="n">is_in_range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">10000</span><span class="p">))</span>
</span><span class='line'>    <span class="n">quantity</span> <span class="o">=</span> <span class="n">Ensure</span><span class="p">(</span><span class="n">is_in_range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">10000</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">isbn</span><span class="p">,</span> <span class="n">price</span><span class="p">,</span> <span class="n">quantity</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">title</span> <span class="o">=</span> <span class="n">title</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">isbn</span> <span class="o">=</span> <span class="n">isbn</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">price</span> <span class="o">=</span> <span class="n">price</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">quantity</span> <span class="o">=</span> <span class="n">quantity</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">price</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">quantity</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Ensure</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">validate</span><span class="p">,</span> <span class="n">doc</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">validate</span> <span class="o">=</span> <span class="n">validate</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">doc</span> <span class="o">=</span> <span class="n">doc</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">do_ensure</span><span class="p">(</span><span class="n">Class</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">make_property</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">attribute</span><span class="p">):</span>
</span><span class='line'>        <span class="n">privateName</span> <span class="o">=</span> <span class="s">&quot;__&quot;</span> <span class="o">+</span> <span class="n">name</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">getter</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">getattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">privateName</span><span class="p">)</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">setter</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>            <span class="n">attribute</span><span class="o">.</span><span class="n">validate</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>            <span class="nb">setattr</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">privatName</span><span class="p">,</span> <span class="n">value</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">property</span><span class="p">(</span><span class="n">getter</span><span class="p">,</span> <span class="n">setter</span><span class="p">,</span> <span class="n">doc</span><span class="o">=</span><span class="n">attribute</span><span class="o">.</span><span class="n">doc</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">attribute</span> <span class="ow">in</span> <span class="n">Class</span><span class="o">.</span><span class="n">__dict__</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>        <span class="k">if</span> <span class="nb">isinstance</span><span class="p">(</span><span class="n">attribute</span><span class="p">,</span> <span class="n">Ensure</span><span class="p">):</span>
</span><span class='line'>            <span class="nb">setattr</span><span class="p">(</span><span class="n">Class</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">make_property</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">attribute</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Class</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.5. Facade</h3>

<p>The facade pattern is used to present a simplified and uniform interface to a
subsystem whose interface is too complex or too low-level for convenient use.</p>

<figure class='code'><figcaption><span>Facade</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">Archive</span>
</span><span class='line'><span class="sd">  |----&gt; filename</span>
</span><span class='line'><span class="sd">  |----&gt; names()</span>
</span><span class='line'><span class="sd">  |----&gt; unpack()  ----&gt; gzip</span>
</span><span class='line'><span class="sd">                   ----&gt; tarfile.TarFile --&gt; getnames()/extractall()</span>
</span><span class='line'><span class="sd">                   ----&gt; zipfile.ZipFile --&gt; namelist()/extractall()</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Archive</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_names</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_unpack</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_file</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">_filename</span> <span class="o">=</span> <span class="n">filename</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">filename</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__filename</span><span class="err">`</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@filename.setter</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">filename</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__filename</span> <span class="o">=</span> <span class="n">name</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">close</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__enter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__exit__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">exc_type</span><span class="p">,</span> <span class="n">exc_value</span><span class="p">,</span> <span class="n">traceback</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">close</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">names</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_file</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">_prepare</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_names</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">unpack</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">_file</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">_prepare</span><span class="p">()</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">_unpack</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_prepare</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">filename</span><span class="o">.</span><span class="n">endswith</span><span class="p">((</span><span class="s">&quot;.tar.gz&quot;</span><span class="p">,</span> <span class="s">&quot;.tar.gz2&quot;</span><span class="p">,</span> <span class="s">&quot;tar.xz&quot;</span><span class="p">,</span> <span class="s">&quot;.zip&quot;</span><span class="p">)):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">_prepare_tarball_or_zip</span><span class="p">()</span>
</span><span class='line'>        <span class="k">elif</span> <span class="bp">self</span><span class="o">.</span><span class="n">filename</span><span class="o">.</span><span class="n">endswith</span><span class="p">(</span><span class="s">&quot;.gz&quot;</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">_prepare_gzip</span><span class="p">()</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">ValueError</span><span class="p">(</span><span class="s">&quot;unreadable: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">filename</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_prepare_tarball_r_zip</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_prepare_gzip</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.6. Flyweight</h3>

<p>The flyweight pattern is designed for handling large numbers of relatively small objects,
where many of the small objects are duplicates of each other. The pattern is implemented by
representing each unique object only once, and by sharing this unique instance wherever it
is needed.</p>

<figure class='code'><figcaption><span>Flyweight</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">red</span><span class="p">,</span> <span class="n">gree</span><span class="p">,</span> <span class="n">blud</span> <span class="o">=</span> <span class="s">&quot;red&quot;</span><span class="p">,</span> <span class="s">&quot;green&quot;</span><span class="p">,</span> <span class="s">&quot;blue&quot;</span>
</span><span class='line'><span class="n">x</span> <span class="o">=</span> <span class="p">(</span><span class="n">red</span><span class="p">,</span> <span class="n">green</span><span class="p">,</span> <span class="n">blue</span><span class="p">,</span> <span class="n">red</span><span class="p">,</span> <span class="n">green</span><span class="p">,</span> <span class="n">blue</span><span class="p">,</span> <span class="n">red</span><span class="p">,</span> <span class="n">green</span><span class="p">)</span>
</span><span class='line'><span class="n">y</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;red&quot;</span><span class="p">,</span> <span class="s">&quot;green&quot;</span><span class="p">,</span> <span class="s">&quot;blue&quot;</span><span class="p">,</span> <span class="s">&quot;red&quot;</span><span class="p">,</span> <span class="s">&quot;green&quot;</span><span class="p">,</span> <span class="s">&quot;blue&quot;</span><span class="p">,</span> <span class="s">&quot;red&quot;</span><span class="p">,</span> <span class="s">&quot;green&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Point</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="c">#__slots__ = (&quot;x&quot;, &quot;y&quot;, &quot;z&quot;, &quot;color&quot;)</span>
</span><span class='line'>    <span class="n">__slots__</span> <span class="o">=</span> <span class="p">()</span>
</span><span class='line'>    <span class="n">__dbm</span> <span class="o">=</span> <span class="n">shelve</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">os</span><span class="o">.</span><span class="n">path</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">tempfile</span><span class="o">.</span><span class="n">gettempdir</span><span class="p">(),</span> <span class="s">&quot;point.db&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">z</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">x</span> <span class="o">=</span> <span class="n">x</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">y</span> <span class="o">=</span> <span class="n">y</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">z</span> <span class="o">=</span> <span class="n">z</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">color</span> <span class="o">=</span> <span class="n">color</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__key</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="s">&quot;{:X}:{}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="nb">id</span><span class="p">(</span><span class="bp">self</span><span class="p">),</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__getattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">Point</span><span class="o">.</span><span class="n">__dbm</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">__key</span><span class="p">(</span><span class="n">name</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__setattr__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="n">Point</span><span class="o">.</span><span class="n">__dbm</span><span class="p">[</span><span class="bp">self</span><span class="o">.</span><span class="n">__key</span><span class="p">(</span><span class="n">name</span><span class="p">)]</span> <span class="o">=</span> <span class="n">value</span>
</span></code></pre></td></tr></table></div></figure>


<h3>2.7. Proxy</h3>

<p>The proxy pattern is used when we want one object to stand in for another.</p>

<p>Four use cases:</p>

<ul>
<li>a remote proxy where a local object proxies a remote object</li>
<li>a virtual proxy that allows us to create lightweight objects instead of heavyweight objects</li>
<li>a protection proxy that provides different levels of access depending on a client&rsquo;s access rights</li>
<li>a smart reference that &ldquo;performs additional actions where an object accessed&rdquo;</li>
</ul>


<p>Proxy pattern is also be used in unit testing.</p>

<figure class='code'><figcaption><span>Proxy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">ImageProxy</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">ImageClass</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">height</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="o">...</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">Image</span> <span class="o">=</span> <span class="n">ImageClass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">load</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">commands</span> <span class="o">=</span> <span class="p">[(</span><span class="bp">self</span><span class="o">.</span><span class="n">Image</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="n">filename</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Image</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">set_pixel</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">color</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">line</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x0</span><span class="p">,</span> <span class="n">y0</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">color</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">rectangle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x0</span><span class="p">,</span> <span class="n">y0</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">outline</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">ellipse</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x0</span><span class="p">,</span> <span class="n">y0</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">outline</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">save</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">filename</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">YELLOW</span><span class="p">,</span> <span class="n">CYAN</span><span class="p">,</span> <span class="n">BLUE</span><span class="p">,</span> <span class="n">RED</span><span class="p">,</span> <span class="n">BLACK</span> <span class="o">=</span> <span class="p">(</span><span class="n">Image</span><span class="o">.</span><span class="n">color_for_name</span><span class="p">(</span><span class="n">color</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">color</span> <span class="ow">in</span> <span class="p">(</span><span class="s">&quot;yellow&quot;</span><span class="p">,</span> <span class="s">&quot;cyan&quot;</span><span class="p">,</span> <span class="s">&quot;blue&quot;</span><span class="p">,</span> <span class="s">&quot;red&quot;</span><span class="p">,</span> <span class="s">&quot;black&quot;</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">image</span> <span class="o">=</span> <span class="n">ImageProxy</span><span class="p">(</span><span class="n">Image</span><span class="o">.</span><span class="n">Image</span><span class="p">,</span> <span class="mi">300</span><span class="p">,</span> <span class="mi">60</span><span class="p">)</span>
</span><span class='line'>    <span class="n">image</span><span class="o">.</span><span class="n">rectangle</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">299</span><span class="p">,</span> <span class="mi">59</span><span class="p">,</span> <span class="n">fill</span><span class="o">=</span><span class="n">YELLOW</span><span class="p">)</span>
</span><span class='line'>    <span class="n">image</span><span class="o">.</span><span class="n">ellipse</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">299</span><span class="p">,</span> <span class="mi">59</span><span class="p">,,</span> <span class="n">fill</span><span class="o">=</span><span class="n">CYAN</span><span class="p">)</span>
</span><span class='line'>    <span class="n">image</span><span class="o">.</span><span class="n">ellipse</span><span class="p">(</span><span class="mi">60</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">120</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="n">BLUE</span><span class="p">,</span> <span class="n">RED</span><span class="p">)</span>
</span><span class='line'>    <span class="n">image</span><span class="o">.</span><span class="n">line</span><span class="p">(</span><span class="mi">181</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">239</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="n">BLUE</span><span class="p">)</span>
</span><span class='line'>    <span class="n">image</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="n">filename</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>3. Behavioral Design Patterns</h2>

<p>The behavioral patterns are concerned with how things get done, that is, with algorithms
and object interactions. They provide powerful ways of thinking about and organizing
computations.</p>

<h3>3.1. Chain of responsibility</h3>

<p>The chain of responsibility pattern is designed to decouple the sender of a request from
the recipient that processes the request.</p>

<p>The first function sends a request to a chain of receivers. The first receiver in the chain
either can handle the request to the next receiver in the chain. The second receiver has the
same choices, and so on, until the last one is reached (which could choose to throw the request
away or to raise an exception).</p>

<figure class='code'><figcaption><span>Conventional Chain</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">Conventional Chain</span>
</span><span class='line'>
</span><span class='line'><span class="sd">A generator is a function or method that has one or more yield expressions instead of</span>
</span><span class='line'><span class="sd">returns. Whenever a yield is reached, the value yielded is produced, and the function</span>
</span><span class='line'><span class="sd">or method is suspended with all its state intact. At this point the function has</span>
</span><span class='line'><span class="sd">yielded the processor (to the receiver of the value it has produced), so although</span>
</span><span class='line'><span class="sd">suspended, the function does not block. Then, when the function or method is used again,</span>
</span><span class='line'><span class="sd">execution resumes from the statement following the yield. So, value are pulled from a</span>
</span><span class='line'><span class="sd">generator by iterating over it (e.g., using for value in generator:) or by calling</span>
</span><span class='line'><span class="sd">next() on it.</span>
</span><span class='line'>
</span><span class='line'><span class="sd">    &lt;event&gt; -&gt; TimeHandler -&gt; KeyHandler -&gt; MouseHandler -&gt; NullHandler</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">NullHandler</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">successor</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__successor</span> <span class="o">=</span> <span class="n">successor</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__successor</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">__successor</span><span class="o">.</span><span class="n">handle</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MouseHandler</span><span class="p">(</span><span class="n">NullHandler</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">Event</span><span class="o">.</span><span class="n">MOUSE</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;Click: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">event</span><span class="p">))</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">handle</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">DebugHandler</span><span class="p">(</span><span class="n">NullHandler</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">successor</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="n">successor</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__file</span> <span class="o">=</span> <span class="nb">file</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">handle</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;*DEBUG*: {}</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">event</span><span class="p">))</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">handle</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">handler1</span> <span class="o">=</span> <span class="n">TimerHandler</span><span class="p">(</span><span class="n">KeyHandler</span><span class="p">(</span><span class="n">MouseHandler</span><span class="p">(</span><span class="n">NullHandler</span><span class="p">())))</span>
</span><span class='line'>    <span class="n">handler2</span> <span class="o">=</span> <span class="n">DebugHandler</span><span class="p">(</span><span class="n">handler1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Coroutine-based Chain</p>

<p>A coroutine uses the same yield expression as a generator but has different behavior.
A coroutine executes an infinite loop and starts out suspended at its first (or only)
yield expression, waiting for a value to be sent to it. If and when a value is sent,
the coroutine receives this as the value ofo its yield expression. The coroutine can then
do any processing it wants and when it has finished, it loops and again becomes suspended
waiting for a value to arrive at its next yield expression. So, values are pushed into a
coroutine by calling the coroutine&rsquo;s send() and throw() methods.</p>

<figure class='code'><figcaption><span>Coroutine-based Chain</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">coroutine</span><span class="p">(</span><span class="n">function</span><span class="p">):</span>
</span><span class='line'>    <span class="nd">@functools.wraps</span><span class="p">(</span><span class="n">function</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">wrapper</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>        <span class="n">generator</span> <span class="o">=</span> <span class="n">function</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">next</span><span class="p">(</span><span class="n">generator</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">generator</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">wrapper</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@coroutine</span>
</span><span class='line'><span class="k">def</span> <span class="nf">key_handler</span><span class="p">(</span><span class="n">successor</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">event</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">event</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">Event</span><span class="o">.</span><span class="n">KEYPRESS</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;Press: {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">event</span><span class="p">))</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">successor</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">successor</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@coroutine</span>
</span><span class='line'><span class="k">def</span> <span class="nf">debug_handler</span><span class="p">(</span><span class="n">successor</span><span class="p">,</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stdout</span><span class="p">):</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">event</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span><span class="p">)</span>
</span><span class='line'>        <span class="nb">file</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="s">&quot;*DEBUG*: {}</span><span class="se">\n</span><span class="s">&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">event</span><span class="p">))</span>
</span><span class='line'>        <span class="n">successor</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">event</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">pipeline</span> <span class="o">=</span> <span class="n">key_handler</span><span class="p">(</span><span class="n">mouse_handler</span><span class="p">(</span><span class="n">timer_handler</span><span class="p">()))</span>
</span><span class='line'>    <span class="n">pipeline</span> <span class="o">-</span> <span class="n">debug_handler</span><span class="p">(</span><span class="n">pipeline</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.2. Command</h3>

<p>The command pattern is used to encapsulate commands as objects. This makes it possible,
for example, to build up a sequence of commands for deferred execution or to create undoable
commands.</p>

<figure class='code'><figcaption><span>Command</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Grid</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">width</span><span class="p">,</span> <span class="n">height</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">cell</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">rows</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">columns</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UndoableGrid</span><span class="p">(</span><span class="n">Grid</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_cell_command</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">color</span><span class="p">):</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">undo</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">do</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">create_rectangle_macro</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">x0</span><span class="p">,</span> <span class="n">x0</span><span class="p">,</span> <span class="n">x1</span><span class="p">,</span> <span class="n">y1</span><span class="p">,</span> <span class="n">color</span><span class="p">):</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Command</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">do</span><span class="p">,</span> <span class="n">undo</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">do</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Macro</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">description</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">command</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">do</span> <span class="o">=</span> <span class="n">__call__</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">undo</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">grid</span> <span class="o">=</span> <span class="n">UndoableGrid</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redLeft</span> <span class="o">=</span> <span class="n">grid</span><span class="o">.</span><span class="n">create_cell_command</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&quot;red&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redRight</span> <span class="o">=</span> <span class="n">grid</span><span class="o">.</span><span class="n">create_cell_command</span><span class="p">(</span><span class="mi">5</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&quot;red&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">redLeft</span><span class="p">()</span>
</span><span class='line'>    <span class="n">redRight</span><span class="o">.</span><span class="n">do</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.3. Interpreter</h3>

<p>The interpreter pattern formalize two common requirements:</p>

<ul>
<li>providing some means by which users can enter nonstring values into applications</li>
<li>allowing users to program applications</li>
</ul>


<figure class='code'><figcaption><span>Interpreter: Expression Evaluataion with eval()/exec()/subprocess</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">math</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">global_context</span><span class="p">():</span>
</span><span class='line'>    <span class="n">globaContext</span> <span class="o">=</span> <span class="nb">globals</span><span class="p">()</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">name</span> <span class="ow">in</span> <span class="nb">dir</span><span class="p">(</span><span class="n">math</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="ow">not</span> <span class="n">name</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&quot;_&quot;</span><span class="p">):</span>
</span><span class='line'>            <span class="n">globalContext</span><span class="p">[</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">math</span><span class="p">,</span> <span class="n">name</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">globalContext</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">calculate</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">globalContext</span><span class="p">,</span> <span class="n">localContext</span><span class="p">,</span> <span class="n">current</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="n">localContext</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">current</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">quit</span> <span class="o">=</span> <span class="s">&quot;Ctrl+Z,Enter&quot;</span> <span class="k">if</span> <span class="n">sys</span><span class="o">.</span><span class="n">platform</span><span class="o">.</span><span class="n">startswith</span><span class="p">(</span><span class="s">&quot;win&quot;</span><span class="p">)</span> <span class="k">else</span> <span class="s">&quot;Ctrl+D&quot;</span>
</span><span class='line'>    <span class="n">prompt</span> <span class="o">=</span> <span class="s">&quot;Enter an expression ({} to quit): &quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">quit</span><span class="p">)</span>
</span><span class='line'>    <span class="n">current</span> <span class="o">=</span> <span class="n">types</span><span class="o">.</span><span class="n">SimpleNamespace</span><span class="p">(</span><span class="n">letter</span><span class="o">=</span><span class="s">&#39;A&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">globalContext</span> <span class="o">=</span> <span class="n">global_context</span><span class="p">()</span>
</span><span class='line'>    <span class="n">localContext</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">OrderedDict</span><span class="p">()</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="k">try</span><span class="p">:</span>
</span><span class='line'>            <span class="n">expression</span> <span class="o">=</span> <span class="nb">input</span><span class="p">(</span><span class="n">prompt</span><span class="p">)</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">expression</span><span class="p">:</span>
</span><span class='line'>                <span class="n">calculate</span><span class="p">(</span><span class="n">expression</span><span class="p">,</span> <span class="n">globalContext</span><span class="p">,</span> <span class="n">localContext</span><span class="p">,</span> <span class="n">current</span><span class="p">)</span>
</span><span class='line'>        <span class="k">except</span> <span class="ne">EOFError</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">()</span>
</span><span class='line'>            <span class="k">break</span>
</span><span class='line'>
</span><span class='line'><span class="c">#--------------------------------------------------#</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">execute</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">context</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">try</span><span class="p">:</span>
</span><span class='line'>        <span class="k">exec</span><span class="p">(</span><span class="n">code</span><span class="o">.</span><span class="n">code</span><span class="p">,</span> <span class="nb">globals</span><span class="p">(),</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>        <span class="n">result</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">gete</span><span class="p">(</span><span class="s">&quot;result)&quot;</span>
</span><span class='line'>        <span class="n">error</span> <span class="o">=</span> <span class="n">context</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;error&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="n">handle_result</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">error</span><span class="p">)</span>
</span><span class='line'>    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">err</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">err</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">context</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span><span class="n">genome</span><span class="o">=</span><span class="n">genome</span><span class="p">,</span> <span class="n">target</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">replace</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">execute</span><span class="p">(</span><span class="n">code</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.4. Iterator</h3>

<p>The iterator pattern provides a way of sequentially accessing the items inside a
collection or an aggregate object without exposing any of the internals of the
collection or aggregate&rsquo;s implementation.</p>

<figure class='code'><figcaption><span>SequenceProtocolIterators</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">AtoZ</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">index</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="mi">0</span> <span class="o">&lt;=</span> <span class="n">index</span> <span class="o">&lt;</span> <span class="mi">26</span><span class="p">:</span>
</span><span class='line'>            <span class="k">return</span> <span class="nb">chr</span><span class="p">(</span><span class="n">index</span> <span class="o">+</span> <span class="nb">ord</span><span class="p">(</span><span class="s">&quot;A&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">IndexError</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">letter</span> <span class="ow">in</span> <span class="n">AtoZ</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">letter</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Two-Argument iter() Function Iterators</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Presidents</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">__names</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;George Washington&quot;</span><span class="p">,</span> <span class="s">&quot;John Adams&quot;</span><span class="p">,</span> <span class="s">&quot;Thomas Jefferson&quot;</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">first</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">=</span> <span class="p">(</span><span class="o">-</span><span class="mi">1</span> <span class="k">if</span> <span class="n">first</span> <span class="ow">is</span> <span class="bp">None</span> <span class="k">else</span> <span class="n">Presidents</span><span class="o">.</span><span class="n">__names</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">first</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">index</span> <span class="o">&lt;</span> <span class="nb">len</span><span class="p">(</span><span class="n">Presidents</span><span class="o">.</span><span class="n">__names</span><span class="p">):</span>
</span><span class='line'>            <span class="k">return</span> <span class="n">Presidents</span><span class="o">.</span><span class="n">__names</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">index</span><span class="p">)</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">StopIteration</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="n">president</span> <span class="ow">in</span> <span class="nb">iter</span><span class="p">(</span><span class="n">Presidents</span><span class="p">(</span><span class="s">&quot;George Bush&quot;</span><span class="p">),</span> <span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">president</span><span class="p">,</span> <span class="n">end</span><span class="o">=</span><span class="s">&quot; * &quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="k">print</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>IteratorProtocolIterators</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Bag</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">items</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__bag</span> <span class="o">=</span> <span class="p">{}</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">items</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">items</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__bag</span><span class="p">[</span><span class="n">item</span><span class="p">]</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__bag</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__delitem__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__bag</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">item</span><span class="p">)</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">__bag</span><span class="p">[</span><span class="n">item</span><span class="p">]</span> <span class="o">-=</span> <span class="mi">1</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__bag</span><span class="p">[</span><span class="n">item</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">del</span> <span class="bp">self</span><span class="o">.</span><span class="n">__bag</span><span class="p">[</span><span class="n">item</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">KeyError</span><span class="p">(</span><span class="nb">str</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__bag</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">sum</span><span class="p">(</span><span class="n">count</span> <span class="k">for</span> <span class="n">count</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">__bag</span><span class="o">.</span><span class="n">values</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__contains__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">item</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">item</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">__bag</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__iter__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="n">items</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">item</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">__bag</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">count</span><span class="p">):</span>
</span><span class='line'>                <span class="n">items</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">item</span><span class="p">)</span>
</span><span class='line'>        <span class="k">return</span> <span class="nb">iter</span><span class="p">(</span><span class="n">items</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.5. Mediator</h3>

<p>The mediator pattern provides a means of creating an object - the mediator - that can
encapsulate the interactions between other objects. This makes it possible to achieve
iteractions between objects that have no direct knowledge of each other.</p>

<figure class='code'><figcaption><span>Mediator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">Text   #1</span>
</span><span class='line'><span class="sd">Text   #2</span>
</span><span class='line'><span class="sd">             --&gt; Mediator --&gt; updateui()/clicked()</span>
</span><span class='line'><span class="sd">Button #1</span>
</span><span class='line'><span class="sd">Button #2</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Form</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">create_widgets</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">create_mediator</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_widgets</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">nameText</span> <span class="o">=</span> <span class="n">Text</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">emailText</span> <span class="o">=</span> <span class="n">Text</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">okButton</span> <span class="o">=</span> <span class="n">Button</span><span class="p">(</span><span class="s">&quot;OK&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">cancelButton</span> <span class="o">=</span> <span class="n">Button</span><span class="p">(</span><span class="s">&quot;Cancel&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">create_mediator</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">mediator</span> <span class="o">=</span> <span class="n">Mediator</span><span class="p">(((</span><span class="bp">self</span><span class="o">.</span><span class="n">nameText</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">update_ui</span><span class="p">),</span>
</span><span class='line'>                                  <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">emailText</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">update_ui</span><span class="p">),</span>
</span><span class='line'>                                  <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">okButton</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">clicked</span><span class="p">),</span>
</span><span class='line'>                                  <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">cancelButton</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">clicked</span><span class="p">)))</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">update_ui</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">update_ui</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">widget</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">okButton</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">nameText</span><span class="o">.</span><span class="n">text</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">bool</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">emailText</span><span class="o">.</span><span class="n">text</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">clicked</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">widget</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">widget</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">okButton</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;OK&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">widget</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">cancelButton</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;Cancel&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mediator</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">widgetCallablePairs</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">callablesForWidget</span> <span class="o">=</span> <span class="n">collections</span><span class="o">.</span><span class="n">defaultdict</span><span class="p">(</span><span class="nb">list</span><span class="p">)</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">widget</span><span class="p">,</span> <span class="n">caller</span> <span class="ow">in</span> <span class="n">widgetCallablePairs</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">callablesForWidget</span><span class="p">[</span><span class="n">widget</span><span class="p">]</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">caller</span><span class="p">)</span>
</span><span class='line'>            <span class="n">widget</span><span class="o">.</span><span class="n">mediator</span> <span class="o">=</span> <span class="bp">self</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">on_change</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">widget</span><span class="p">):</span>
</span><span class='line'>        <span class="n">callables</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">callablesForWidget</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="n">widget</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">callables</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="k">for</span> <span class="n">caller</span> <span class="ow">in</span> <span class="n">callables</span><span class="p">:</span>
</span><span class='line'>                <span class="n">caller</span><span class="p">(</span><span class="n">widget</span><span class="p">)</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">raise</span> <span class="ne">AttributeError</span><span class="p">(</span><span class="s">&quot;No on_change() method registered for {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">widget</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mediated</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">mediator</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">on_change</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">mediator</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">mediator</span><span class="o">.</span><span class="n">on_change</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Button</span><span class="p">(</span><span class="n">Mediated</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="bp">True</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">click</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">enabled</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">on_change</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Text</span><span class="p">(</span><span class="n">Mediated</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">text</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__text</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@text.setter</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">text</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">text</span> <span class="o">!=</span> <span class="n">text</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">__text</span> <span class="o">=</span> <span class="n">text</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">on_change</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Coroutine-Based Mediator</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">create_mediator</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">mediator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">_update_ui_mediator</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">_clicked_mediator</span><span class="p">())</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">widget</span> <span class="ow">in</span> <span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">nameText</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">emailText</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">okButton</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">cancelButton</span><span class="p">):</span>
</span><span class='line'>        <span class="n">widget</span><span class="o">.</span><span class="n">mediator</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">mediator</span>
</span><span class='line'>    <span class="bp">self</span><span class="o">.</span><span class="n">mediator</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@coroutine</span>
</span><span class='line'><span class="k">def</span> <span class="nf">_update_ui_mediator</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">successor</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">widget</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span><span class="p">)</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">okButton</span><span class="o">.</span><span class="n">enabled</span> <span class="o">=</span> <span class="p">(</span><span class="nb">bool</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">nameText</span><span class="o">.</span><span class="n">text</span><span class="p">)</span> <span class="ow">and</span> <span class="nb">bool</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">emailText</span><span class="o">.</span><span class="n">text</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="n">successor</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">successor</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">widget</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@coroutine</span>
</span><span class='line'><span class="k">def</span> <span class="nf">_clicked_mediator</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">successor</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>    <span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>        <span class="n">widget</span> <span class="o">=</span> <span class="p">(</span><span class="k">yield</span><span class="p">)</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">widget</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">okButton</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;OK&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">widget</span> <span class="o">==</span> <span class="bp">self</span><span class="o">.</span><span class="n">cancelButton</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span><span class="p">(</span><span class="s">&quot;Cancel&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">elif</span> <span class="n">successor</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="n">successor</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="n">widget</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Mediated</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">mediator</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">on_change</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">mediator</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">mediator</span><span class="o">.</span><span class="n">send</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.6. Memento</h3>

<p>The memento pattern is a means of saving and restoring an object&rsquo;s state without
violating encapsulation.</p>

<h3>3.7. Observer</h3>

<p>The observer pattern supports many-to-many dependency relationships between objects,
such that when one object changes state, all its related objects are notified.</p>

<p>Nowadays, probably the most commmon expression of this pattern and its variants is
the mode/view/controller(MVC) paradigm. In this paradigm, a model represents data,
one or more views visualize that data, and one or more controllers mediate between
input(e.g. user interaction) and the model. And any changes to the model are
automatically reflected in the associated views.</p>

<figure class='code'><figcaption><span>Observer</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'><span class="sd">SliderModel</span>
</span><span class='line'><span class="sd">  |----&gt; HistoryView</span>
</span><span class='line'><span class="sd">  |----&gt; LiveView</span>
</span><span class='line'><span class="sd">&quot;&quot;&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Observed</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__observers</span> <span class="o">=</span> <span class="nb">set</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">observers_add</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">observer</span><span class="p">,</span> <span class="o">*</span><span class="n">observers</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">observer</span> <span class="ow">in</span> <span class="n">itertools</span><span class="o">.</span><span class="n">chain</span><span class="p">((</span><span class="n">observer</span><span class="p">,),</span> <span class="n">observers</span><span class="p">):</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">__observers</span><span class="o">.</span><span class="n">add</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>            <span class="n">observer</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">observer_discard</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">observer</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__observers</span><span class="o">.</span><span class="n">discard</span><span class="p">(</span><span class="n">observer</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">observers_notify</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">for</span> <span class="n">observer</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">__observers</span><span class="p">:</span>
</span><span class='line'>            <span class="n">observer</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SliderModel</span><span class="p">(</span><span class="n">Observed</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">minimum</span><span class="p">,</span> <span class="n">value</span><span class="p">,</span> <span class="n">maximum</span><span class="p">):</span>
</span><span class='line'>        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__init_</span><span class="p">()</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">__minimum</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__value</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">__mximum</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">minimum</span> <span class="o">=</span> <span class="n">minimum</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">maximum</span> <span class="o">=</span> <span class="n">maximum</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@property</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">__value</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@value.setter</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">value</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">__value</span> <span class="o">!=</span> <span class="n">value</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">__value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">observers_notify</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HistoryView</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">data</span> <span class="o">=</span> <span class="p">[]</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">data</span><span class="o">.</span><span class="n">append</span><span class="p">((</span><span class="n">model</span><span class="o">.</span><span class="n">value</span><span class="p">,</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()))</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">LiveView</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">length</span><span class="o">=</span><span class="mi">40</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">length</span> <span class="o">=</span> <span class="n">length</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">update</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">model</span><span class="p">):</span>
</span><span class='line'>        <span class="n">tippingPoint</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">value</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">length</span> <span class="o">/</span> <span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">maximum</span> <span class="o">-</span> <span class="n">model</span><span class="o">.</span><span class="n">minimum</span><span class="p">))</span>
</span><span class='line'>        <span class="n">td</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="n">html</span> <span class="o">=</span> <span class="s">&quot;&quot;</span>
</span><span class='line'>        <span class="n">html</span><span class="o">.</span><span class="n">extend</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;&quot;</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="n">html</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">historyView</span> <span class="o">=</span> <span class="n">HistoryView</span><span class="p">()</span>
</span><span class='line'>    <span class="n">liveView</span> <span class="o">=</span> <span class="n">LiveView</span><span class="p">()</span>
</span><span class='line'>    <span class="n">model</span> <span class="o">=</span> <span class="n">SliderModel</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">40</span><span class="p">)</span>
</span><span class='line'>    <span class="n">model</span><span class="o">.</span><span class="n">observers_add</span><span class="p">(</span><span class="n">historyView</span><span class="p">,</span> <span class="n">liveView</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">value</span> <span class="ow">in</span> <span class="p">(</span><span class="mi">7</span><span class="p">,</span> <span class="mi">23</span><span class="p">,</span> <span class="mi">37</span><span class="p">):</span>
</span><span class='line'>        <span class="n">model</span><span class="o">.</span><span class="n">value</span> <span class="o">=</span> <span class="n">value</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">value</span><span class="p">,</span> <span class="n">timestamp</span> <span class="ow">in</span> <span class="n">historyView</span><span class="o">.</span><span class="n">data</span><span class="p">:</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="s">&quot;{:3} {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="n">datetime</span><span class="o">.</span><span class="n">datetime</span><span class="o">.</span><span class="n">fromtimestamp</span><span class="p">(</span><span class="n">timestamp</span><span class="p">)),</span> <span class="nb">file</span><span class="o">=</span><span class="n">sys</span><span class="o">.</span><span class="n">stderr</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.8. State</h3>

<p>The state pattern is intended to provide objects whose behavior changes when their state
changes; that is, objects that have modes.</p>

<figure class='code'><figcaption><span>State</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Counter</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">names</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__call__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Event</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">count</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Multiplexer</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">ACTIVE</span><span class="p">,</span> <span class="n">DORMANT</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;ACTIVE&quot;</span><span class="p">,</span> <span class="s">&quot;DORMANT&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">connect</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">eventName</span><span class="p">,</span> <span class="n">callback</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">disconnect</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">eventName</span><span class="p">,</span> <span class="n">callback</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">send</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">event</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="c"># @property</span>
</span><span class='line'>    <span class="c"># def state(self):</span>
</span><span class='line'>    <span class="c">#     pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@state.setter</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">state</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">state</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__active_connect</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">eventName</span><span class="p">,</span> <span class="n">callback</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">totalCounter</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">()</span>
</span><span class='line'>    <span class="n">carCounter</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="s">&quot;cars&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">commercialCounter</span> <span class="o">=</span> <span class="n">Counter</span><span class="p">(</span><span class="s">&quot;vans&quot;</span><span class="p">,</span> <span class="s">&quot;trucks&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">multiiplexer</span> <span class="o">=</span> <span class="n">Multiplexer</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">eventName</span><span class="p">,</span> <span class="n">callback</span> <span class="ow">in</span> <span class="p">((</span><span class="s">&quot;cars&quot;</span><span class="p">,</span> <span class="n">carCounter</span><span class="p">),</span>
</span><span class='line'>                                <span class="p">(</span><span class="s">&quot;vans&quot;</span><span class="p">,</span> <span class="n">commercialCounter</span><span class="p">),</span>
</span><span class='line'>                                <span class="p">(</span><span class="s">&quot;trucks&quot;</span><span class="p">,</span> <span class="n">commercialCounter</span><span class="p">)):</span>
</span><span class='line'>        <span class="n">multiplexer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">eventName</span><span class="p">,</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'>        <span class="n">multiplexer</span><span class="o">.</span><span class="n">connect</span><span class="p">(</span><span class="n">eventName</span><span class="p">,</span> <span class="n">totalCounter</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.9. Strategy</h3>

<p>The strategy pattern provides a means of encapsulating a set of algorithms that
can be used interchangeably, depending on the user&rsquo;s needs.</p>

<figure class='code'><figcaption><span>Strategy</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">WINNERS</span> <span class="o">=</span> <span class="p">(</span><span class="s">&quot;Niko&quot;</span><span class="p">,</span> <span class="s">&quot;Mat&quot;</span><span class="p">,</span> <span class="s">&quot;Birgit&quot;</span><span class="p">,</span> <span class="s">&quot;Sawao&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Layout</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tabulator</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">tabulator</span> <span class="o">=</span> <span class="n">tabulator</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">tabulate</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">rows</span><span class="p">,</span> <span class="n">items</span><span class="p">):</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">tabulator</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">items</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Layout</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tabulator</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">tabulate</span> <span class="o">=</span> <span class="n">tabulator</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">html_tabulator</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">items</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">&#39;__main__&#39;</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">htmlLayout</span> <span class="o">=</span> <span class="n">Layout</span><span class="p">(</span><span class="n">html_tabulator</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">rows</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">htmlLayout</span><span class="o">.</span><span class="n">tabulate</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">WINNERS</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">textLayout</span> <span class="o">=</span> <span class="n">Layout</span><span class="p">(</span><span class="n">text_tabulator</span><span class="p">)</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">rows</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">6</span><span class="p">):</span>
</span><span class='line'>        <span class="k">print</span><span class="p">(</span><span class="n">textLayout</span><span class="o">.</span><span class="n">tabulate</span><span class="p">(</span><span class="n">rows</span><span class="p">,</span> <span class="n">WINNERS</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.10. Template method</h3>

<p>The template method pattern allows us to define the steps of an algorithm but defer the
execution of some of those steps to subclasses.</p>

<figure class='code'><figcaption><span>TemplateMethod</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">def</span> <span class="nf">count_words</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AbstractWordCounter</span><span class="p">:</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@staticmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">can_count</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@staticmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="k">raise</span> <span class="ne">NotImplementedError</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">AbstractWordCounter</span><span class="p">(</span><span class="n">metaclass</span><span class="o">=</span><span class="n">abc</span><span class="o">.</span><span class="n">ABCMeta</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@staticmethod</span>
</span><span class='line'>    <span class="nd">@abc.abcstractmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">can_count</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@staticmethod</span>
</span><span class='line'>    <span class="nd">@abc.abcstractmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">PlainTextWordCounter</span><span class="p">(</span><span class="n">AbstractWordCounter</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@staticmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">can_count</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@staticmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">HtmlWordCounter</span><span class="p">(</span><span class="n">AbstactWordCounter</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@staticmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">can_count</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="nd">@staticmethod</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">count</span><span class="p">(</span><span class="n">filename</span><span class="p">):</span>
</span><span class='line'>        <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">class</span> <span class="nc">__HtmlParser</span><span class="p">(</span><span class="n">html</span><span class="o">.</span><span class="n">parser</span><span class="o">.</span><span class="n">HTMLParser</span><span class="p">):</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>            <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">handle_starttag</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tag</span><span class="p">,</span> <span class="n">attrs</span><span class="p">):</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">handle_endtag</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">tag</span><span class="p">):</span>
</span><span class='line'>            <span class="k">pass</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">handle_data</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">text</span><span class="p">):</span>
</span><span class='line'>            <span class="k">pass</span>
</span></code></pre></td></tr></table></div></figure>


<h3>3.11. Visitor</h3>

<p>The visitor pattern is used to apply a function to every item in a collection or
aggregate object.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Spring MVC]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/02/14/getting-started-with-spring-mvc/"/>
    <updated>2016-02-14T18:04:37+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/02/14/getting-started-with-spring-mvc</id>
    <content type="html"><![CDATA[<p>Steps</p>

<ul>
<li>Installations</li>
<li>Project creation</li>
</ul>


<h2>Installations</h2>

<ul>
<li>Java 8</li>
<li>Maven 3: a build tool</li>
<li>Tomcat 8: a web server</li>
<li>Eclipse: IDE</li>
</ul>


<h3>Java</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo add-apt-repository -y ppa:webupd8team/java
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install -y oracle-java8-installer
</span><span class='line'><span class="nv">$ </span>java -version
</span></code></pre></td></tr></table></div></figure>


<h3>Maven</h3>

<p><a href="http://maven.apache.org/download.cgi">maven</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget http://apache.mirror.anlx.net/maven/maven-3/3.3.9/binaries/apache-maven-3.3.9-bin.zip
</span><span class='line'><span class="nv">$ </span>sudo unzip apache-maven-3.3.9-bin.zip
</span><span class='line'><span class="nv">$ </span>sudo mv apache-maven-3.3.9/ /usr/local/maven/
</span><span class='line'><span class="nv">$ </span>vim ~/.bashrc
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.bashrc
</span><span class='line'><span class="nv">$ </span>mvn -v
</span></code></pre></td></tr></table></div></figure>


<p><code>~/.bashrc</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># maven</span>
</span><span class='line'><span class="nb">export </span><span class="nv">MAVEN_HOME</span><span class="o">=</span>/usr/local/maven
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$MAVEN_HOME</span>/bin
</span></code></pre></td></tr></table></div></figure>


<h3>Tomcat</h3>

<p><a href="http://tomcat.apache.org/download-80.cgi">Tomcat</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget http://www.mirrorservice.org/sites/ftp.apache.org/tomcat/tomcat-8/v8.0.32/bin/apache-tomcat-8.0.32.zip
</span><span class='line'><span class="nv">$ </span>sudo unzip apache-tomcat-8.0.32.zip
</span><span class='line'><span class="nv">$ </span>sudo mv apache-tomcat-8.0.32/ /usr/local/tomcat/
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /usr/local/tomcat/
</span><span class='line'><span class="nv">$ </span>sudo chmod +x bin/*.sh
</span><span class='line'><span class="nv">$ </span>sudo bin/catalina.sh run
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /tmp
</span><span class='line'><span class="nv">$ </span>curl http://localhost:8080
</span></code></pre></td></tr></table></div></figure>


<h3>Eclipse</h3>

<p><a href="http://www.eclipse.org/downloads/">Eclipse IDE for Java EE Developers</a></p>

<h2>Project Creation</h2>

<ul>
<li>creating a maven project</li>
</ul>


<h3>Maven Project</h3>

<p><a href="https://maven.apache.org/guides/getting-started/">Maven Getting Started</a></p>

<h4>mvn</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mvn -B archetype:generate <span class="se">\</span>
</span><span class='line'>      -DarchetypeGroupId<span class="o">=</span>org.apache.maven.archetypes <span class="se">\</span>
</span><span class='line'>      -DgroupId<span class="o">=</span>com.mycompany.app <span class="se">\</span>
</span><span class='line'>      -DartifactId<span class="o">=</span>my-app <span class="se">\</span>
</span><span class='line'>      -DarchetypeArtifactId<span class="o">=</span>maven-archetype-quickstart <span class="se">\</span>
</span><span class='line'>      -DinteractiveMode<span class="o">=</span><span class="nb">false</span> <span class="se">\</span>
</span><span class='line'>      -Dpackaging<span class="o">=</span>war
</span></code></pre></td></tr></table></div></figure>


<p>folder</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>my-app
</span><span class='line'><span class="p">|</span>-- pom.xml
</span><span class='line'><span class="sb">`</span>-- src
</span><span class='line'>    <span class="p">|</span>-- main
</span><span class='line'>    <span class="p">|</span>   <span class="sb">`</span>-- java
</span><span class='line'>    <span class="p">|</span>       <span class="sb">`</span>-- com
</span><span class='line'>    <span class="p">|</span>           <span class="sb">`</span>-- mycompany
</span><span class='line'>    <span class="p">|</span>               <span class="sb">`</span>-- app
</span><span class='line'>    <span class="p">|</span>                   <span class="sb">`</span>-- App.java
</span><span class='line'>    <span class="sb">`</span>-- <span class="nb">test</span>
</span><span class='line'>        <span class="sb">`</span>-- java
</span><span class='line'>            <span class="sb">`</span>-- com
</span><span class='line'>                <span class="sb">`</span>-- mycompany
</span><span class='line'>                    <span class="sb">`</span>-- app
</span><span class='line'>                        <span class="sb">`</span>-- AppTest.java
</span></code></pre></td></tr></table></div></figure>


<h4>pom.xml</h4>

<p>Dependencies:</p>

<ul>
<li>Servlet</li>
<li>Spring</li>
</ul>


<p>edit pom.xml</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;properties&gt;</span>
</span><span class='line'>  <span class="nt">&lt;java.version&gt;</span>1.8<span class="nt">&lt;/java.version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;spring.version&gt;</span>4.1.6.RELEASE<span class="nt">&lt;/spring.version&gt;</span>
</span><span class='line'><span class="nt">&lt;/properties&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Servlet API --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>javax.servlet<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>javax.servlet-api<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>3.1.0<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>      <span class="nt">&lt;scope&gt;</span>provided<span class="nt">&lt;/scope&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Spring Core --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c">&lt;!-- Spring MVC --&gt;</span>
</span><span class='line'>  <span class="nt">&lt;dependency&gt;</span>
</span><span class='line'>      <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;artifactId&gt;</span>spring-webmvc<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>      <span class="nt">&lt;version&gt;</span>${spring.version}<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/dependency&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;/dependencies&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- boilerplate code allowing Maven to generate a .war archive without requiring a web.xml file --&gt;</span>
</span><span class='line'><span class="nt">&lt;build&gt;</span>
</span><span class='line'>  <span class="nt">&lt;finalName&gt;</span>springwebapp<span class="nt">&lt;/finalName&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;plugins&gt;</span>
</span><span class='line'>      <span class="nt">&lt;plugin&gt;</span>
</span><span class='line'>          <span class="nt">&lt;groupId&gt;</span>org.apache.maven.plugins<span class="nt">&lt;/groupId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;artifactId&gt;</span>maven-war-plugin<span class="nt">&lt;/artifactId&gt;</span>
</span><span class='line'>          <span class="nt">&lt;version&gt;</span>2.6<span class="nt">&lt;/version&gt;</span>
</span><span class='line'>          <span class="nt">&lt;configuration&gt;</span>
</span><span class='line'>              <span class="nt">&lt;failOnMissingWebXml&gt;</span>false<span class="nt">&lt;/failOnMissingWebXml&gt;</span>
</span><span class='line'>          <span class="nt">&lt;/configuration&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/plugin&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/plugins&gt;</span>
</span><span class='line'><span class="nt">&lt;/build&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Spring MVC</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>src/main/java/com/&lt;groupId&gt;/
</span><span class='line'><span class="nv">$ </span>mkdir config
</span><span class='line'><span class="nv">$ </span>mkdir controller
</span></code></pre></td></tr></table></div></figure>


<h4>Config</h4>

<figure class='code'><figcaption><span>AppConfig.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">todo</span><span class="o">.</span><span class="na">config</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.ComponentScan</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.servlet.config.annotation.EnableWebMvc</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Configuration</span>
</span><span class='line'><span class="nd">@EnableWebMvc</span>
</span><span class='line'><span class="nd">@ComponentScan</span><span class="o">(</span><span class="n">basePackages</span> <span class="o">=</span> <span class="o">{</span><span class="s">&quot;com.todo.controller&quot;</span><span class="o">})</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span><span class="o">{</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>ServletInitializer.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">todo</span><span class="o">.</span><span class="na">config</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.servlet.support.AbstractAnnotationConfigDispatcherServletInitializer</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">ServletInitializer</span> <span class="kd">extends</span> <span class="n">AbstractAnnotationConfigDispatcherServletInitializer</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getRootConfigClasses</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Class</span><span class="o">&lt;?&gt;[</span><span class="mi">0</span><span class="o">];</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">getServletConfigClasses</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">Class</span><span class="o">&lt;?&gt;[]{</span><span class="n">AppConfig</span><span class="o">.</span><span class="na">class</span><span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nd">@Override</span>
</span><span class='line'>  <span class="kd">protected</span> <span class="n">String</span><span class="o">[]</span> <span class="nf">getServletMappings</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="n">String</span><span class="o">[]{</span><span class="s">&quot;/&quot;</span><span class="o">};</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Controller</h4>

<figure class='code'><figcaption><span>HelloController.java</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">package</span> <span class="n">com</span><span class="o">.</span><span class="na">todo</span><span class="o">.</span><span class="na">controller</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.stereotype.Controller</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.RequestMapping</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.ResponseBody</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="nd">@Controller</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>
</span><span class='line'>  <span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&quot;hi&quot;</span><span class="o">)</span>
</span><span class='line'>  <span class="nd">@ResponseBody</span>
</span><span class='line'>  <span class="kd">public</span> <span class="n">String</span> <span class="nf">hi</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s">&quot;Hello world.&quot;</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Run</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mvn clean install
</span><span class='line'><span class="nv">$ </span>sudo cp target/springwebapp.war /usr/local/tomcat/webapps/
</span><span class='line'><span class="nv">$ </span>curl http://localhost:8080/springwebapp/hi
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spring]]></title>
    <link href="http://k.arttechresearch.com/art/2016/02/10/spring/"/>
    <updated>2016-02-10T16:44:59+08:00</updated>
    <id>http://k.arttechresearch.com/art/2016/02/10/spring</id>
    <content type="html"><![CDATA[<p><img src="https://s-media-cache-ak0.pinimg.com/originals/8f/32/99/8f32995d22fc9a69b81147db7046484f.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Caffe on Ubuntu 14.04]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/02/03/installing-caffe-on-ubuntu-14-dot-04/"/>
    <updated>2016-02-03T05:07:12+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/02/03/installing-caffe-on-ubuntu-14-dot-04</id>
    <content type="html"><![CDATA[<h2>Prequisitions</h2>

<ul>
<li>Vagrant/VirtualBox</li>
<li>Ubuntu 14.04</li>
<li>VM Memory: 4096 MB</li>
</ul>


<h2>Caffe Installation</h2>

<p>Requirements</p>

<ul>
<li>CUDA</li>
<li>BLAS</li>
<li>OpenCV</li>
<li>Anaconda</li>
<li>Boost</li>
<li>Caffe dependencies</li>
<li>Protobuf</li>
<li>Caffe</li>
</ul>


<h3>CUDA</h3>

<p>If installed in the VirtualBox, <code>VBoxGuestAddition</code> should be installed first.
Otherwise, it could be booted.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># reference: https://gist.github.com/titipata/f0ef48ad2f0ebc07bcb9</span>
</span><span class='line'><span class="c"># check version</span>
</span><span class='line'><span class="nv">$ </span>lspci <span class="p">|</span> grep -i nvidia
</span><span class='line'><span class="nv">$ </span>uname -m <span class="o">&amp;&amp;</span> cat /etc/*release
</span><span class='line'><span class="nv">$ </span>gcc --version
</span><span class='line'>
</span><span class='line'><span class="c"># CUDA</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /tmp
</span><span class='line'><span class="nv">$ </span>wget http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_6.5-14_amd64.deb
</span><span class='line'><span class="nv">$ </span>sudo dpkg -i cuda-repo-ubuntu1404_6.5-14_amd64.deb
</span><span class='line'><span class="nv">$ </span>sudo apt-get update
</span><span class='line'><span class="nv">$ </span>sudo apt-get install cuda
</span><span class='line'><span class="nv">$ </span>sudo reboot
</span></code></pre></td></tr></table></div></figure>


<h3>BLAS</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install libopenblas-dev
</span></code></pre></td></tr></table></div></figure>


<h3>OpenCV</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install git unzip
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /tmp
</span><span class='line'><span class="nv">$ </span>wget https://raw.githubusercontent.com/jayrambhia/Install-OpenCV/master/Ubuntu/2.4/opencv2_4_9.sh
</span><span class='line'><span class="nv">$ </span>sudo chmod +x opencv2_4_9.sh
</span><span class='line'><span class="nv">$ </span>./opencv2_4_9.sh
</span></code></pre></td></tr></table></div></figure>


<h3>Anaconda</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /tmp
</span><span class='line'><span class="nv">$ </span>wget http://09c8d0b2229f813c1b93-c95ac804525aac4b6dba79b00b39d1d3.r79.cf1.rackcdn.com/Anaconda-2.1.0-Linux-x86_64.sh
</span><span class='line'><span class="nv">$ </span>sudo bash Anaconda-2.1.0-Linux-x86.sh
</span><span class='line'><span class="c"># path: /usr/local/anaconda</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Boost</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install libboost-all-dev
</span></code></pre></td></tr></table></div></figure>


<h3>Caffe dependencies</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># reference: http://caffe.berkeleyvision.org/install_apt.html</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libboost-all-devlibhdf5-serial-dev
</span><span class='line'><span class="nv">$ </span>sudo apt-get install libgflags-dev libgoogle-glog-dev liblmdb-dev protobuf-compiler
</span></code></pre></td></tr></table></div></figure>


<h3>Protobuf</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo apt-get install python-pip
</span><span class='line'><span class="nv">$ </span>sudo pip install protobuf
</span></code></pre></td></tr></table></div></figure>


<h3>Caffe</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /usr/local
</span><span class='line'><span class="nv">$ </span>sudo git clone https://github.com/BVLC/caffe
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>caffe/
</span><span class='line'><span class="nv">$ </span>sudo cp Makefile.config.example Makefile.config
</span><span class='line'><span class="c"># modify Makefile.config if needed</span>
</span><span class='line'><span class="c">###################################################</span>
</span><span class='line'><span class="c"># CPU-only switch (uncomment to build without GPU support).</span>
</span><span class='line'>CPU_ONLY :<span class="o">=</span> 1
</span><span class='line'><span class="c">###################################################</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo make all
</span><span class='line'><span class="nv">$ </span>sudo make <span class="nb">test</span>
</span><span class='line'><span class="nv">$ </span>sudo vim ~/.bashrc              <span class="c"># update paths</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">source</span> ~/.bashrc
</span><span class='line'><span class="nv">$ </span>make runtest
</span><span class='line'>...
</span><span class='line'><span class="o">[</span>----------<span class="o">]</span> Global <span class="nb">test </span>environment tear-down
</span><span class='line'><span class="o">[==========]</span> <span class="m">1019</span> tests from <span class="m">144</span> <span class="nb">test </span>cases ran. <span class="o">(</span><span class="m">34669</span> ms total<span class="o">)</span>
</span><span class='line'><span class="o">[</span>  PASSED  <span class="o">]</span> <span class="m">1019</span> tests.
</span></code></pre></td></tr></table></div></figure>


<p><code>~/.bashrc</code> config:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># CUDA</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/usr/local/cuda-7.5/bin:<span class="nv">$PATH</span>
</span><span class='line'><span class="nb">export </span><span class="nv">LD_LIBRARY_PATH</span><span class="o">=</span>/usr/local/cuda-7.5/lib64:<span class="nv">$LD_LIBRARY_PATH</span>
</span><span class='line'><span class="nb">export </span>PATH
</span><span class='line'><span class="c"># Anaconda</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span>/usr/local/anaconda/bin:<span class="nv">$PATH</span>
</span><span class='line'><span class="c"># Caffe Root</span>
</span><span class='line'><span class="nb">export </span><span class="nv">CAFFE_ROOT</span><span class="o">=</span>/usr/local/caffe
</span></code></pre></td></tr></table></div></figure>


<p>config python library</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo make pycaffe
</span><span class='line'><span class="nv">$ </span>sudo make distribute
</span><span class='line'><span class="c"># make dir for custom python modules, install caffe</span>
</span><span class='line'><span class="nv">$ </span>mkdir ~/pycaffe
</span><span class='line'><span class="nv">$ </span>mv distribute/python/caffe ~/pycaffe
</span><span class='line'><span class="c">#################################################################</span>
</span><span class='line'><span class="c"># set PYTHONPATH (this should go in your .bashrc or whatever</span>
</span><span class='line'><span class="c"># export PYTHONPATH=${HOME}/pycaffe:$PYTHONPATH</span>
</span><span class='line'><span class="nb">export </span><span class="nv">PYTHONPATH</span><span class="o">=</span>/usr/local/caffe/python:<span class="nv">$PYTHONPATH</span>
</span><span class='line'><span class="c">#################################################################</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install the python dependencies</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /usr/local/cafffe/python
</span><span class='line'><span class="nv">$ </span>sudo pip install -r requirements.txt
</span></code></pre></td></tr></table></div></figure>


<p>import caffe on IPython</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># fixed Anaconda issue</span>
</span><span class='line'><span class="nv">$ </span>sudo rm /usr/local/anaconda/lib/libm.*
</span><span class='line'><span class="nv">$ </span>ipython
</span><span class='line'><span class="nv">$ </span>conda install protobuf
</span><span class='line'><span class="c"># import caffe</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /usr/local/caffe/python
</span><span class='line'><span class="nv">$ </span>import caffe
</span></code></pre></td></tr></table></div></figure>


<p>import caffe on python script</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># import matplotlib for fixing the issue when importing caffe</span>
</span><span class='line'><span class="c"># so, matplotlib is a must</span>
</span><span class='line'>import matplotlib
</span><span class='line'>matplotlib.use<span class="o">(</span><span class="s1">&#39;Agg&#39;</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>import sys
</span><span class='line'>sys.path.insert<span class="o">(</span>0, <span class="s1">&#39;/usr/local/caffe/python/&#39;</span><span class="o">)</span>
</span><span class='line'>import caffe
</span></code></pre></td></tr></table></div></figure>


<h2>DeepDream</h2>

<h3>IPython Notebook (Optional)</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo pip install ipython
</span><span class='line'><span class="nv">$ </span>sudo pip install jupyter
</span><span class='line'><span class="nv">$ </span>ipython notebook --ip 0.0.0.0
</span></code></pre></td></tr></table></div></figure>


<p>ipython notebook url: <a href="http://localhost:8888">http://localhost:8888</a></p>

<h3>Dependencies</h3>

<ul>
<li>Python: scipy, numpy, pillow</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># python</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install python-dev python-virtualenv
</span><span class='line'><span class="c"># pillow</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install libtiff5-dev libjpeg8-dev zlib1g-dev <span class="se">\</span>
</span><span class='line'>libfreetype6-dev liblcms2-dev libwebp-dev tcl8.6-dev tk8.6-dev python-tk
</span><span class='line'><span class="c"># scipy</span>
</span><span class='line'><span class="nv">$ </span>sudo apt-get install libblas-dev liblapack-dev libatlas-base-dev gfortran
</span></code></pre></td></tr></table></div></figure>


<p><code>base.txt</code>: python requirements</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># NOTE: if it doesn&#39;t run on anaconda, `scikit-image` and `cython` </span>
</span><span class='line'><span class="c"># must be installed on PYTHONPATH. Otherwise, it will show some </span>
</span><span class='line'><span class="c"># errors when `import caffe`.</span>
</span><span class='line'><span class="nv">numpy</span><span class="o">==</span>1.10.4
</span><span class='line'><span class="nv">Pillow</span><span class="o">==</span>3.1.0
</span><span class='line'><span class="nv">scipy</span><span class="o">==</span>0.17.0
</span><span class='line'><span class="nv">protobuf</span><span class="o">==</span>2.6.1
</span><span class='line'>scikit-image<span class="o">==</span>0.11.3
</span><span class='line'><span class="nv">cython</span><span class="o">==</span>0.23.4
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo pip install -r base.txt
</span></code></pre></td></tr></table></div></figure>


<h3>Repo</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git clone https://github.com/google/deepdream.git
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>deepdream
</span></code></pre></td></tr></table></div></figure>


<h3>Models</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>wget wget -P /usr/local/caffe/models/bvlc_googlenet http://dl.caffe.berkeleyvision.org/bvlc_googlenet.caffemodel
</span></code></pre></td></tr></table></div></figure>


<h3>Run</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>ipython notebook ./dream.ipynb
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Solving a Technical Question]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/01/14/solving-a-technical-question/"/>
    <updated>2016-01-14T15:24:40+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/01/14/solving-a-technical-question</id>
    <content type="html"><![CDATA[<p>Source: Cracking the Coding Interview</p>

<p>5 Steps</p>

<ol>
<li>Ask questions.</li>
<li>Design a algorithm.</li>
<li>Pseudocode</li>
<li>Code</li>
<li>Test</li>
</ol>


<h2>1. Ask Questions</h2>

<ul>
<li>What are the data types?</li>
<li>How much data is there?</li>
<li>What assuptions do you need to solve the problem?</li>
<li>WHo is the user?</li>
</ul>


<h2>2. Design a algorithm</h2>

<ul>
<li>What are its space and time complexity?</li>
<li>What happens if there is a lot of data?</li>
<li>Does your design cause other issues? For example, if you&rsquo;re creating a modified version of a binary search tree, did your design impact the time for insert, find, or delete?</li>
<li>If there are other issues or limitations, did you make the right trade-offs? For which scenarios might the trade-off be less optimal?</li>
<li>If they gave you specific data (e.g., mentioned that the data is ages, or in sorted order), have you leveraged that information? Usually there&rsquo;s a reason that an inter- viewer gave you specific information.</li>
</ul>


<p>approaches</p>

<ul>
<li>examplify</li>
<li>pattern matching</li>
<li>simplify and generalize</li>
<li>base case and build</li>
<li>data structure brainstorm</li>
</ul>


<h2>3. Pseudocode</h2>

<h2>4. Code</h2>

<ul>
<li>correct: expected and unexpected inputs</li>
<li>efficient: time and space</li>
<li>simple</li>
<li>readable</li>
<li>maintainable</li>
</ul>


<h2>5. Test</h2>

<ul>
<li>Extremecases: 0, negative, null, maximums, minimums.</li>
<li>User error:What happens if the user passes in null or a negative value?</li>
<li>General cases: Test the normal case.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Power Table]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/01/14/power-table/"/>
    <updated>2016-01-14T15:08:07+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/01/14/power-table</id>
    <content type="html"><![CDATA[<table>
<thead>
<tr>
<th style="text-align:left;"> Power of 2 </th>
<th style="text-align:left;"> Exact Value (X)   </th>
<th style="text-align:left;"> Approx. Value </th>
<th style="text-align:left;"> X Bytes into MB, GB, etc </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> 7          </td>
<td style="text-align:left;"> 128               </td>
<td style="text-align:left;">               </td>
<td style="text-align:left;">                          </td>
</tr>
<tr>
<td style="text-align:left;"> 8          </td>
<td style="text-align:left;"> 256               </td>
<td style="text-align:left;">               </td>
<td style="text-align:left;">                          </td>
</tr>
<tr>
<td style="text-align:left;"> 10         </td>
<td style="text-align:left;"> 1024              </td>
<td style="text-align:left;"> 1 thousand    </td>
<td style="text-align:left;"> 1 K                      </td>
</tr>
<tr>
<td style="text-align:left;"> 16         </td>
<td style="text-align:left;"> 65,536            </td>
<td style="text-align:left;">               </td>
<td style="text-align:left;"> 64 K                     </td>
</tr>
<tr>
<td style="text-align:left;"> 20         </td>
<td style="text-align:left;"> 1,048,576         </td>
<td style="text-align:left;"> 1 million     </td>
<td style="text-align:left;"> 1 MB                     </td>
</tr>
<tr>
<td style="text-align:left;"> 30         </td>
<td style="text-align:left;"> 1,073,741,824     </td>
<td style="text-align:left;"> 1 billion     </td>
<td style="text-align:left;"> 1 GB                     </td>
</tr>
<tr>
<td style="text-align:left;"> 32         </td>
<td style="text-align:left;"> 4,294,967,296     </td>
<td style="text-align:left;">               </td>
<td style="text-align:left;"> 4 GB                     </td>
</tr>
<tr>
<td style="text-align:left;"> 40         </td>
<td style="text-align:left;"> 1,099,511,627,776 </td>
<td style="text-align:left;"> 1 trillion    </td>
<td style="text-align:left;"> 1 TB                     </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Visualization With D3]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/01/14/data-visualization-with-d3/"/>
    <updated>2016-01-14T13:06:49+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/01/14/data-visualization-with-d3</id>
    <content type="html"><![CDATA[<ul>
<li>Data Visualization</li>
<li>Charting</li>
<li>D3</li>
</ul>


<h2>Data Visualization</h2>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/19/7b/75/197b75f0249050370e5b248e6e854be2.jpg" /></p>

<h2>Charting</h2>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/ba/b3/69/bab36904d402394edb45d3cb15756fdf.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/94/6b/25/946b252a45ff38bbadfed39bf12b6acc.jpg" /></p>

<h2>D3</h2>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/d3/2e/19/d32e192b8b34ca65d646f774ae67ce91.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/c1/09/e7/c109e7bd15ea7b7a53ff1cdea2563d24.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/b6/38/72/b638722c1fd3b4ae0a612f9d0fca208b.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/87/75/ac/8775ac7f7c6313e014445fcf979b88c2.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/91/3a/d1/913ad1590890d42d7a351b51806c5d68.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Model Building and Validation]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/01/14/model-building-and-validation/"/>
    <updated>2016-01-14T12:43:15+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/01/14/model-building-and-validation</id>
    <content type="html"><![CDATA[<p>QMV Process</p>

<ul>
<li>Q: Questioning</li>
<li>M: Modelling</li>
<li>V: Validation</li>
</ul>


<h2>QMV Process</h2>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/6a/1f/04/6a1f048309142c91cd22ea6c2cc4058a.jpg" /></p>

<h2>Questioning</h2>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/cf/90/db/cf90dbb0d7938dc756a50ca5626def63.jpg" /></p>

<h2>Modelling</h2>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/43/ac/78/43ac78c79a3c72b654a6aa29b2ae1543.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/d3/5c/92/d35c92eeb5d2abcb049b2cc163214f42.jpg" /></p>

<h2>Validation</h2>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/62/fe/6e/62fe6ecdddbde137e5e52204ca522947.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/da/f6/be/daf6be7b4e7a69ce774b04f7e8a08738.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/6c/c0/86/6cc0860c7a360a43e32edea481c7ac80.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Commands]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/01/08/git-commands/"/>
    <updated>2016-01-08T18:06:55+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/01/08/git-commands</id>
    <content type="html"><![CDATA[<ul>
<li>config</li>
<li>remote</li>
<li>pull/commit</li>
<li>log</li>
</ul>


<h2>Config</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git config --global user.name <span class="s1">&#39;xxx&#39;</span>
</span><span class='line'><span class="nv">$ </span>git config --global user.email <span class="s1">&#39;xxx&#39;</span>
</span><span class='line'><span class="nv">$ </span>git config --local user.name <span class="s1">&#39;xxx&#39;</span>
</span><span class='line'><span class="nv">$ </span>git config --local user.email <span class="s1">&#39;xxx&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>git config --global alias.logtree <span class="s2">&quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Remote</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git remote add origin https://xxxx                    <span class="c"># set remote url</span>
</span><span class='line'><span class="nv">$ </span>git remote <span class="nb">set</span>-url origin https://xxxx                <span class="c"># update remote url</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Pull</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git pull --rebase origin branch_name
</span><span class='line'><span class="nv">$ </span>git fetch origin
</span><span class='line'><span class="nv">$ </span>git rebase origin
</span></code></pre></td></tr></table></div></figure>


<h2>Commit</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git diff &lt;file&gt;
</span><span class='line'><span class="nv">$ </span>git add &lt;file<span class="o">(</span>s<span class="o">)</span>&gt;
</span><span class='line'><span class="nv">$ </span>git status
</span><span class='line'><span class="nv">$ </span>git reset HEAD &lt;file&gt;
</span><span class='line'><span class="nv">$ </span>git commit -m <span class="s2">&quot;xxx&quot;</span>
</span><span class='line'><span class="nv">$ </span>git push origin &lt;branch_name&gt;
</span></code></pre></td></tr></table></div></figure>


<h2>Log</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>git log
</span><span class='line'><span class="nv">$ </span>git show &lt;id&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SNS]]></title>
    <link href="http://k.arttechresearch.com/life/2016/01/08/sns/"/>
    <updated>2016-01-08T17:11:58+08:00</updated>
    <id>http://k.arttechresearch.com/life/2016/01/08/sns</id>
    <content type="html"><![CDATA[<h2>社交网络</h2>

<p>由最初的邮件，到IM如ICQ，QQ等；再到博客，微博和轻博客；再到移动端诸如Instragram，Line，微信，沟通工具的变化，不过是由电脑，再而网络发展，由web1.0到2.0，再到移动端，电子设备和网络技术的更新换代，跟随着软件的相继更新，就像一个系列，一整套设备（软硬件）同时切换，但，人没有变，只不过切换了电子设备和应用软件，人谈论的话题也没有变。</p>

<p>最近越来越多的人进入了微信圈，让我想起了当初QQ的发展，最初只是国内的ICQ，国内有了QQ，逐渐由早期上网的用户，扩大到普罗大众，随着用户群体的扩张，腾讯完成了产品的纵向和横向扩展。而现在通用的微信，腾讯似乎在把QQ的用户群体，逐渐扩展到微信用户，而微信，亦如当年的QQ，一样地盛行起来。于是，由最初微信的小圈子，到现在微信扩展到由同事朋友，再到亲戚同学，无论人在世界何地，曾经的人和环境，因为网络的连接，不再感到距离。看着同学们谈论的话题，跟以前的QQ群并没有什么不同。宏观的定性，总是稳定的，千百年过去了，人性还是那么地亘古不变，经典和大师以及他们的作品，显得更加经典。</p>

<p>看着发展壮大的微信群，看着各个群里谈论的话题，社交网络，说到底，还是人的社会。物以类聚，人以群分，在群里也是相似的。正是因为用户多样化了，用户需求也多样化起来，产品功能也会不断增加或删减。</p>

<p>无论电子设备和应用软件如何更新换代，人的交流，依然是重质不重量。所以，我依然怀念着当年博客里纯粹思想的交流，博客是经过思考的文字，经过深层思考的话，更值得深入探讨。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Real-time Analytics With Apache Storm]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/01/07/real-time-analytics-with-apache-storm/"/>
    <updated>2016-01-07T23:26:08+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/01/07/real-time-analytics-with-apache-storm</id>
    <content type="html"><![CDATA[<h2>Toolkits</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> DevOps        </th>
<th style="text-align:left;">        </th>
<th style="text-align:left;">       </th>
<th style="text-align:left;"> Backend                                </th>
<th style="text-align:left;"> Frontend    </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> Vagrant       </td>
<td style="text-align:left;"> Ubuntu </td>
<td style="text-align:left;"> Storm </td>
<td style="text-align:left;"> Python (BeautifulSoup, Flask, Lettuce) </td>
<td style="text-align:left;"> Javascript  </td>
</tr>
<tr>
<td style="text-align:left;"> Vagrant Cloud </td>
<td style="text-align:left;"> Git    </td>
<td style="text-align:left;">       </td>
<td style="text-align:left;"> Java                                   </td>
<td style="text-align:left;"> D3          </td>
</tr>
<tr>
<td style="text-align:left;"> VirtualBox    </td>
<td style="text-align:left;"> Maven  </td>
<td style="text-align:left;">       </td>
<td style="text-align:left;"> Redis                                  </td>
<td style="text-align:left;">             </td>
</tr>
</tbody>
</table>


<p>Others</p>

<ul>
<li>Clojure</li>
<li>Cluster Administration</li>
<li>Ack</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MOOC]]></title>
    <link href="http://k.arttechresearch.com/life/2016/01/07/mooc/"/>
    <updated>2016-01-07T14:46:32+08:00</updated>
    <id>http://k.arttechresearch.com/life/2016/01/07/mooc</id>
    <content type="html"><![CDATA[<p>在MOOC的三大学习网站里，edX，Coursera，Udacity的定位是不同。</p>

<p>edX，以MIT和Harvard为主，引领着美国其他常春藤学校，精品课程较多，而文科和社科性质的课程，是很好的；而现在引入的工业协会和微软等，也是edX的核心竞争力之一。</p>

<p>Coursera，课程大而全，非常像综合性大学，汇聚了世界各大高校，而各个水平的高校和各个学科的课程，都可以在此找到；斯坦福的课程也主要在此。</p>

<p>Udacity，更像是理工科学校，而又以计算机科学为主，与工业界挂钩，计算机专业的人，可以在这里找到很好的企业培训，这边的课程以实用性为止，如果是计算机课程，我是非常喜欢Udacity的课程的。</p>

<p>但，如果是计算机专业，单是上网课是不足够的，项目，尤其是企业项目，才是进步最快的学习方式。以项目带动学习，在项目中碰到问题，然后再寻找课程学习具体的内容，这样的学习动机，效率是明显的。有意识地建立自己的知识架构，拓展枝叶，这是我的学习方式。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cloudera Hadoop by Example]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/01/06/cloudera-hadoop-by-example/"/>
    <updated>2016-01-06T22:05:08+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/01/06/cloudera-hadoop-by-example</id>
    <content type="html"><![CDATA[<p>Contents</p>

<ul>
<li>analyzing structured data (sqoop, impala)</li>
<li>analyzing unstructured data (beeline, impala)</li>
<li>analyzing data in realtime (spark)</li>
<li>indexing and searching data (solr)</li>
</ul>


<h2>Analyzing Structured Data: MySQL Data</h2>

<p>Tools:</p>

<ul>
<li>sqoop</li>
<li>hive</li>
<li>hdfs</li>
<li>avro</li>
<li>mysql</li>
<li>mapreduce</li>
</ul>


<h3>Loading data by sqoop</h3>

<p>Steps:</p>

<ul>
<li>connecting MySQL database</li>
<li>lauching MapReduce jobs</li>
<li>putting the export files in Avro format in HDFS, and creating the Avro schema</li>
<li>(later) loading Hive tables for use in Impala</li>
</ul>


<figure class='code'><figcaption><span>loading data from local to HDFS by sqoop</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /path/to/project
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sqoop import-all-tables <span class="se">\</span>
</span><span class='line'>-m <span class="m">1</span> <span class="se">\</span>
</span><span class='line'>--connect jdbc:mysql://quickstart:3306/retail_db <span class="se">\</span>
</span><span class='line'>--username<span class="o">=</span>retail_dba <span class="se">\</span>
</span><span class='line'>--password<span class="o">=</span>cloudera <span class="se">\</span>
</span><span class='line'>--compression-codec<span class="o">=</span>snappy <span class="se">\</span>
</span><span class='line'>--as-avrodatafile <span class="se">\</span>
</span><span class='line'>--warehouse-dir<span class="o">=</span>/user/hive/warehouse
</span></code></pre></td></tr></table></div></figure>


<h3>Validation</h3>

<p>NOTE: <code>*.avsc</code> files is located on the local system.</p>

<figure class='code'><figcaption><span>validating data in HDFS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>hadoop fs -ls /user/hive/warehouse                     <span class="c"># HDFS</span>
</span><span class='line'><span class="nv">$ </span>hadoop fs -ls /user/hive/warehouse/categories/         <span class="c"># HDFS</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>ls -l *.avsc                                           <span class="c"># local, schema files</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Copying the schema files (<code>*.avsc</code>) to HDFS</h3>

<figure class='code'><figcaption><span>copying avro schemas to HDFS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo -u hdfs hadoop fs -mkdir /user/examples
</span><span class='line'><span class="nv">$ </span>sudo -u hdfs hadoop fs -chmod +rw /user/examples
</span><span class='line'><span class="nv">$ </span>hadoop fs -copyFromLocal ./*.avsc /user/examples/
</span></code></pre></td></tr></table></div></figure>


<p>NOTES: Hive and Impala</p>

<p>Hive and Impala both read the data from files in HDFS, and they even share metadata about the tables.</p>

<p>Hive - executes queries by compiling them to MapReduce jobs, this means it can be more flexible, but is much slower.</p>

<p>Impala - is an MPP query engine that reads the data directly from the file system itself. This allows it to execute queries fast enough for interactive analysis and exploration.</p>

<h3>Creating tables</h3>

<p>tools:</p>

<ul>
<li>hue</li>
<li>impala</li>
</ul>


<p>Hue -> Impala: creating tables</p>

<figure class='code'><figcaption><span>creating table in Impala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">EXTERNAL</span> <span class="k">TABLE</span> <span class="n">categories</span> <span class="n">STORED</span> <span class="k">AS</span> <span class="n">AVRO</span>
</span><span class='line'><span class="k">LOCATION</span> <span class="s1">&#39;hdfs:///user/hive/warehouse/categories&#39;</span>
</span><span class='line'><span class="n">TBLPROPERTIES</span> <span class="p">(</span><span class="s1">&#39;avro.schema.url&#39;</span><span class="o">=</span><span class="s1">&#39;hdfs://quickstart/user/examples/sqoop_import_categories.avsc&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">EXTERNAL</span> <span class="k">TABLE</span> <span class="n">customers</span> <span class="n">STORED</span> <span class="k">AS</span> <span class="n">AVRO</span>
</span><span class='line'><span class="k">LOCATION</span> <span class="s1">&#39;hdfs:///user/hive/warehouse/customers&#39;</span>
</span><span class='line'><span class="n">TBLPROPERTIES</span> <span class="p">(</span><span class="s1">&#39;avro.schema.url&#39;</span><span class="o">=</span><span class="s1">&#39;hdfs://quickstart/user/examples/sqoop_import_customers.avsc&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">EXTERNAL</span> <span class="k">TABLE</span> <span class="n">departments</span> <span class="n">STORED</span> <span class="k">AS</span> <span class="n">AVRO</span>
</span><span class='line'><span class="k">LOCATION</span> <span class="s1">&#39;hdfs:///user/hive/warehouse/departments&#39;</span>
</span><span class='line'><span class="n">TBLPROPERTIES</span> <span class="p">(</span><span class="s1">&#39;avro.schema.url&#39;</span><span class="o">=</span><span class="s1">&#39;hdfs://quickstart/user/examples/sqoop_import_departments.avsc&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">EXTERNAL</span> <span class="k">TABLE</span> <span class="n">orders</span> <span class="n">STORED</span> <span class="k">AS</span> <span class="n">AVRO</span>
</span><span class='line'><span class="k">LOCATION</span> <span class="s1">&#39;hdfs:///user/hive/warehouse/orders&#39;</span>
</span><span class='line'><span class="n">TBLPROPERTIES</span> <span class="p">(</span><span class="s1">&#39;avro.schema.url&#39;</span><span class="o">=</span><span class="s1">&#39;hdfs://quickstart/user/examples/sqoop_import_orders.avsc&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">EXTERNAL</span> <span class="k">TABLE</span> <span class="n">order_items</span> <span class="n">STORED</span> <span class="k">AS</span> <span class="n">AVRO</span>
</span><span class='line'><span class="k">LOCATION</span> <span class="s1">&#39;hdfs:///user/hive/warehouse/order_items&#39;</span>
</span><span class='line'><span class="n">TBLPROPERTIES</span> <span class="p">(</span><span class="s1">&#39;avro.schema.url&#39;</span><span class="o">=</span><span class="s1">&#39;hdfs://quickstart/user/examples/sqoop_import_order_items.avsc&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">EXTERNAL</span> <span class="k">TABLE</span> <span class="n">products</span> <span class="n">STORED</span> <span class="k">AS</span> <span class="n">AVRO</span>
</span><span class='line'><span class="k">LOCATION</span> <span class="s1">&#39;hdfs:///user/hive/warehouse/products&#39;</span>
</span><span class='line'><span class="n">TBLPROPERTIES</span> <span class="p">(</span><span class="s1">&#39;avro.schema.url&#39;</span><span class="o">=</span><span class="s1">&#39;hdfs://quickstart/user/examples/sqoop_import_products.avsc&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">show</span> <span class="n">tables</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Exploring data</h3>

<p>queries</p>

<figure class='code'><figcaption><span>exploring data in Impala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">-- Most popular product categories</span>
</span><span class='line'><span class="k">select</span> <span class="k">c</span><span class="p">.</span><span class="n">category_name</span><span class="p">,</span> <span class="k">count</span><span class="p">(</span><span class="n">order_item_quantity</span><span class="p">)</span> <span class="k">as</span> <span class="k">count</span>
</span><span class='line'><span class="k">from</span> <span class="n">order_items</span> <span class="n">oi</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span> <span class="n">products</span> <span class="n">p</span> <span class="k">on</span> <span class="n">oi</span><span class="p">.</span><span class="n">order_item_product_id</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">product_id</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span> <span class="n">categories</span> <span class="k">c</span> <span class="k">on</span> <span class="k">c</span><span class="p">.</span><span class="n">category_id</span> <span class="o">=</span> <span class="n">p</span><span class="p">.</span><span class="n">product_category_id</span>
</span><span class='line'><span class="k">group</span> <span class="k">by</span> <span class="k">c</span><span class="p">.</span><span class="n">category_name</span>
</span><span class='line'><span class="k">order</span> <span class="k">by</span> <span class="k">count</span> <span class="k">desc</span>
</span><span class='line'><span class="k">limit</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">-- top 10 revenue generating products</span>
</span><span class='line'><span class="k">select</span> <span class="n">p</span><span class="p">.</span><span class="n">product_id</span><span class="p">,</span> <span class="n">p</span><span class="p">.</span><span class="n">product_name</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">revenue</span>
</span><span class='line'><span class="k">from</span> <span class="n">products</span> <span class="n">p</span>
</span><span class='line'><span class="k">inner</span> <span class="k">join</span> <span class="p">(</span>
</span><span class='line'>    <span class="k">select</span> <span class="n">oi</span><span class="p">.</span><span class="n">order_item_product_id</span><span class="p">,</span> <span class="k">sum</span><span class="p">(</span><span class="k">cast</span><span class="p">(</span><span class="n">oi</span><span class="p">.</span><span class="n">order_item_subtotal</span> <span class="k">as</span> <span class="nb">float</span><span class="p">))</span> <span class="k">as</span> <span class="n">revenue</span>
</span><span class='line'>    <span class="k">from</span> <span class="n">order_items</span> <span class="n">oi</span>
</span><span class='line'>    <span class="k">inner</span> <span class="k">join</span> <span class="n">orders</span> <span class="n">o</span> <span class="k">on</span> <span class="n">oi</span><span class="p">.</span><span class="n">order_item_order_id</span> <span class="o">=</span> <span class="n">o</span><span class="p">.</span><span class="n">order_id</span>
</span><span class='line'>    <span class="k">where</span> <span class="n">o</span><span class="p">.</span><span class="n">order_status</span> <span class="o">&lt;&gt;</span> <span class="err">‘</span><span class="n">CANCELED</span><span class="err">’</span> <span class="k">and</span> <span class="n">o</span><span class="p">.</span><span class="n">order_status</span> <span class="o">&lt;&gt;</span> <span class="err">’</span><span class="n">SUSPECTED_FRAUD</span><span class="err">’</span>
</span><span class='line'>    <span class="k">group</span> <span class="k">by</span> <span class="n">order_item_product_id</span>
</span><span class='line'><span class="p">)</span> <span class="n">r</span> <span class="k">on</span> <span class="n">p</span><span class="p">.</span><span class="n">product_id</span> <span class="o">=</span> <span class="n">r</span><span class="p">.</span><span class="n">order_item_product_id</span>
</span><span class='line'><span class="k">order</span> <span class="k">by</span> <span class="n">r</span><span class="p">.</span><span class="n">revenue</span> <span class="k">desc</span>
</span><span class='line'><span class="k">limit</span> <span class="mi">10</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Analyzing Unstructured data: log files</h2>

<p>tools:</p>

<ul>
<li>flume/beeline</li>
<li>hive</li>
<li>impala</li>
</ul>


<h3>Copying the log files to HDFS</h3>

<figure class='code'><figcaption><span>copy the log files to HDFS</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>sudo -u hdfs hadoop fs -mkdir /user/hive/warehouse/original_access_logs
</span><span class='line'><span class="nv">$ </span>sudo -u hdfs hadoop fs -copyFromLocal /opt/examples/log_files/access.log.2 /user/hive/warehouse/original_access_logs
</span><span class='line'><span class="nv">$ </span>hadoop fs -ls /user/hive/warehouse/original_access_logs
</span></code></pre></td></tr></table></div></figure>


<h3>Creating Intermediate Table</h3>

<p>local logs -> intermediate table -> final table</p>

<figure class='code'><figcaption><span>loading log files to Hive</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>beeline -u adbc:hive2://quickstart:10000/default -n admin -d org.apache.hive.jdbc.HiveDriver
</span><span class='line'>
</span><span class='line'>0: jdbc:hive2://quickstart:10000/default&gt; CREATE EXTERNAL TABLE intermediate_access_logs <span class="o">(</span>
</span><span class='line'>ip STRING,
</span><span class='line'>date STRING,
</span><span class='line'>method STRING,
</span><span class='line'>url STRING,
</span><span class='line'>http_version STRING,
</span><span class='line'>code1 STRING,
</span><span class='line'>code2 STRING,
</span><span class='line'>dash STRING,
</span><span class='line'>user_agent STRING<span class="o">)</span>
</span><span class='line'>ROW FORMAT SERDE ‘org.apache.hadoop.hive.contrib.serde2.RegexSerDe’
</span><span class='line'>WITH SERDEPROPERTIES <span class="o">(</span>
</span><span class='line'>‘input.regex’ <span class="o">=</span> ‘<span class="o">([</span>^ <span class="o">}</span>*<span class="o">)</span> - - <span class="se">\\</span><span class="o">[([</span>^<span class="se">\\</span><span class="o">]]</span>*<span class="o">)</span><span class="se">\\</span><span class="o">]</span> “<span class="o">([</span>^<span class="se">\ </span><span class="o">]</span>*<span class="o">)</span> <span class="o">([</span>^<span class="se">\ </span><span class="o">]</span>*<span class="o">)</span> <span class="o">([</span>^<span class="se">\ </span><span class="o">]</span>*<span class="o">)</span>” <span class="o">(</span><span class="se">\\</span>d*<span class="o">)</span> <span class="o">(</span><span class="se">\\</span>d*<span class="o">)</span> “<span class="o">([</span>^”<span class="o">]</span>*<span class="o">)</span>” “<span class="o">([</span>^”<span class="o">]</span>*”’,
</span><span class='line'>‘output.format.string’ <span class="o">=</span> “%1<span class="nv">$s</span> %2<span class="nv">$s</span> %3<span class="nv">$s</span> %4<span class="nv">$s</span> %5<span class="nv">$s</span> %6<span class="nv">$s</span> %7<span class="nv">$s</span> %8<span class="nv">$s</span> %9<span class="nv">$s</span>”
</span><span class='line'><span class="o">)</span>
</span><span class='line'>LOCATION ‘/user/hive/warehouse/original_access_logs’<span class="p">;</span>
</span><span class='line'>
</span><span class='line'>0: jdbc:hive2://quickstart:10000/default&gt; CREATE EXTERNAL TABLE tokenized_access_log <span class="o">(</span>
</span><span class='line'>ip STRING,
</span><span class='line'>date STRING,
</span><span class='line'>method STRING,
</span><span class='line'>url STRING,
</span><span class='line'>http_version STRING,
</span><span class='line'>code1 STRING,
</span><span class='line'>code2 STRING,
</span><span class='line'>dash STRING,
</span><span class='line'>user_agent STRING<span class="o">)</span>
</span><span class='line'>ROW FORMAT DELIMITED FIELDS TERMINATED BY ‘,’
</span><span class='line'>LOCATION ‘/user/hive/warehouse/tokenized_access_logs<span class="err">&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>0: jdbc:hive2://quickstart:10000/default&gt; ADD JAR /usr/lib/hive/lib/hive-contrib.jar
</span><span class='line'>0: jdbc:hive2://quickstart:10000/default&gt; INSERT OVERWRITE TABLE tokenized_access_logs SELECT * FROM intermediate_access_logs<span class="p">;</span>
</span><span class='line'>0: jdbc:hive2://quickstart:10000/default&gt; !quit
</span></code></pre></td></tr></table></div></figure>


<h3>Validating in Impala</h3>

<figure class='code'><figcaption><span>validating tables in Impala</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">invalidate</span> <span class="n">metadata</span><span class="p">;</span>
</span><span class='line'><span class="k">show</span> <span class="n">tables</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">select</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">),</span>  <span class="n">url</span> <span class="k">from</span> <span class="n">tokenized_access_logs</span>
</span><span class='line'><span class="k">where</span> <span class="n">url</span> <span class="k">like</span> <span class="err">‘</span><span class="o">%</span><span class="err">\</span><span class="o">/</span><span class="n">product</span><span class="err">\</span><span class="o">/%</span><span class="err">’</span>
</span><span class='line'><span class="k">group</span> <span class="k">by</span> <span class="n">url</span>
</span><span class='line'><span class="k">order</span> <span class="k">by</span> <span class="k">count</span><span class="p">(</span><span class="o">*</span><span class="p">)</span> <span class="k">desc</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Analyzing data with Spark</h2>

<h3>Start Spark</h3>

<figure class='code'><figcaption><span>start Spark</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>spark-shell —jars /usr/lib/avro/avro-mapred.jar <span class="se">\</span>
</span><span class='line'>—conf spark.serializer<span class="o">=</span>org.apache.spark.serializer.KryoSerializer
</span></code></pre></td></tr></table></div></figure>


<h3>Programming in Scala</h3>

<figure class='code'><figcaption><span>relationship strengh analytics</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
</pre></td><td class='code'><pre><code class='scala'><span class='line'><span class="c1">// First we&#39;re going to import the classes we need and open some of the files</span>
</span><span class='line'><span class="c1">// we imported from our relational database into Hadoop with Sqoop</span>
</span><span class='line'>
</span><span class='line'><span class="k">import</span> <span class="nn">org.apache.avro.generic.GenericRecord</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.apache.avro.mapred.</span><span class="o">{</span><span class="nc">AvroInputFormat</span><span class="o">,</span> <span class="nc">AvroWrapper</span><span class="o">}</span>
</span><span class='line'><span class="k">import</span> <span class="nn">org.apache.hadoop.io.NullWritable</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">warehouse</span> <span class="k">=</span> <span class="s">&quot;hdfs://quickstart/user/hive/warehouse&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">order_items_path</span> <span class="k">=</span> <span class="n">warehouse</span> <span class="o">+</span> <span class="s">&quot;order_items&quot;</span>
</span><span class='line'><span class="k">val</span> <span class="n">order_items</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">hadoopFile</span><span class="o">[</span><span class="kt">AvroWrapper</span><span class="o">[</span><span class="kt">GenericRecord</span><span class="o">]</span>, <span class="kt">NullWritable</span>, <span class="kt">AvroInputFormat</span><span class="o">[</span><span class="kt">GenericRecord</span><span class="o">]](</span><span class="n">order_items_path</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">products_path</span> <span class="k">=</span> <span class="n">warehouse</span> <span class="o">+</span> <span class="s">&quot;products&quot;</span>
</span><span class='line'><span class="k">val</span> <span class="n">products</span> <span class="k">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">hadoopFile</span><span class="o">[</span><span class="kt">AvroWrapper</span><span class="o">[</span><span class="kt">GenericRecord</span><span class="o">]</span>, <span class="kt">NullWritable</span>, <span class="kt">AvroInputFormat</span><span class="o">[</span><span class="kt">GenericRecord</span><span class="o">]](</span><span class="n">product_path</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Next, we extract the fields from order_items and products that we care about</span>
</span><span class='line'><span class="c1">// and get a list of every product, its name and quantity, grouped by order</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">orders</span> <span class="k">=</span> <span class="n">order_items</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="o">(</span>
</span><span class='line'>  <span class="n">x</span><span class="o">.</span><span class="n">_1</span><span class="o">.</span><span class="n">datum</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;order_item_product_id&quot;</span><span class="o">),</span>
</span><span class='line'>  <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">_1</span><span class="o">.</span><span class="n">datum</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;order_item_order_id&quot;</span><span class="o">),</span> <span class="n">x</span><span class="o">.</span><span class="n">_1</span><span class="o">.</span><span class="n">datum</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;order_item_quantity&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">)}.</span><span class="n">join</span><span class="o">(</span>
</span><span class='line'>  <span class="n">products</span><span class="o">.</span><span class="n">map</span> <span class="o">{</span> <span class="n">x</span> <span class="k">=&gt;</span> <span class="o">(</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">_1</span><span class="o">.</span><span class="n">datum</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;product_id&quot;</span><span class="o">),</span>
</span><span class='line'>    <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">_1</span><span class="o">.</span><span class="n">datum</span><span class="o">.</span><span class="n">get</span><span class="o">(</span><span class="s">&quot;product_name&quot;</span><span class="o">))</span>
</span><span class='line'><span class="o">)}).</span><span class="n">map</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="o">(</span>
</span><span class='line'>  <span class="n">scala</span><span class="o">.</span><span class="nc">Int</span><span class="o">.</span><span class="n">unbox</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">_2</span><span class="o">.</span><span class="n">_1</span><span class="o">.</span><span class="n">_1</span><span class="o">),</span> <span class="c1">// order_id</span>
</span><span class='line'>  <span class="o">(</span>
</span><span class='line'>    <span class="n">scala</span><span class="o">.</span><span class="nc">Int</span><span class="o">.</span><span class="n">unbox</span><span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">_2</span><span class="o">.</span><span class="n">_1</span><span class="o">.</span><span class="n">_2</span><span class="o">),</span> <span class="c1">// quantity</span>
</span><span class='line'>    <span class="n">x</span><span class="o">.</span><span class="n">_2</span><span class="o">.</span><span class="n">_2</span><span class="o">.</span><span class="n">toString</span> <span class="c1">// product_name</span>
</span><span class='line'>  <span class="o">)</span>
</span><span class='line'><span class="o">)).</span><span class="n">groupByKey</span><span class="o">()</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c1">// Finally, we tally how many times each combination of products appears</span>
</span><span class='line'><span class="c1">// together in an order, and print the 10 most common combinations.</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">cooccurrences</span> <span class="k">=</span> <span class="n">orders</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">order</span> <span class="k">=&gt;</span> <span class="o">(</span>
</span><span class='line'>  <span class="n">order</span><span class="o">.</span><span class="n">_1</span><span class="o">,</span>
</span><span class='line'>  <span class="n">order</span><span class="o">.</span><span class="n">_2</span><span class="o">.</span><span class="n">toList</span><span class="o">.</span><span class="n">combinations</span><span class="o">(</span><span class="mi">2</span><span class="o">).</span><span class="n">map</span><span class="o">(</span><span class="n">order_pair</span> <span class="k">=&gt;</span> <span class="o">(</span>
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span><span class="n">order_pair</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">_2</span> <span class="o">&lt;</span> <span class="n">order_pair</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">_2</span><span class="o">)</span> <span class="o">(</span><span class="n">order_pair</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">_2</span><span class="o">,</span> <span class="n">order_pair</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">_2</span><span class="o">)</span>
</span><span class='line'>    <span class="k">else</span> <span class="o">(</span><span class="n">order_pair</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">_2</span><span class="o">,</span> <span class="n">order_pair</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">_2</span><span class="o">),</span> <span class="n">order_pair</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="n">_1</span> <span class="o">*</span> <span class="n">order_pair</span><span class="o">(</span><span class="mi">1</span><span class="o">).</span><span class="n">_1</span>
</span><span class='line'>  <span class="o">))</span>
</span><span class='line'><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="k">val</span> <span class="n">combos</span> <span class="k">=</span> <span class="n">cooccurrrences</span><span class="o">.</span><span class="n">flatMap</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="n">x</span><span class="o">.</span><span class="n">_2</span><span class="o">).</span><span class="n">reduceByKey</span><span class="o">((</span><span class="n">a</span><span class="o">,</span><span class="n">b</span><span class="o">)</span> <span class="k">=&gt;</span> <span class="n">a</span><span class="o">+</span><span class="n">b</span><span class="o">)</span>
</span><span class='line'><span class="k">val</span> <span class="n">mostCommon</span> <span class="k">=</span> <span class="n">combos</span><span class="o">.</span><span class="n">map</span><span class="o">(</span><span class="n">x</span> <span class="k">=&gt;</span> <span class="o">(</span><span class="n">x</span><span class="o">.</span><span class="n">_2</span><span class="o">,</span> <span class="n">x</span><span class="o">.</span><span class="n">_1</span><span class="o">)).</span><span class="n">sortByKey</span><span class="o">(</span><span class="kc">false</span><span class="o">).</span><span class="n">take</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">println</span><span class="o">(</span><span class="n">mostCommon</span><span class="o">.</span><span class="n">deep</span><span class="o">.</span><span class="n">mkString</span><span class="o">(</span><span class="s">&quot;\n&quot;</span><span class="o">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">exit</span>
</span></code></pre></td></tr></table></div></figure>


<p>NOTE:</p>

<p>When we do a &lsquo;map&rsquo;, we specify a function that will take each record and output a modified record. This is useful when we only need a couple of fields from each record  or when we need the record to use a different field as the key: we simply invoke map with a function that takes in the entire record, and returns a new record with the fields and the key we want.</p>

<p>The &lsquo;reduce&rsquo; operations - like &lsquo;join&rsquo; and &lsquo;groupBy&rsquo; - will organise these records by their keys so we can group similar records together and then process them as a group.</p>

<h2>Indexing data and search by Solr</h2>

<h3>Creating a search schema</h3>

<p>steps</p>

<ul>
<li>creating an empty configuration</li>
<li>editing your schema</li>
<li>uploading your configuration</li>
<li>creating your collection</li>
</ul>


<figure class='code'><figcaption><span>creating a search schame by Solr</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>solrctl --zk quickstart:2181/solr instancedir --generate solr_configs
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> /opt/examples/flume
</span><span class='line'><span class="nv">$ </span>solrctl --zk quickstart:2181/solr instancedir --create live_logs ./solr_configs
</span><span class='line'><span class="nv">$ </span>solrctl --zk quickstart:2181/solr collection --create live_logs -s 1
</span></code></pre></td></tr></table></div></figure>


<h3>Loading data into Solr</h3>

<p>tools</p>

<ul>
<li>flume - a tool for ingesting streams of data into your cluster from sources such as log files, network streams, and more; is a system for collecting, aggregating, and moving large amounts of log data from many different sources to a centralised data source.</li>
<li>morphines - a Java library for doing ETL on-the-fly.</li>
</ul>


<figure class='code'><figcaption><span>loading data by flume</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>start_logs
</span><span class='line'><span class="nv">$ </span>tail_logs
</span><span class='line'><span class="nv">$ </span>stop_logs
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>flume-ng agent <span class="se">\</span>
</span><span class='line'>--conf /opt/examples/flume/conf <span class="se">\</span>
</span><span class='line'>--conf-file /opt/examples/flume/conf/flume.conf <span class="se">\</span>
</span><span class='line'>--name agent1 <span class="se">\</span>
</span><span class='line'>-Dflume.root.logger<span class="o">=</span>DEBUG,INFO,console
</span></code></pre></td></tr></table></div></figure>


<h3>Playing data in Solr</h3>

<p>Hue -> Search -> Solr Search -> Dashboard</p>

<ul>
<li>browsing the data</li>
<li>charting</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Comparison of Programming Languages Libraries]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/01/06/the-comparison-of-programming-languages-libraries/"/>
    <updated>2016-01-06T01:44:45+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/01/06/the-comparison-of-programming-languages-libraries</id>
    <content type="html"><![CDATA[<h2>Web</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> Language </th>
<th style="text-align:left;"> Web Framework          </th>
<th style="text-align:left;"> Docs   </th>
<th style="text-align:left;"> Testing </th>
<th style="text-align:left;"> QA           </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> Python   </td>
<td style="text-align:left;"> Django, Tornado, Flask </td>
<td style="text-align:left;"> Sphinx </td>
<td style="text-align:left;"> Nose    </td>
<td style="text-align:left;"> PEP8, Pylint </td>
</tr>
<tr>
<td style="text-align:left;"> Ruby     </td>
<td style="text-align:left;"> Rails                  </td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> Node     </td>
<td style="text-align:left;"> Express                </td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> Angular  </td>
<td style="text-align:left;">                        </td>
<td style="text-align:left;">        </td>
<td style="text-align:left;"> Protractor </td>
<td style="text-align:left;">           </td>
</tr>
<tr>
<td style="text-align:left;"> Scala    </td>
<td style="text-align:left;"> Life                   </td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td style="text-align:left;"> Java     </td>
<td style="text-align:left;"> Spring                 </td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
</feed>
