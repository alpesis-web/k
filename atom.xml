<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[K]]></title>
  <link href="http://k.arttechresearch.com/atom.xml" rel="self"/>
  <link href="http://k.arttechresearch.com/"/>
  <updated>2016-04-10T03:18:16+08:00</updated>
  <id>http://k.arttechresearch.com/</id>
  <author>
    <name><![CDATA[K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programming Languages Comparison: Class and Instance]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/04/10/programming-languages-comparison-class-and-instance/"/>
    <updated>2016-04-10T02:54:41+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/04/10/programming-languages-comparison-class-and-instance</id>
    <content type="html"><![CDATA[<h2>Task</h2>

<ul>
<li>Write a class <code>Person</code> with an instance variable <code>InitialAge</code> with type <code>int</code>:

<ul>
<li>if <code>initialAge</code> &lt;= 0, set <code>age</code> = 0;</li>
<li>if <code>initialAge</code> > 0, set <code>age</code> = <code>initialAge</code>.</li>
</ul>
</li>
<li>Write a method <code>amIOld</code>:

<ul>
<li>if <code>age</code> &lt; 13, print <code>You are young.</code>;</li>
<li>if <code>age</code> >= 13 and <code>age</code> &lt; 18, print &ldquo;You are a teenager.&rdquo;;</li>
<li>if <code>age</code> > 18, print &ldquo;You are old.&rdquo;</li>
</ul>
</li>
<li>Write a method <code>yearPasses</code>:

<ul>
<li>increases the instance variable <code>age</code> by 1.</li>
</ul>
</li>
</ul>


<h2>Solutions</h2>

<h3>C</h3>

<p>Not Valid</p>

<h3>C++</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>   <span class="kt">int</span> <span class="n">age</span> <span class="p">;</span>
</span><span class='line'>   <span class="n">Person</span><span class="p">(</span><span class="kt">int</span> <span class="n">initialAge</span><span class="p">);</span>
</span><span class='line'>   <span class="kt">void</span> <span class="nf">amIOld</span><span class="p">();</span>
</span><span class='line'>   <span class="kt">void</span> <span class="nf">yearPasses</span><span class="p">();</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="n">Person</span><span class="o">::</span><span class="n">Person</span><span class="p">(</span><span class="kt">int</span> <span class="n">initialAge</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">// Add some more code to run some checks on initialAge</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">initialAge</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Age is not valid, setting age to 0.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>        <span class="n">age</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">age</span> <span class="o">=</span> <span class="n">initialAge</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="kt">void</span> <span class="n">Person</span><span class="o">::</span><span class="n">amIOld</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">// Do some computations in here and print out the correct statement to the console </span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">13</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;You are young.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">13</span> <span class="o">&amp;&amp;</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">18</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;You are a teenager.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;You are old.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="n">Person</span><span class="o">::</span><span class="n">yearPasses</span><span class="p">(){</span>
</span><span class='line'>  <span class="c1">// Increment the age of the person in here</span>
</span><span class='line'>  <span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="n">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">T</span><span class="p">,</span><span class="n">age</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">T</span><span class="p">;</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">i</span><span class="o">&lt;</span><span class="n">T</span><span class="p">;</span><span class="n">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">cin</span><span class="o">&gt;&gt;</span><span class="n">age</span><span class="p">;</span>
</span><span class='line'>        <span class="n">Person</span> <span class="nf">p</span><span class="p">(</span><span class="n">age</span><span class="p">);</span>
</span><span class='line'>        <span class="n">p</span><span class="p">.</span><span class="n">amIOld</span><span class="p">();</span>
</span><span class='line'>        <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="n">j</span><span class="o">&lt;</span><span class="mi">3</span><span class="p">;</span><span class="n">j</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">p</span><span class="p">.</span><span class="n">yearPasses</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">p</span><span class="p">.</span><span class="n">amIOld</span><span class="p">();</span>
</span><span class='line'>        <span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Java</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
</span><span class='line'>    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>    
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="nf">Person</span><span class="o">(</span><span class="kt">int</span> <span class="n">initialAge</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Add some more code to run some checks on initialAge</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">initialAge</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="o">){</span>
</span><span class='line'>            <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Age is not valid, setting age to 0.&quot;</span><span class="o">);</span>
</span><span class='line'>            <span class="n">age</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">age</span> <span class="o">=</span> <span class="n">initialAge</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">amIOld</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Write code determining if this person&#39;s age is old and print the correct statement:</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">output</span><span class="o">;</span>
</span><span class='line'>        <span class="k">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">13</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">output</span> <span class="o">=</span> <span class="s">&quot;You are young.&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="nf">if</span> <span class="o">(</span><span class="n">age</span> <span class="o">&gt;=</span> <span class="mi">13</span> <span class="o">&amp;&amp;</span> <span class="n">age</span> <span class="o">&lt;</span> <span class="mi">18</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">output</span> <span class="o">=</span> <span class="s">&quot;You are a teenager.&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>            <span class="n">output</span> <span class="o">=</span> <span class="s">&quot;You are old.&quot;</span><span class="o">;</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">output</span><span class="o">);</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kt">void</span> <span class="nf">yearPasses</span><span class="o">()</span> <span class="o">{</span>
</span><span class='line'>          <span class="c1">// Increment this person&#39;s age.</span>
</span><span class='line'>        <span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span><span class="o">;</span>
</span><span class='line'>  <span class="o">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>          <span class="n">Scanner</span> <span class="n">sc</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class='line'>          <span class="kt">int</span> <span class="n">T</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>              <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">T</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>              <span class="kt">int</span> <span class="n">age</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>                  <span class="n">Person</span> <span class="n">p</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="o">(</span><span class="n">age</span><span class="o">);</span>
</span><span class='line'>                  <span class="n">p</span><span class="o">.</span><span class="na">amIOld</span><span class="o">();</span>
</span><span class='line'>                  <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">j</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">j</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="o">;</span> <span class="n">j</span><span class="o">++)</span> <span class="o">{</span>
</span><span class='line'>                  <span class="n">p</span><span class="o">.</span><span class="na">yearPasses</span><span class="o">();</span>
</span><span class='line'>                  <span class="o">}</span>
</span><span class='line'>                  <span class="n">p</span><span class="o">.</span><span class="na">amIOld</span><span class="o">();</span>
</span><span class='line'>                <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">();</span>
</span><span class='line'>        <span class="o">}</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Python</h3>

<p>Python 2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">initialAge</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># Add some more code to run some checks on initialAge</span>
</span><span class='line'>        <span class="k">if</span> <span class="n">initialAge</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;Age is not valid, setting age to 0.&quot;</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">initialAge</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">amIOld</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># Do some computations in here and print out the correct statement to the console</span>
</span><span class='line'>        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">13</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;You are young.&quot;</span>
</span><span class='line'>        <span class="k">elif</span> <span class="mi">13</span> <span class="o">&lt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">18</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;You are a teenager.&quot;</span>
</span><span class='line'>        <span class="k">else</span><span class="p">:</span>
</span><span class='line'>            <span class="k">print</span> <span class="s">&quot;You are old.&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">yearPasses</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="c"># Increment the age of the person in here  </span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">age</span>
</span><span class='line'>
</span><span class='line'><span class="n">T</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="nb">raw_input</span><span class="p">())</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">T</span><span class="p">):</span>
</span><span class='line'>    <span class="n">age</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="nb">raw_input</span><span class="p">())</span>
</span><span class='line'>    <span class="n">p</span><span class="o">=</span><span class="n">Person</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="n">amIOld</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="n">yearPasses</span><span class="p">();</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="n">amIOld</span><span class="p">();</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python 3</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="k">class</span> <span class="nc">Person</span><span class="p">:</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">initialAge</span><span class="p">):</span>
</span><span class='line'>              <span class="c"># Add some more code to run some checks on initialAge</span>
</span><span class='line'>            <span class="k">if</span> <span class="n">initialAge</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span><span class="p">(</span><span class="s">&quot;Age is not valid, setting age to 0.&quot;</span><span class="p">)</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">=</span> <span class="n">initialAge</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">amIOld</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>            <span class="c"># Do some computations in here and print out the correct statement to the console</span>
</span><span class='line'>            <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">13</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span><span class="p">(</span><span class="s">&quot;You are young.&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">elif</span> <span class="mi">13</span> <span class="o">&lt;=</span> <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">&lt;</span> <span class="mi">18</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span><span class="p">(</span><span class="s">&quot;You are a teenager.&quot;</span><span class="p">)</span>
</span><span class='line'>            <span class="k">else</span><span class="p">:</span>
</span><span class='line'>                <span class="k">print</span><span class="p">(</span><span class="s">&quot;You are old.&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">yearPasses</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>            <span class="c"># Increment the age of the person in here     </span>
</span><span class='line'>            <span class="bp">self</span><span class="o">.</span><span class="n">age</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">T</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
</span><span class='line'><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">T</span><span class="p">):</span>
</span><span class='line'>    <span class="n">age</span><span class="o">=</span><span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
</span><span class='line'>    <span class="n">p</span><span class="o">=</span><span class="n">Person</span><span class="p">(</span><span class="n">age</span><span class="p">)</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="n">amIOld</span><span class="p">()</span>
</span><span class='line'>    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">):</span>
</span><span class='line'>        <span class="n">p</span><span class="o">.</span><span class="n">yearPasses</span><span class="p">();</span>
</span><span class='line'>    <span class="n">p</span><span class="o">.</span><span class="n">amIOld</span><span class="p">();</span>
</span><span class='line'>    <span class="k">print</span> <span class="p">(</span><span class="s">&quot;&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Languages Comparison: Conditional Statements]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/04/09/programming-languages-comparison-conditional-statements/"/>
    <updated>2016-04-09T00:05:56+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/04/09/programming-languages-comparison-conditional-statements</id>
    <content type="html"><![CDATA[<h2>Task</h2>

<p>Given an integer n, perform the following conditonal actions:</p>

<ul>
<li>if n is odd, print <code>Weird</code>;</li>
<li>if n is even, and in the inclusive range of 2 to 5, print <code>Not Weird</code>;</li>
<li>if n is even, and in the inclusive range of 6 to 20, print <code>Weird</code>;</li>
<li>if n is even, and greater than 20, print <code>Not Weird</code>.</li>
</ul>


<h2>Solutions</h2>

<h3>C</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;math.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;assert.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;limits.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdbool.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span><span class="o">&amp;</span><span class="n">N</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">N</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Weird&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span><span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">N</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="n">N</span><span class="o">&gt;=</span><span class="mi">6</span> <span class="o">&amp;&amp;</span> <span class="n">N</span><span class="o">&lt;=</span><span class="mi">20</span><span class="p">){</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Weird&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Not Weird&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>C++</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;map&gt;</span>
</span><span class='line'><span class="cp">#include &lt;set&gt;</span>
</span><span class='line'><span class="cp">#include &lt;list&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;ctime&gt;</span>
</span><span class='line'><span class="cp">#include &lt;deque&gt;</span>
</span><span class='line'><span class="cp">#include &lt;queue&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stack&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string&gt;</span>
</span><span class='line'><span class="cp">#include &lt;bitset&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;limits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;climits&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstring&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdlib&gt;</span>
</span><span class='line'><span class="cp">#include &lt;fstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;numeric&gt;</span>
</span><span class='line'><span class="cp">#include &lt;sstream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">N</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">string</span> <span class="n">ans</span> <span class="o">=</span> <span class="s">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">N</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span><span class="p">){</span>
</span><span class='line'>        <span class="n">ans</span> <span class="o">=</span> <span class="s">&quot;Weird&quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">N</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">N</span> <span class="o">&gt;=</span> <span class="mi">6</span> <span class="o">&amp;&amp;</span> <span class="n">N</span> <span class="o">&lt;=</span> <span class="mi">20</span><span class="p">)){</span>
</span><span class='line'>            <span class="n">ans</span> <span class="o">=</span> <span class="s">&quot;Weird&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="k">else</span><span class="p">{</span>
</span><span class='line'>            <span class="n">ans</span> <span class="o">=</span> <span class="s">&quot;Not Weird&quot;</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ans</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Java</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.text.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.math.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.regex.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class='line'>      <span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>      <span class="n">scan</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">ans</span><span class="o">=</span><span class="s">&quot;&quot;</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// if &#39;n&#39; is NOT evenly divisible by 2 (i.e.: n is odd)</span>
</span><span class='line'>      <span class="k">if</span><span class="o">(</span><span class="n">n</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">1</span><span class="o">){</span>
</span><span class='line'>         <span class="n">ans</span> <span class="o">=</span> <span class="s">&quot;Weird&quot;</span><span class="o">;</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="k">else</span><span class="o">{</span>
</span><span class='line'>         <span class="c1">// Complete the code </span>
</span><span class='line'>         <span class="k">if</span> <span class="o">(</span><span class="n">n</span><span class="o">%</span><span class="mi">2</span><span class="o">==</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="o">(</span><span class="n">n</span> <span class="o">&gt;=</span><span class="mi">6</span> <span class="o">&amp;&amp;</span> <span class="n">n</span> <span class="o">&lt;=</span><span class="mi">20</span><span class="o">)){</span>
</span><span class='line'>             <span class="n">ans</span> <span class="o">=</span> <span class="s">&quot;Weird&quot;</span><span class="o">;</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>         <span class="k">else</span> <span class="o">{</span>
</span><span class='line'>             <span class="n">ans</span> <span class="o">=</span> <span class="s">&quot;Not Weird&quot;</span><span class="o">;</span>
</span><span class='line'>         <span class="o">}</span>
</span><span class='line'>      <span class="o">}</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">ans</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Python</h3>

<p>Python 2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/bin/python</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">raw_input</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">N</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="p">(</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="n">N</span> <span class="o">&lt;=</span> <span class="mi">5</span> <span class="ow">or</span> <span class="n">N</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Not Weird&quot;</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="s">&quot;Weird&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python 3</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="c">#!/bin/python3</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="n">N</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">()</span><span class="o">.</span><span class="n">strip</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="n">N</span> <span class="o">%</span> <span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span> <span class="ow">and</span> <span class="p">(</span><span class="mi">2</span> <span class="o">&lt;=</span> <span class="n">N</span> <span class="o">&lt;=</span> <span class="mi">5</span> <span class="ow">or</span> <span class="n">N</span> <span class="o">&gt;</span> <span class="mi">20</span><span class="p">):</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Not Weird&quot;</span><span class="p">)</span>
</span><span class='line'><span class="k">else</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span><span class="p">(</span><span class="s">&quot;Weird&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Languages Comparison: Operators]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/04/07/programming-languages-comparison-operators/"/>
    <updated>2016-04-07T23:57:09+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/04/07/programming-languages-comparison-operators</id>
    <content type="html"><![CDATA[<h2>Task</h2>

<ul>
<li>get the input: mealCost, tipPercent, taxPercent</li>
<li>calculate the tip: tip = mealCost * tipPercent / 100</li>
<li>calculate the tax: tax = mealCost * taxPercent / 100</li>
<li>calculate the totalCost: totalCost = mealCost + tip + tax</li>
<li>round the totalCost</li>
<li>print the output</li>
</ul>


<h2>Solutions</h2>

<h3>C</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;math.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="cm">/* Enter your code here. Read input from STDIN. Print output to STDOUT */</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">mealCost</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">tipPercent</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">taxPercent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%f&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">mealCost</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">%f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tipPercent</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%f&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">taxPercent</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">double</span> <span class="n">tip</span> <span class="o">=</span> <span class="n">mealCost</span> <span class="o">*</span> <span class="n">tipPercent</span> <span class="o">/</span> <span class="mf">100.0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">tax</span> <span class="o">=</span> <span class="n">mealCost</span> <span class="o">*</span> <span class="n">taxPercent</span> <span class="o">/</span> <span class="mf">100.0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">totalCost</span> <span class="o">=</span> <span class="n">round</span><span class="p">(</span><span class="n">mealCost</span> <span class="o">+</span> <span class="n">tip</span> <span class="o">+</span> <span class="n">tax</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;The total meal cost is %d dollars.&quot;</span><span class="p">,</span> <span class="n">totalCost</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>C++</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* Enter your code here. Read input from STDIN. Print output to STDOUT */</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">mealCost</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">tipPercent</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">taxPercent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">mealCost</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">tipPercent</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cin</span> <span class="o">&gt;&gt;</span> <span class="n">taxPercent</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kt">double</span> <span class="n">tip</span> <span class="o">=</span> <span class="n">mealCost</span> <span class="o">*</span> <span class="n">tipPercent</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">tax</span> <span class="o">=</span> <span class="n">mealCost</span> <span class="o">*</span> <span class="n">taxPercent</span> <span class="o">/</span> <span class="mi">100</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">totalCost</span> <span class="o">=</span> <span class="n">mealCost</span> <span class="o">+</span> <span class="n">tip</span> <span class="o">+</span> <span class="n">tax</span><span class="p">;</span>
</span><span class='line'>    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;The total meal cost is &quot;</span> <span class="o">&lt;&lt;</span> <span class="n">round</span><span class="p">(</span><span class="n">totalCost</span><span class="p">)</span> <span class="o">&lt;&lt;</span> <span class="s">&quot; dollars.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Java</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.text.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.math.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.regex.*</span><span class="o">;</span>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Arithmetic</span> <span class="o">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">mealCost</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextDouble</span><span class="o">();</span> <span class="c1">// original meal price</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">tipPercent</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span> <span class="c1">// tip percentage</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">taxPercent</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span> <span class="c1">// tax percentage</span>
</span><span class='line'>        <span class="n">scan</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Write your calculation code here.</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">tip</span> <span class="o">=</span> <span class="n">mealCost</span> <span class="o">*</span> <span class="o">(</span><span class="n">tipPercent</span><span class="o">/</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">tax</span> <span class="o">=</span> <span class="n">mealCost</span> <span class="o">*</span> <span class="o">(</span><span class="n">taxPercent</span><span class="o">/</span><span class="mi">100</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// cast the result of the rounding operation to an int and save it as totalCost</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">totalCost</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">Math</span><span class="o">.</span><span class="na">round</span><span class="o">(</span><span class="n">mealCost</span><span class="o">+</span><span class="n">tip</span><span class="o">+</span><span class="n">tax</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Print your result</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;The total meal cost is &quot;</span> <span class="o">+</span> <span class="n">totalCost</span> <span class="o">+</span> <span class="s">&quot; dollars.&quot;</span><span class="o">);</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Python</h3>

<p>Python 2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">mealCost</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">raw_input</span><span class="p">())</span>
</span><span class='line'><span class="n">tipPercent</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">raw_input</span><span class="p">())</span>
</span><span class='line'><span class="n">taxPercent</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">raw_input</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">tip</span> <span class="o">=</span> <span class="n">mealCost</span> <span class="o">*</span> <span class="p">(</span> <span class="n">tipPercent</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="n">tax</span> <span class="o">=</span> <span class="n">mealCost</span> <span class="o">*</span> <span class="p">(</span><span class="n">taxPercent</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">totalCost</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">mealCost</span> <span class="o">+</span> <span class="n">tip</span> <span class="o">+</span> <span class="n">tax</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="s">&quot;The total meal cost is </span><span class="si">%d</span><span class="s"> dollars.&quot;</span> <span class="o">%</span> <span class="n">totalCost</span>
</span></code></pre></td></tr></table></div></figure>


<p>Python 3</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">mealCost</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
</span><span class='line'><span class="n">tipPercent</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
</span><span class='line'><span class="n">taxPercent</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="n">tip</span> <span class="o">=</span> <span class="n">mealCost</span> <span class="o">*</span> <span class="p">(</span><span class="n">tipPercent</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'><span class="n">tax</span> <span class="o">=</span> <span class="n">mealCost</span> <span class="o">*</span> <span class="p">(</span><span class="n">taxPercent</span><span class="o">/</span><span class="mi">100</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">totalCost</span> <span class="o">=</span> <span class="nb">round</span><span class="p">(</span><span class="n">mealCost</span> <span class="o">+</span> <span class="n">tip</span> <span class="o">+</span> <span class="n">tax</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&quot;The total meal cost is </span><span class="si">%d</span><span class="s"> dollars.&quot;</span> <span class="o">%</span> <span class="n">totalCost</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Languages Comparison: Data Types]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/04/07/programming-languages-comparison-data-types/"/>
    <updated>2016-04-07T01:55:32+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/04/07/programming-languages-comparison-data-types</id>
    <content type="html"><![CDATA[<h2>Task</h2>

<ul>
<li>get the variables: int, double, string</li>
<li>calculate the sum of the digits and concat the strings</li>
<li>print the results</li>
</ul>


<h2>Solutions</h2>

<h3>C</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;math.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">4.0</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">s</span><span class="p">[]</span> <span class="o">=</span> <span class="s">&quot;HackerRank &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Declare second integer, double, and String variables.</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">float</span> <span class="n">digit</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">char</span> <span class="n">string</span><span class="p">[</span><span class="mi">100</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Read and save an integer, double, and String to your variables.</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%d&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;</span><span class="se">\n</span><span class="s">%f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">digit</span><span class="p">);</span>
</span><span class='line'>    <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%[^</span><span class="se">\n</span><span class="s">]&quot;</span><span class="p">,</span> <span class="n">string</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Print the sum of both integer variables on a new line.</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%d</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">i</span><span class="o">+</span><span class="n">num</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Print the sum of the double variables on a new line.</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%.1f</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">d</span><span class="o">+</span><span class="n">digit</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Concatenate and print the String variables on a new line</span>
</span><span class='line'>    <span class="c1">// The &#39;s&#39; variable above should be printed first.</span>
</span><span class='line'>    <span class="n">printf</span><span class="p">(</span><span class="s">&quot;%s%s&quot;</span><span class="p">,</span> <span class="n">s</span><span class="p">,</span> <span class="n">string</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>C++</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iomanip&gt;</span>
</span><span class='line'><span class="cp">#include &lt;limits&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">4.0</span><span class="p">;</span>
</span><span class='line'>    <span class="n">string</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;HackerRank &quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Java</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.text.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.math.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.regex.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>  
</span><span class='line'>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">4</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">d</span> <span class="o">=</span> <span class="mf">4.0</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="s">&quot;HackerRank &quot;</span><span class="o">;</span>
</span><span class='line'>      
</span><span class='line'>        <span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Declare second integer, double, and String variables. */</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">i2</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextInt</span><span class="o">();</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">d2</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextDouble</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">empty</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">s2</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Read and save an integer, double, and String to your variables.*/</span>
</span><span class='line'>        <span class="kt">int</span> <span class="n">int_sum</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">i2</span><span class="o">;</span>
</span><span class='line'>        <span class="kt">double</span> <span class="n">double_sum</span> <span class="o">=</span> <span class="n">d</span> <span class="o">+</span> <span class="n">d2</span><span class="o">;</span>
</span><span class='line'>        <span class="n">String</span> <span class="n">combine_s</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="n">s2</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="cm">/* Print the sum of both integer variables on a new line. */</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">int_sum</span><span class="o">);</span>
</span><span class='line'>        <span class="cm">/* Print the sum of the double variables on a new line. */</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">double_sum</span><span class="o">);</span>
</span><span class='line'>        <span class="cm">/* Concatenate and print the String variables on a new line; </span>
</span><span class='line'><span class="cm">         the &#39;s&#39; variable above should be printed first. */</span>
</span><span class='line'>        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">combine_s</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">scan</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
</span><span class='line'>    <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Python</h3>

<p>python 2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="mf">4.0</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s">&#39;HackerRank &#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Declare second integer, double, and String variables.</span>
</span><span class='line'><span class="n">i2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">raw_input</span><span class="p">())</span>
</span><span class='line'><span class="n">d2</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">raw_input</span><span class="p">())</span>
</span><span class='line'><span class="n">s2</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">raw_input</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Read and save an integer, double, and String to your variables.</span>
</span><span class='line'><span class="n">total_i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">i2</span>
</span><span class='line'><span class="n">total_d</span> <span class="o">=</span> <span class="n">d</span> <span class="o">+</span> <span class="n">d2</span>
</span><span class='line'><span class="n">strings</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="n">s2</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Print the sum of both integer variables on a new line.</span>
</span><span class='line'><span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">total_i</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Print the sum of the double variables on a new line.</span>
</span><span class='line'><span class="k">print</span> <span class="nb">str</span><span class="p">(</span><span class="n">total_d</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Concatenate and print the String variables on a new line</span>
</span><span class='line'><span class="c"># The &#39;s&#39; variable above should be printed first.</span>
</span><span class='line'><span class="k">print</span> <span class="n">strings</span>
</span></code></pre></td></tr></table></div></figure>


<p>python 3</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">i</span> <span class="o">=</span> <span class="mi">4</span>
</span><span class='line'><span class="n">d</span> <span class="o">=</span> <span class="mf">4.0</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="s">&#39;HackerRank &#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Declare second integer, double, and String variables.</span>
</span><span class='line'><span class="n">i2</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
</span><span class='line'><span class="n">d2</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
</span><span class='line'><span class="n">s2</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Read and save an integer, double, and String to your variables.</span>
</span><span class='line'><span class="n">total_i</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="n">i2</span>
</span><span class='line'><span class="n">total_d</span> <span class="o">=</span> <span class="n">d</span> <span class="o">+</span> <span class="n">d2</span>
</span><span class='line'><span class="n">strings</span> <span class="o">=</span> <span class="n">s</span> <span class="o">+</span> <span class="n">s2</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Print the sum of both integer variables on a new line.</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">total_i</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Print the sum of the double variables on a new line.</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">total_d</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Concatenate and print the String variables on a new line</span>
</span><span class='line'><span class="c"># The &#39;s&#39; variable above should be printed first.</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">strings</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Languages Comparison: Print]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/04/05/programming-languages-comparison-print/"/>
    <updated>2016-04-05T17:08:53+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/04/05/programming-languages-comparison-print</id>
    <content type="html"><![CDATA[<h2>Task</h2>

<ul>
<li>Save a line of input from stdin to a variable</li>
<li>Print <code>Hello, World</code> on a single line</li>
<li>Print the value of the variable on a second line</li>
</ul>


<h2>Solutions</h2>

<h3>C</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;stdio.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;string.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;math.h&gt;</span>
</span><span class='line'><span class="cp">#include &lt;stdlib.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="kt">char</span> <span class="n">inputString</span><span class="p">[</span><span class="mi">105</span><span class="p">];</span> <span class="c1">// declare a variable to hold our input</span>
</span><span class='line'>   <span class="n">scanf</span><span class="p">(</span><span class="s">&quot;%[^</span><span class="se">\n</span><span class="s">]&quot;</span><span class="p">,</span> <span class="n">inputString</span><span class="p">);</span> <span class="c1">// get a line of input from stdin and save it to our variable</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Your first line of output goes here</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="s">&quot;Hello, World.</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Write the second line of output</span>
</span><span class='line'>   <span class="n">printf</span><span class="p">(</span><span class="n">inputString</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>C++</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;cmath&gt;</span>
</span><span class='line'><span class="cp">#include &lt;cstdio&gt;</span>
</span><span class='line'><span class="cp">#include &lt;vector&gt;</span>
</span><span class='line'><span class="cp">#include &lt;iostream&gt;</span>
</span><span class='line'><span class="cp">#include &lt;algorithm&gt;</span>
</span><span class='line'><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>   <span class="n">string</span> <span class="n">inputString</span><span class="p">;</span> <span class="c1">// declare a variable to hold our input</span>
</span><span class='line'>   <span class="n">getline</span><span class="p">(</span><span class="n">cin</span><span class="p">,</span> <span class="n">inputString</span><span class="p">);</span> <span class="c1">// get a line of input from cin and save it to our variable</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Your first line of output goes here</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&quot;Hello, World.&quot;</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">// Write the second line of output</span>
</span><span class='line'>   <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">inputString</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>   <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Java</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='java'><span class='line'><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.text.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.math.*</span><span class="o">;</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">java.util.regex.*</span><span class="o">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
</span><span class='line'>   <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
</span><span class='line'>      <span class="n">Scanner</span> <span class="n">scan</span> <span class="o">=</span> <span class="k">new</span> <span class="nf">Scanner</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">in</span><span class="o">);</span> <span class="c1">// use the Scanner class to read from stdin</span>
</span><span class='line'>      <span class="n">String</span> <span class="n">inputString</span> <span class="o">=</span> <span class="n">scan</span><span class="o">.</span><span class="na">nextLine</span><span class="o">();</span> <span class="c1">// read a line of input and save it to a variable</span>
</span><span class='line'>      <span class="n">scan</span><span class="o">.</span><span class="na">close</span><span class="o">();</span> <span class="c1">// close the scanner</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Your first line of output goes here</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">&quot;Hello, World.&quot;</span><span class="o">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Write the second line of output</span>
</span><span class='line'>      <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">inputString</span><span class="o">);</span>
</span><span class='line'>   <span class="o">}</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Python</h3>

<p>python2</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">inputString</span> <span class="o">=</span> <span class="nb">raw_input</span><span class="p">()</span> <span class="c"># get a line of input from stdin and save it to our variable</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Your first line of output goes here</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;Hello, World.&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Write the second line of output</span>
</span><span class='line'><span class="k">print</span> <span class="n">inputString</span>
</span></code></pre></td></tr></table></div></figure>


<p>python3</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">inputString</span> <span class="o">=</span> <span class="nb">input</span><span class="p">()</span> <span class="c"># get a line of input from stdin and save it to our variable</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Your first line of output goes here</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="s">&#39;Hello, World.&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># Write the second line of output</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">inputString</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithms]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/28/algorithms/"/>
    <updated>2016-03-28T21:50:20+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/28/algorithms</id>
    <content type="html"><![CDATA[<h2>Analysis of Algorithms</h2>

<h2>Data Structure</h2>

<h3>Array: Searching and Sorting</h3>

<p>searching:</p>

<ul>
<li>Binary Search</li>
</ul>


<p>sorting:</p>

<ul>
<li>Selection Sort</li>
<li>Bubble Sort</li>
<li>Insertion Sort</li>
<li>Merge Sort</li>
<li>Heap Sort</li>
<li>Quick Sort</li>
<li>Radix Sort</li>
<li>Counting Sort</li>
<li>Bucket Sort</li>
<li>Shell Sort</li>
<li>Comb Sort</li>
<li>Pigeonhole Sort</li>
</ul>


<h3>Tree &amp; Graph: Greedy and Graph</h3>

<h4>Search</h4>

<ul>
<li>DFS</li>
<li>BFS</li>
</ul>


<h4>Greedy Algorithms</h4>

<ul>
<li>Activity selectioin problem</li>
<li>spanning tree

<ul>
<li>Kruskal’s minimum spanning tree</li>
<li>Prim’s minimum spanning tree</li>
<li>Prim’s MST for Adjacency list representation</li>
</ul>
</li>
<li>path

<ul>
<li>Dijkstra’s shortest path algorithm</li>
<li>Dijkstra’s algorithm for Adjacency list representation</li>
</ul>
</li>
<li>value

<ul>
<li>Huffman coding</li>
<li>Efficient Huffman coding for sorted input</li>
</ul>
</li>
</ul>


<h4>Graph Algorithms</h4>

<ul>
<li>Connectivity</li>
<li>Hard Problems</li>
<li>Maximum Flow</li>
<li>Misc</li>
</ul>


<h2>String</h2>

<h3>Pattern Searching</h3>

<h3>String Algorithms</h3>

<h2>Strategics</h2>

<h3>Divide and Conquer</h3>

<h2>Mathematics</h2>

<h3>Backtracking</h3>

<h3>Geometric Algorithms</h3>

<h3>Mathematical Algorithms</h3>

<h3>Bit Algorithms</h3>

<h2>Reference</h2>

<ul>
<li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#SearchingandSorting">Algorithms</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/28/sql/"/>
    <updated>2016-03-28T18:46:05+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/28/sql</id>
    <content type="html"><![CDATA[<p>Types of SQL queries:</p>

<ul>
<li>DDL: data definition language

<ul>
<li>DML: data manipulation laugnage</li>
<li>DQL: data query language</li>
<li>DCL: data control language</li>
<li>DTL: data transaction language</li>
</ul>
</li>
<li>VDL: view definition language</li>
<li>SDL: storage definition language</li>
</ul>


<h2>DDL</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="k">table</span> <span class="n">name</span><span class="p">]</span> <span class="p">(</span> <span class="p">[</span><span class="k">column</span> <span class="n">definitions</span><span class="p">]</span> <span class="p">)</span> <span class="p">[</span><span class="k">table</span> <span class="k">parameters</span><span class="p">]</span>
</span><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">employees</span> <span class="p">(</span>
</span><span class='line'>    <span class="n">id</span>            <span class="nb">INTEGER</span>      <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
</span><span class='line'>    <span class="n">first_name</span>    <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">last_name</span>     <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">75</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">fname</span>         <span class="nb">VARCHAR</span><span class="p">(</span><span class="mi">50</span><span class="p">)</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
</span><span class='line'>    <span class="n">dateofbirth</span>   <span class="nb">DATE</span>         <span class="k">not</span> <span class="k">null</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">DROP</span> <span class="n">objecttype</span> <span class="n">objectname</span>
</span><span class='line'><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">employees</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">ALTER</span> <span class="n">objecttype</span> <span class="n">objectname</span> <span class="k">parameters</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">sink</span> <span class="k">ADD</span> <span class="n">bubbles</span> <span class="nb">INTEGER</span><span class="p">;</span>
</span><span class='line'><span class="k">ALTER</span> <span class="k">TABLE</span> <span class="n">sink</span> <span class="k">DROP</span> <span class="k">COLUMN</span> <span class="n">bubbles</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">RENAME</span> <span class="k">TABLE</span> <span class="n">old_name</span> <span class="k">TO</span> <span class="n">new_name</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DML</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="p">...</span> <span class="k">FROM</span> <span class="p">...</span> <span class="k">WHERE</span> <span class="p">...</span>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="p">...</span> <span class="k">VALUES</span> <span class="p">...</span>
</span><span class='line'><span class="k">UPDATE</span> <span class="p">...</span> <span class="k">SET</span> <span class="p">...</span> <span class="k">WHERE</span> <span class="p">...</span>
</span><span class='line'><span class="k">DELETE</span> <span class="k">FROM</span> <span class="p">...</span> <span class="k">WHERE</span> <span class="p">...</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="n">nom</span><span class="p">,</span> <span class="n">service</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">employe</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">status</span> <span class="o">=</span> <span class="s1">&#39;stagiaire&#39;</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">nom</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">employees</span><span class="p">(</span><span class="n">first_name</span><span class="p">,</span> <span class="n">last_name</span><span class="p">,</span> <span class="n">fname</span><span class="p">)</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;John&#39;</span><span class="p">,</span> <span class="s1">&#39;Capita&#39;</span><span class="p">,</span> <span class="s1">&#39;xcapit00&#39;</span><span class="p">);</span>
</span><span class='line'><span class="k">UPDATE</span> <span class="n">a_table</span> <span class="k">SET</span> <span class="n">field1</span> <span class="o">=</span> <span class="s1">&#39;updated value&#39;</span> <span class="k">WHERE</span> <span class="n">field2</span> <span class="o">=</span> <span class="s1">&#39;N&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">DELETE</span> <span class="k">FROM</span> <span class="n">a_table</span> <span class="k">WHERE</span> <span class="n">field2</span> <span class="o">=</span> <span class="s1">&#39;N&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">MERGE</span> <span class="k">INTO</span> <span class="k">table_name</span> <span class="k">USING</span> <span class="n">table_reference</span> <span class="k">ON</span> <span class="p">(</span><span class="n">condition</span><span class="p">)</span>
</span><span class='line'>   <span class="k">WHEN</span> <span class="n">MATCHED</span> <span class="k">THEN</span>
</span><span class='line'>   <span class="k">UPDATE</span> <span class="k">SET</span> <span class="n">column1</span> <span class="o">=</span> <span class="n">value1</span> <span class="p">[,</span> <span class="n">column2</span> <span class="o">=</span> <span class="n">value2</span> <span class="p">...]</span>
</span><span class='line'>   <span class="k">WHEN</span> <span class="k">NOT</span> <span class="n">MATCHED</span> <span class="k">THEN</span>
</span><span class='line'>   <span class="k">INSERT</span> <span class="p">(</span><span class="n">column1</span> <span class="p">[,</span> <span class="n">column2</span> <span class="p">...])</span> <span class="k">VALUES</span> <span class="p">(</span><span class="n">value1</span> <span class="p">[,</span> <span class="n">value2</span> <span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<h3>UPDATE</h3>

<p>Update top 10 state in the table authors.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">UPDATE</span> <span class="k">state</span>
</span><span class='line'><span class="k">SET</span> <span class="k">state</span><span class="p">.</span><span class="n">saleprice</span> <span class="o">=</span> <span class="k">state</span><span class="p">.</span><span class="n">saleprice</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>         <span class="k">SELECT</span> <span class="n">TOP</span> <span class="mi">10</span> <span class="o">*</span>
</span><span class='line'>         <span class="k">FROM</span> <span class="n">sales</span> <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">saleid</span>
</span><span class='line'>     <span class="p">)</span> <span class="k">AS</span> <span class="n">t1</span><span class="p">,</span> <span class="n">sales</span> <span class="k">state</span>
</span><span class='line'><span class="k">WHERE</span> <span class="k">state</span><span class="p">.</span><span class="n">saleid</span> <span class="o">=</span> <span class="n">t1</span><span class="p">.</span><span class="n">saleid</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="k">UPDATE</span> <span class="k">state</span>
</span><span class='line'><span class="k">SET</span> <span class="k">state</span><span class="p">.</span><span class="n">saleprice</span> <span class="o">=</span> <span class="k">state</span><span class="p">.</span><span class="n">saleprice</span> <span class="o">+</span> <span class="mi">2</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">sales</span> <span class="k">state</span>
</span><span class='line'><span class="k">WHERE</span> <span class="k">state</span><span class="p">.</span><span class="n">sale</span><span class="p">.</span><span class="n">id</span> <span class="k">in</span> <span class="p">(</span>
</span><span class='line'>                           <span class="k">SELECT</span> <span class="n">TOP</span> <span class="mi">10</span> <span class="n">saleid</span>
</span><span class='line'>                           <span class="k">FROM</span> <span class="n">sales</span>
</span><span class='line'>                           <span class="k">ORDER</span> <span class="k">BY</span> <span class="n">saleid</span>
</span><span class='line'>                       <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DQL</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="o">-</span> <span class="n">functions</span><span class="p">:</span> <span class="k">COUNT</span><span class="p">,</span> <span class="k">AVG</span><span class="p">,</span> <span class="k">MIN</span><span class="p">,</span> <span class="k">MAX</span><span class="p">,</span> <span class="k">SUM</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span>    <span class="k">column</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="k">FROM</span> <span class="o">*</span>
</span><span class='line'>            <span class="k">table</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>            <span class="k">FULL</span> <span class="k">OUTER</span> <span class="k">JOIN</span>
</span><span class='line'>            <span class="k">RIGHT</span> <span class="k">OUTER</span> <span class="k">JOIN</span>
</span><span class='line'>            <span class="k">LEFT</span> <span class="k">OUTER</span> <span class="k">JOIN</span>
</span><span class='line'>            <span class="k">INNER</span> <span class="k">JOIN</span>
</span><span class='line'>            <span class="k">Alias</span> <span class="p">(</span><span class="k">AS</span><span class="p">)</span>
</span><span class='line'><span class="k">WHERE</span> <span class="o">*</span>
</span><span class='line'>            <span class="n">Predicate</span> <span class="p">(</span><span class="o">=</span><span class="p">,</span><span class="o">&lt;&gt;</span><span class="p">,</span><span class="o">&lt;</span><span class="p">,</span><span class="o">&lt;=</span><span class="p">,</span><span class="o">&gt;</span><span class="p">,</span><span class="o">&gt;=</span><span class="p">)</span>
</span><span class='line'>            <span class="n">Operators</span> <span class="p">(</span><span class="k">AND</span><span class="p">,</span> <span class="k">OR</span><span class="p">,</span> <span class="k">NOT</span><span class="p">)</span>
</span><span class='line'>            <span class="k">LIKE</span> <span class="p">(</span><span class="o">%</span><span class="p">,</span><span class="n">_</span><span class="p">)</span>
</span><span class='line'>            <span class="k">BETWEEN</span> <span class="p">...</span> <span class="k">IN</span> <span class="p">...</span>
</span><span class='line'>            <span class="k">EXISTS</span>
</span><span class='line'>            <span class="k">IS</span> <span class="k">NULL</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="o">*</span>
</span><span class='line'>            <span class="k">ASC</span><span class="o">/</span><span class="k">DESC</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="o">*</span>
</span><span class='line'>            <span class="k">column</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'><span class="k">HAVING</span> <span class="o">*</span>
</span><span class='line'>            <span class="n">clause</span>
</span><span class='line'><span class="k">FETCH</span> <span class="o">*</span>
</span><span class='line'>            <span class="n">clause</span>
</span></code></pre></td></tr></table></div></figure>


<h3>JOIN/UNION</h3>

<ul>
<li>inner join: A &amp;&amp; B, # of rows = (A&amp;&amp;B)</li>
<li>left join: A (full) &amp;&amp; B (null), # of rows = rows(A)</li>
<li>right join: A (null) &amp;&amp; B (full), # of rows = rows(B)</li>
<li>full join: union, # of rows = rows(A) + rows(B) - rows (A&amp;&amp;B)</li>
</ul>


<p>join</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">orders</span><span class="p">.</span><span class="n">orderid</span><span class="p">,</span> <span class="n">customers</span><span class="p">.</span><span class="n">customerid</span><span class="p">,</span> <span class="n">customers</span><span class="p">.</span><span class="n">customername</span><span class="p">,</span> <span class="n">orders</span><span class="p">.</span><span class="n">orderdate</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">orders</span>
</span><span class='line'><span class="k">INNER</span> <span class="k">JOIN</span> <span class="n">customers</span>
</span><span class='line'><span class="k">ON</span> <span class="n">orders</span><span class="p">.</span><span class="n">customerid</span> <span class="o">=</span> <span class="n">customers</span><span class="p">.</span><span class="n">customerid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="n">orders</span><span class="p">.</span><span class="n">orderid</span><span class="p">,</span> <span class="n">customers</span><span class="p">.</span><span class="n">customerid</span><span class="p">,</span> <span class="n">customers</span><span class="p">.</span><span class="n">customername</span><span class="p">,</span> <span class="n">orders</span><span class="p">.</span><span class="n">orderdate</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">orders</span>
</span><span class='line'><span class="k">LEFT</span> <span class="k">JOIN</span> <span class="n">customers</span>
</span><span class='line'><span class="k">ON</span> <span class="n">orders</span><span class="p">.</span><span class="n">customerid</span> <span class="o">=</span> <span class="n">customers</span><span class="p">.</span><span class="n">customerid</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="n">orders</span><span class="p">.</span><span class="n">orderid</span><span class="p">,</span> <span class="n">customers</span><span class="p">.</span><span class="n">customerid</span><span class="p">,</span> <span class="n">customers</span><span class="p">.</span><span class="n">customername</span><span class="p">,</span> <span class="n">orders</span><span class="p">.</span><span class="n">orderdate</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">orders</span>
</span><span class='line'><span class="k">RIGHT</span> <span class="k">JOIN</span> <span class="n">customers</span>
</span><span class='line'><span class="k">ON</span> <span class="n">orders</span><span class="p">.</span><span class="n">customerid</span> <span class="o">=</span> <span class="n">customers</span><span class="p">.</span><span class="n">customerid</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>union</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">customerid</span> <span class="k">FROM</span> <span class="n">customers</span>
</span><span class='line'><span class="k">UNION</span>
</span><span class='line'><span class="k">SELECT</span> <span class="n">customerid</span> <span class="k">FROM</span> <span class="n">orders</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">customerid</span>
</span></code></pre></td></tr></table></div></figure>


<h3>TOP</h3>

<p>Display all fields of the last record.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">SELECT</span> <span class="n">top</span> <span class="mi">1</span> <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="k">table_name</span>
</span><span class='line'><span class="n">RODER</span> <span class="k">BY</span> <span class="n">ID</span> <span class="k">DESC</span>
</span><span class='line'>
</span><span class='line'><span class="o">#</span> <span class="n">mysql</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span>
</span><span class='line'><span class="k">FROM</span> <span class="k">table_name</span>
</span><span class='line'><span class="k">ORDER</span> <span class="k">BY</span> <span class="n">field_name</span> <span class="k">DESC</span><span class="o">/</span><span class="k">ASC</span>
</span><span class='line'><span class="k">LIMIT</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">ID</span><span class="p">)</span> <span class="k">AS</span> <span class="n">MAXID</span>
</span><span class='line'><span class="k">FROM</span> <span class="k">table_name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="n">id</span><span class="p">,</span> <span class="n">otherfields</span><span class="p">,</span> <span class="p">...,</span> <span class="p">...</span>
</span><span class='line'><span class="k">FROM</span> <span class="k">table_name</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">id</span><span class="o">=</span><span class="p">(</span><span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">id</span><span class="p">)</span> <span class="k">FROM</span> <span class="k">table</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DCL</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">GRANT</span> <span class="k">SELECT</span><span class="p">,</span> <span class="k">UPDATE</span>
</span><span class='line'><span class="k">ON</span> <span class="n">example</span>
</span><span class='line'><span class="k">TO</span> <span class="n">some_user</span><span class="p">,</span> <span class="n">another_user</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">REVOKE</span> <span class="k">SELECT</span><span class="p">,</span> <span class="k">UPDATE</span>
</span><span class='line'><span class="k">ON</span> <span class="n">example</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">some_user</span><span class="p">,</span> <span class="n">another_user</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>DTL</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">commit</span><span class="p">;</span>
</span><span class='line'><span class="n">savepoint</span><span class="p">;</span>
</span><span class='line'><span class="k">rollback</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<h3>ROLLBACK</h3>

<p>NULL is allowed in a column which is all of the non-null values should be unique.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">trigger</span> <span class="n">mytrigger</span> <span class="k">on</span> <span class="n">t1</span> <span class="k">for</span> <span class="k">insert</span><span class="p">,</span> <span class="k">update</span> <span class="k">as</span>
</span><span class='line'>
</span><span class='line'><span class="k">BEGIN</span>
</span><span class='line'>    <span class="n">IF</span> <span class="p">(</span>
</span><span class='line'>            <span class="k">SELECT</span> <span class="k">MAX</span><span class="p">(</span><span class="n">cnt</span><span class="p">)</span>
</span><span class='line'>            <span class="k">FROM</span> <span class="p">(</span>
</span><span class='line'>                     <span class="k">SELECT</span> <span class="k">COUNT</span><span class="p">(</span><span class="n">i</span><span class="p">.</span><span class="n">c1</span><span class="p">)</span> <span class="k">as</span> <span class="n">cnt</span>
</span><span class='line'>                     <span class="k">FROM</span> <span class="n">t1</span><span class="p">,</span> <span class="n">iinserted</span> <span class="n">i</span>
</span><span class='line'>                     <span class="k">WHERE</span> <span class="n">t1</span><span class="p">.</span><span class="n">c1</span> <span class="o">=</span> <span class="n">i</span><span class="p">.</span><span class="n">c1</span>
</span><span class='line'>                     <span class="k">GROUP</span> <span class="k">BY</span> <span class="n">i</span><span class="p">.</span><span class="n">c1</span>
</span><span class='line'>                 <span class="p">)</span> <span class="n">x</span>
</span><span class='line'>       <span class="p">)</span> <span class="o">&gt;</span> <span class="mi">1</span>
</span><span class='line'>    <span class="k">ROLLBACK</span> <span class="n">TRAN</span>
</span><span class='line'><span class="k">END</span>
</span></code></pre></td></tr></table></div></figure>


<h2>VDL</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">VIEW</span> <span class="ss">&quot;VIEW_NAME&quot;</span> <span class="k">AS</span> <span class="ss">&quot;SQL Statement&quot;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">VIEW</span> <span class="n">V_Customer</span>
</span><span class='line'><span class="k">AS</span> <span class="k">SELECT</span> <span class="n">First_Name</span><span class="p">,</span> <span class="n">Last_Name</span><span class="p">,</span> <span class="n">Country</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">Customer</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">CREATE</span> <span class="k">VIEW</span> <span class="n">V_REGION_SALES</span>
</span><span class='line'><span class="k">AS</span> <span class="k">SELECT</span> <span class="n">A1</span><span class="p">.</span><span class="n">Region_Name</span> <span class="n">REGION</span><span class="p">,</span> <span class="k">SUM</span><span class="p">(</span><span class="n">A2</span><span class="p">.</span><span class="n">Sales</span><span class="p">)</span> <span class="n">SALES</span>
</span><span class='line'><span class="k">FROM</span> <span class="n">Geography</span> <span class="n">A1</span><span class="p">,</span> <span class="n">Store_Information</span> <span class="n">A2</span>
</span><span class='line'><span class="k">WHERE</span> <span class="n">A1</span><span class="p">.</span><span class="n">Store_Name</span> <span class="o">=</span> <span class="n">A2</span><span class="p">.</span><span class="n">Store_Name</span>
</span><span class='line'><span class="k">GROUP</span> <span class="k">BY</span> <span class="n">A1</span><span class="p">.</span><span class="n">Region_Name</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">V_REGION_SALES</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Questions of MongoDB]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/28/interview-questions-of-mongodb/"/>
    <updated>2016-03-28T16:50:08+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/28/interview-questions-of-mongodb</id>
    <content type="html"><![CDATA[<h2>Concepts</h2>

<h3>Define NoSQL.</h3>

<p>A NoSQL database provides a mechanism for storage and retrieval of data that is modeled
in means other than the tabular relations used in relational database (like SQL, Oracle, etc.)</p>

<p>Types of NoSQL databases:</p>

<ul>
<li>key-value: Redis, Memcache</li>
<li>column based: HBase, Cassandra</li>
<li>document: MongoDB, ElasticSearch</li>
<li>Graph: Neo4j</li>
</ul>


<p>Differences between SQL databases and NoSQL databases:</p>

<ul>
<li>SQL databases store data in form of tables, rows, columns and records. This data is stored in a pre-defined data model which is not very much flexible for today&rsquo;s real-world highly growing
applications.</li>
<li>MongoDB uses a flexible structure which can be easily modified and extended. MongoDB allows a
highly flexible and scalable document structure. For example, one data document in MongoDB can have five columns and the other one in the same collection can have ten columns. Also, MongoDB
database are faster as compared to SQL databases due to efficient indexing and storage techniques.</li>
</ul>


<h3>Define MongoDB.</h3>

<p>MongoDB is a document oriented database, it stores data in the form of BSON structure based
documents. These documents are stored in a collection.</p>

<p>Features:</p>

<ul>
<li>flexible data model in form of documents</li>
<li>agile and highly scalable database</li>
<li>faster than traditional databases</li>
<li>expressive query language</li>
</ul>


<h3>Define namespace.</h3>

<p>A namespace is the concatenation of the database name and collection name.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>school.students       # school - database, students - collection</span></code></pre></td></tr></table></div></figure>


<h3>Define ObjectID.</h3>

<p>ObjectID is a 12-byte BSON type with:</p>

<ul>
<li>4 bytes value representing seconds</li>
<li>3 bytes machine identifier</li>
<li>2 bytes process id</li>
<li>3 bytes counter</li>
</ul>


<h2>Database Design</h2>

<h3>Define embeded documents.</h3>

<p>When should consider embeding documents:</p>

<ul>
<li>&lsquo;contains&rsquo; relationships between entities</li>
<li>one-to-many relationships</li>
<li>performance reasons</li>
</ul>


<h2>Database Languages</h2>

<h3>Define indexes.</h3>

<p>Indexes support the efficient execution of queries in MongoDB. Without indexes, MongoDB
must perform a collection scan, i.e., scan every document in a collection, to select those
documents that match the query statement. If an appropriate index exists for a query, MongoDB
can use the index to limit the number of documents it must inspect.</p>

<p>Types of indexes:</p>

<ul>
<li>default index: <code>_id</code></li>
</ul>


<h3>Define queries.</h3>

<ul>
<li>covered query: fields used in the query are part of an index used in the query, the fields
returned in the results are in the same index.</li>
</ul>


<p>Importance of covered query:</p>

<ul>
<li>since all the fields are covered in the index itself, MongoDB can match the query condition
as we&rsquo;ll as return the result fields using the same index without looking inside the documents.
Since indexes are stored in RAM or sequentially located on disk, such access is a lot faster.</li>
</ul>


<p>Types of queries:</p>

<ul>
<li>text-search:</li>
</ul>


<h3>Define operators.</h3>

<ul>
<li>aggregation: processes data records and return computed results. Aggreation operations group
values from multiple documents together, and can perform a variety of operations on the grouped
data to return a signle result. MongoDB provides 3 ways to perform aggregation: the aggregation pipeline, the map-reduce function, and single purpose aggregation methods and commands.</li>
</ul>


<h3>Define transactions.</h3>

<h3>Define lock.</h3>

<p>MongoDB uses reader-writer locks that allow concurrent readers shared access to a resource,
such as a database or collection, but give exclusive access to a single write operation.</p>

<h2>Database Admin</h2>

<h3>Define replication.</h3>

<p>Replication is the process of synchronizing data across multiple servers. Replication provides
redundancy and increases data availability. With multiple copies of data on different database
servers, replication protects a database from the loss of a single server. Replication also
allows you to recover from hardware failure and service interruptions.</p>

<ul>
<li>Primary and master nodes are the nodes that can accept writes. MongoDB&rsquo;s replications is
signle-master: only one node can accept write operations at a time.</li>
<li>Secondary and slave nodes are read-only nodes that replicate from the primary.</li>
</ul>


<h3>Define sharding.</h3>

<p>Sharding is a method for storing data across multiple machines. MongoDB uses sharding to
support deployments with very large data sets and high throughput operations.</p>

<h3>Define GridFS.</h3>

<p>GridFS is a specification for storing and retrieving files that exceed the BSON-document
size limit of 16 MB. Instead of storing a file in a single document, GridFS divides a file
into parts, or chunks, and stores each of those chunks as a separate document.</p>

<h3>Define journaling.</h3>

<p>When running with journaling, MongoDB stores and applies write operations in memory and
in the on-disk journal before the changes are present in the data files on disk.</p>

<p>Writes to the journal are atomic, ensuring the consistency of the on-disk journal files.
With journaling enabled, MongoDB creates a journal subdirectory within the directory defined by
dbPath, which is <code>/data/db</code> by default.</p>

<h2>Database Architecture</h2>

<h3>Define storage engine.</h3>

<p>A storage engine is the part of a database that is responsible for managing how data is
stored on disk. For example, one storage engine might offer better performance for read-heavy
workloads, and another might support a higher-throughput for write operations.</p>

<p>Types of storage engines:</p>

<ul>
<li>WiredTiger: specify the maximum size of the cache that WiredTiger will use for all data. This
can be done using <code>storage.wiredTiger.engineConfig.cacheSizeGB</code> option.</li>
<li>MMAPv1: does not allow configuring the cache size.</li>
</ul>


<h3>Define profiler.</h3>

<p>The database profiler collects fine grained data about MongoDB write operations, cursors,
database commands on a running mongod instance. You can enable profiling on a per-database or
per-instance basis.</p>

<p>The database profiler writes all the data it collects to the system.profile collection, which
is a capped collection.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Interview Questions of RDBMS]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/28/interview-questions-of-rdbms/"/>
    <updated>2016-03-28T16:49:53+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/28/interview-questions-of-rdbms</id>
    <content type="html"><![CDATA[<h2>Concepts</h2>

<h3>Define database.</h3>

<h3>Define data warehousing.</h3>

<p>Storage and access of data from the central location in order to take some strategic decision is
called data warehousing. Enterprise management is used for managing the information whose framework is known as Data Warehousing.</p>

<h2>Database Design</h2>

<h3>Database Modeling.</h3>

<ul>
<li>entities -> relationships -> ERM</li>
<li>attributes -> types</li>
<li>normalization</li>
</ul>


<h3>Enlist the various relationships of database.</h3>

<ul>
<li>one-to-one: single table having drawn relationship with another table having similar kind of columns.</li>
<li>one-to-many: two tables having primary and foreign key relation.</li>
<li>many-to-many: junction table having many tables relatd to many tables.</li>
</ul>


<h3>Define normalization.</h3>

<p>Organized data void of inconsistent dependency and redundancy within a database is called normalization.</p>

<ul>
<li>1NF (attribute):</li>
<li>2NF (record):</li>
<li>3NF (table):</li>
</ul>


<p>Advantages of normalization:</p>

<ul>
<li>non duplicate entries</li>
<li>saves storage space</li>
<li>boasts the query performances</li>
</ul>


<h3>Define denormalization.</h3>

<p>Boosting up database performance, adding of redundant data which in turn helps rid of complex data is called denormalization.</p>

<h2>Database Languages</h2>

<h3>Define DDL.</h3>

<p>Managing properties and attributes of database is called data definition language (DDL).</p>

<ul>
<li>CREATE: create is used in <code>CREATE TABLE [column name] ([ column definitions ]) [table parameters]</code></li>
<li>ALTER: it helps in modification of an existing object of database.</li>
<li>DROP: it destroys an exisiting database, index, table or view.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="p">[</span><span class="k">column</span> <span class="n">name</span><span class="p">]</span> <span class="p">([</span><span class="k">column</span> <span class="n">definitions</span><span class="p">])</span> <span class="p">[</span><span class="k">table</span> <span class="k">parameters</span><span class="p">]</span>
</span><span class='line'><span class="k">ALTER</span> <span class="n">objecttype</span> <span class="n">objectname</span> <span class="k">parameters</span>
</span><span class='line'><span class="k">DROP</span> <span class="n">objecttype</span> <span class="n">objectname</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Define DML.</h3>

<p>Manipulating data in a database such as inserting, updating, deleting is defined as Data Manipulation Language (DML).</p>

<h3>Define cursor.</h3>

<p>A database object which helps in manipulating data row by row representing a result set is called cursor.</p>

<p>cursor types:</p>

<ul>
<li>dynamic: it relects changes while scrolling.</li>
<li>static: doesn&rsquo;t reflect changes while scrolling and works on recording of snapshot.</li>
<li>keyset: data modification without reflection of new data is seen.</li>
</ul>


<p>types of cursor:</p>

<ul>
<li>implicit cursor: declared automatically as soon as the execution of SQL takes place without the wareness of the user.</li>
<li>explicit cursor: defined by PL/SQL which handles query in more than one row.</li>
</ul>


<h3>Define operators.</h3>

<ul>
<li>union all: full recordings of two tables</li>
<li><p>union: a distinct recording of two tables</p></li>
<li><p>group: uses aggregrate values to be derived by collecting similar data.</p></li>
<li><p>aggregation: operates against a collection of values and returning single value</p></li>
<li><p>join: helps in explaining the relation between different tables. They also enable you to select data with relation to data in another table.</p>

<ul>
<li>inner joins: blank rows are left in the middle while more than equal to two tables are joined.</li>
<li>outer joins: devided into left outer join and right outer join. Blank rows are left at the specified side by joining tables in other side.</li>
<li>ohter joins: cross joins, natural joins, equi join, non-equi join.</li>
</ul>
</li>
</ul>


<h3>Define indexes.</h3>

<ul>
<li>non-clustered index: B-tree structure, has data pointers enabling one table many non-clustered indexes.</li>
<li>clustered index: B-tree structure, distinct for every table.</li>
</ul>


<p>Index hunting: Indexes help in improving the speed as well as the query performance of database.
The procedure of boosting the collection of indexes is named as Index hunting.</p>

<ul>
<li>the query optimizer is used to coordinate the study of queries with the workload and the best
use of queries suggested based on this.</li>
<li>Index, query distribution along with their performance is observed to check the effect.
Tuning databases to a small collection of problem queries is also recommended.</li>
</ul>


<h3>Define view.</h3>

<p>Restrictions of views:</p>

<ul>
<li>only the current database can have views.</li>
<li>you have not liable to change any computed value in any particular view.</li>
<li>integrity constants decide the functionality of INSERT and DELETE.</li>
<li>temporary views cannot be created.</li>
<li>temporary tables cannot contain views.</li>
<li>non association with DEFAULT definitions.</li>
<li>triggers such as INSTEAD OF is associated with views.</li>
</ul>


<h3>Define transactions.</h3>

<p>Transaction phases:</p>

<ul>
<li>analysis phase</li>
<li>redo phase</li>
<li>undo phase</li>
</ul>


<p>ACID:</p>

<ul>
<li>Atomicity</li>
<li>Consistence</li>
<li>Isolation</li>
<li>Durability</li>
</ul>


<h2>Database Admin</h2>

<h3>Define partitioning.</h3>

<p>Database partitioning: division of logical database into independent complete units for
improving its management, availability and performance. Splitting of one table which is
large into smaller database entities logically.</p>

<p>The importance of partitioning:</p>

<ul>
<li>to improve query performance in situations dramatically when mostly rows which are heavily
accessed are in one partition.</li>
<li>accessing large parts of a single partition.</li>
<li>slower and cheaper storage media can be used for data which is seldom used.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Sharding]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/24/mongodb-sharding/"/>
    <updated>2016-03-24T10:59:40+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/24/mongodb-sharding</id>
    <content type="html"><![CDATA[<h2>Definitions</h2>

<p>Sharding: sharding is a method for storing data across multiple machines.</p>

<p>Purpose of sharding</p>

<ul>
<li>high query rate -> CPU capacity of the server</li>
<li>larger data sets -> storage capacity of a single machine -> RAM stress, I/O capacity of disk drives</li>
</ul>


<p>Vertical scaling V.S. Sharding</p>

<ul>
<li>vertical scaling: adds more CPU and storage resources to increase capacity. Large numbers of CPUs and large amount of RAM, expensive systems</li>
<li>horizontal scaling (sharding): divides the data set and distributes the data over multiple servers or shards. Each shard is an independent database, and collectively, the shards make up a single logical database.</li>
</ul>


<p>Advantages of sharding:</p>

<ul>
<li>sharding reduces the number of operations each shard handles. Each shard processes fewer operations as the cluster grows. As a result, a cluster can increase capacity and throughput horizontally. For example, to insert data, the application only needs to access the shard responsible for that record.</li>
<li>sharding reduces the amount of data that each server needs to store. Each shard stores less data as the cluster grows. For example, if a database has a 1 terabyte data set, and there are 4 shards, then each shard might hold only 256 GB of data. If there are 40 shards, then each shard might hold only 25GB of data.</li>
</ul>


<p><img src="https://docs.mongodb.org/manual/_images/sharded-collection.png" /></p>

<p>image source: MongoDB official site</p>

<h2>Concepts</h2>

<h3>Shared Clusters</h3>

<ul>
<li>Shards: store the data. To provide high availability and data consistency, in a production sharded cluster, each shard is a replica set.</li>
<li>Query Routers (mongos instances): interface with client applications and direct operations to the appropriate shard or shards. A client sends requests to a mongos, which then routes the operations to the shards and returns the results to the clients. A sharded cluster can contain more than one mongos to divide the client request load, and most sharded clusters have more than one mongos for this reason.</li>
<li>Config Servers: store the cluster&rsquo;s metadata. This data contains a mapping of the clusters&rsquo;s data set to the shards. The query router uses this metadata to target operations to specific shards.</li>
</ul>


<p><img src="https://docs.mongodb.org/manual/_images/sharded-cluster.png" /></p>

<p>image source: MongoDB official site</p>

<h3>Shards: Data Partitioning</h3>

<p>MongoDB distributes data, or shards, at the collection level. Sharding partitions a collection&rsquo;s data by the shard key.</p>

<ul>
<li>Shard key: A shard key is either an indexed field or an indexed compound field that exists in every document in the collection. {key: value} &ndash;> chunks (ranged/hash based partitioning)</li>
<li>ranged based sharding: documents with &ldquo;close&rdquo; shard key values are likely to be in the same chuck, and therefore on the same shard. The query router can easily determine which chunks overlap that range and route the query to only those shards that contain these chunks.</li>
<li>hash based sharding: two documents with &ldquo;close&rdquo; shard key values are unlikely to be part of the same chuck. This ensures a more random distribution of a collection in the cluster. Hash key values results in random distribution of data across chunks and therefore shards. But random distribution makes it more likely that a range query on the shard key will not be able to target a few shards but would more likely query every shard in order to return a result.</li>
</ul>


<p><img src="https://docs.mongodb.org/manual/_images/sharding-range-based.png" /></p>

<p>image source: MongoDB official site</p>

<p><img src="https://docs.mongodb.org/manual/_images/sharding-hash-based.png" /></p>

<p>image source: MongoDB official site</p>

<h3>Config Servers: Balanced Data Distribution</h3>

<ul>
<li>splitting: splitting is a background process that keeps chunks from growing too large. When a chunk grows beyond a specified chunk size, MongoDB splits the chunk in half. Inserts and updates triggers splits. Splits are an efficient meta-data change. To create splits, MongoDB does not migrate any data or affect eh shards.</li>
<li>balancer: the balancer is a background process that manages chunk migrations. The balancer can run from any of the mongos instances in a cluster. For example, if collection users has 100 chunks on shard 1 and 50 chunks on shard 2, the balancer will migrate chunks from shard 1 to shard 2 until the collection achieves balance.</li>
</ul>


<p><img src="https://docs.mongodb.org/manual/_images/sharding-splitting.png" /></p>

<p>image source: MongoDB official site</p>

<p><img src="https://docs.mongodb.org/manual/_images/sharding-migrating.png" /></p>

<p>image source: MongoDB official site</p>

<h3>Query Routers: Query Routing</h3>

<p>Routing process</p>

<ul>
<li>(mongos -> shards)</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>shard key:
</span><span class='line'>
</span><span class='line'>{ zipcode: 1, u_id: 1, c_date: 1 }
</span><span class='line'>
</span><span class='line'>targeting:
</span><span class='line'>
</span><span class='line'>{ zipcode: 1 }
</span><span class='line'>{ zipcode: 1, u_id: 1 }
</span><span class='line'>{ zipcode: 1, u_id: 1, c_date: 1 }
</span></code></pre></td></tr></table></div></figure>


<p>detect connection</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>db.isMaster()
</span><span class='line'>
</span><span class='line'>{
</span><span class='line'>   "ismaster" : true,
</span><span class='line'>   "msg" : "isdbgrid",
</span><span class='line'>   "maxBsonObjectSize" : 16777216,
</span><span class='line'>   "ok" : 1
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>broadcast operations and targeted operations</p>

<p><img src="https://docs.mongodb.org/manual/_images/sharded-cluster-scatter-gather-query.png" /></p>

<p>image source: MongoDB official site</p>

<p><img src="https://docs.mongodb.org/manual/_images/sharded-cluster-targeted-query.png" /></p>

<p>image source: MongoDB official site</p>

<p>shared and non-shared data</p>

<p><img src="https://docs.mongodb.org/manual/_images/sharded-cluster-mixed.png" /></p>

<p>image source: MongoDB official site</p>

<h2>Tutorials</h2>

<h3>Deployment</h3>

<h3>Maintenance</h3>

<h3>Management</h3>

<h2>Reference</h2>

<ul>
<li><a href="https://docs.mongodb.org/manual/core/sharding-introduction/">Sharding</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Replication]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/24/mongodb-replication/"/>
    <updated>2016-03-24T10:59:23+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/24/mongodb-replication</id>
    <content type="html"><![CDATA[<h2>Definitions</h2>

<p>Replication is the process of synchronizing data across multiple servers.</p>

<p>Purposes of replication</p>

<ul>
<li>provides redundancy and increases data availability. With multiple copies of data on different database servers, replication provides a level of fault tolerance against the loss of a signle database server.</li>
<li>provides increased read capacity as clients can send read operations to different servers. Maintaining copies of data in different data centers can increase data locality and availability for distributed applications.</li>
<li>dedicated purposes, such as disaster recovery, reporting, or backup.</li>
</ul>


<h2>Concepts</h2>

<h3>Replica Set: Members</h3>

<h3>Replica Set: Deployment Architectures</h3>

<h3>Replica Set: High Availability</h3>

<h3>Replica Set: Read and Write Senmantics</h3>

<p><img src="https://docs.mongodb.org/manual/_images/crud-write-concern-w2.png" /></p>

<p>image source: MongoDB official site</p>

<p><img src="https://docs.mongodb.org/manual/_images/replica-set-read-preference.png" /></p>

<p>image source: MongoDB official site</p>

<h3>Replication Processes</h3>

<h3>Master Slave Replication</h3>

<h2>Tutorials</h2>

<h2>Reference</h2>

<ul>
<li><a href="https://docs.mongodb.org/manual/core/replication-introduction/">Replication</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Security]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/24/mongodb-security/"/>
    <updated>2016-03-24T10:59:17+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/24/mongodb-security</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Storage]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/24/mongodb-storage/"/>
    <updated>2016-03-24T10:59:08+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/24/mongodb-storage</id>
    <content type="html"><![CDATA[<h2>Definitions</h2>

<ul>
<li>storage engine: the primary component of MongoDB responsible for managing data.</li>
<li>journal: a log that helps the database recover in the event of a hard shutdown.</li>
<li>GridFS: a versatile storage system that is suited to handling large files, such as those exceeding the 16 MB document size limit.</li>
</ul>


<h2>Concepts</h2>

<h3>Storage Engine</h3>

<ul>
<li>WiredTiger: the default storage engine. It is well-suited for most workloads and is recommended for new deployments. WiredTiger provides a document-level concurrency model, checkpointing, and compression, among other features.</li>
<li>MMAPv1: the original storage engine. It performs well on workloads with high volumes of reads and writes, as well as in-place updates.</li>
<li>In-Memory Storage Engine: rather than storing documents on-disk, it retains them in-memory for more predictable data latencies. This storage engine is in beta.</li>
</ul>


<h3>Journal</h3>

<h3>GridFS</h3>

<h2>Tutorials</h2>

<h2>Reference</h2>

<ul>
<li><a href="https://docs.mongodb.org/manual/storage/">Storage</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Indexes]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/24/mongodb-indexes/"/>
    <updated>2016-03-24T10:59:00+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/24/mongodb-indexes</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Administration]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/24/mongodb-administration/"/>
    <updated>2016-03-24T10:58:48+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/24/mongodb-administration</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Data Model]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/24/mongodb-data-model/"/>
    <updated>2016-03-24T10:58:18+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/24/mongodb-data-model</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB Aggregation]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/24/mongodb-aggregation/"/>
    <updated>2016-03-24T10:58:12+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/24/mongodb-aggregation</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB CRUD]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/24/mongodb-crud/"/>
    <updated>2016-03-24T10:49:19+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/24/mongodb-crud</id>
    <content type="html"><![CDATA[<h2>Definitions</h2>

<ul>
<li>BSON: BSON is a binary representation of JSON with additional type information.</li>
<li>Document (record): a record with {key, value}</li>
<li>Collection (table): a collection is a group of related documents that have a set of shared common indexes.</li>
</ul>


<p><img src="https://docs.mongodb.org/manual/_images/crud-query-stages.png" /></p>

<p>image source: MongoDB official site</p>

<p><img src="https://docs.mongodb.org/manual/_images/crud-insert-stages.png" /></p>

<p>image source: MongoDB official site</p>

<h2>Concepts</h2>

<h3>Read</h3>

<ul>
<li>query interface</li>
<li>query behavior</li>
<li>query statement</li>
<li>query projection</li>
<li>cursors</li>
</ul>


<p><img src="https://docs.mongodb.org/manual/_images/crud-annotated-mongodb-find.png" /></p>

<p>image source: MongoDB official site</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">users</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span> <span class="p">{</span> <span class="nx">age</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$gt</span><span class="o">:</span> <span class="mi">18</span> <span class="p">}</span> <span class="p">},</span> <span class="p">{</span> <span class="nx">name</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="nx">address</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">).</span><span class="nx">limit</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p><img src="https://docs.mongodb.org/manual/_images/crud-query-stages.png" /></p>

<p>image source: MongoDB official site</p>

<p>Projection</p>

<p><img src="https://docs.mongodb.org/manual/_images/crud-query-w-projection-stages.png" /></p>

<p>image source: MongoDB official site</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">records</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span> <span class="p">{</span> <span class="s2">&quot;user_id&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$lt</span><span class="o">:</span> <span class="mi">42</span> <span class="p">}</span> <span class="p">},</span> <span class="p">{</span> <span class="s2">&quot;history&quot;</span><span class="o">:</span> <span class="mi">0</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">records</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span> <span class="p">{</span> <span class="s2">&quot;user_id&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$lt</span><span class="o">:</span> <span class="mi">42</span> <span class="p">}</span> <span class="p">},</span> <span class="p">{</span> <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="mi">1</span><span class="p">,</span> <span class="s2">&quot;email&quot;</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">records</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span> <span class="p">{</span> <span class="s2">&quot;user_id&quot;</span><span class="o">:</span> <span class="p">{</span> <span class="nx">$lt</span><span class="o">:</span> <span class="mi">42</span><span class="p">}</span> <span class="p">},</span> <span class="p">{</span> <span class="s2">&quot;_id&quot;</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span> <span class="s2">&quot;name&quot;</span><span class="o">:</span> <span class="mi">1</span> <span class="p">,</span> <span class="s2">&quot;email&quot;</span><span class="o">:</span> <span class="mi">1</span> <span class="p">}</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Write</h3>

<h2>Tutorials</h2>

<h2>Reference</h2>

<ul>
<li><a href="https://docs.mongodb.org/manual/core/crud-introduction/">MongoDB CRUD Operations</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mongo Shell]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/24/mongo-shell/"/>
    <updated>2016-03-24T09:54:30+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/24/mongo-shell</id>
    <content type="html"><![CDATA[<h2>What is Mongo Shell</h2>

<p>The Mongo Shell is an interactive Javascript interface to MongoDB.</p>

<p>How to user Mongo Shell:</p>

<ul>
<li>query and update data</li>
<li>perform administrative operations</li>
</ul>


<h3>Start Shell</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ mongo
</span><span class='line'>&gt; show dbs
</span><span class='line'>&gt; use &lt;dbname&gt;
</span><span class='line'>&gt; db.&lt;mycollection&gt;.insert({&lt;key&gt;: &lt;value&gt;});
</span><span class='line'>&gt; db[&lt;mycollection&gt;].find();
</span><span class='line'>&gt; db.getCollection(&lt;mycollection&gt;).find();
</span><span class='line'>&gt; db.&lt;mycollection&gt;.find().pretty();
</span><span class='line'>&gt; quit()</span></code></pre></td></tr></table></div></figure>


<h2>Customizing Mongo Shell</h2>

<ul>
<li>config file: <code>.mongorc.js</code></li>
</ul>


<p>display # of operations</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">cmdCount</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'><span class="nx">prompt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">return</span> <span class="p">(</span><span class="nx">cmdCount</span><span class="o">++</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot;&gt; &quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="mi">1</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">2</span><span class="o">&gt;</span>
</span><span class='line'><span class="mi">3</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>display database and hostname</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">host</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">serverStatus</span><span class="p">().</span><span class="nx">host</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">prompt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>             <span class="k">return</span> <span class="nx">db</span><span class="o">+</span><span class="s2">&quot;@&quot;</span><span class="o">+</span><span class="nx">host</span><span class="o">+</span><span class="s2">&quot;$ &quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="err">@</span><span class="nx">myHost1$</span>
</span></code></pre></td></tr></table></div></figure>


<p>display up time and document count</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">prompt</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>           <span class="k">return</span> <span class="s2">&quot;Uptime:&quot;</span><span class="o">+</span><span class="nx">db</span><span class="p">.</span><span class="nx">serverStatus</span><span class="p">().</span><span class="nx">uptime</span><span class="o">+</span><span class="s2">&quot; Documents:&quot;</span><span class="o">+</span><span class="nx">db</span><span class="p">.</span><span class="nx">stats</span><span class="p">().</span><span class="nx">objects</span><span class="o">+</span><span class="s2">&quot; &gt; &quot;</span><span class="p">;</span>
</span><span class='line'>         <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Uptime</span><span class="o">:</span><span class="mi">5897</span> <span class="nx">Documents</span><span class="o">:</span><span class="mi">6</span> <span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>editor and batch size</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># editor</span>
</span><span class='line'><span class="nb">export </span><span class="nv">EDITOR</span><span class="o">=</span>vim
</span><span class='line'>mongo
</span><span class='line'>
</span><span class='line'><span class="c"># batch size</span>
</span><span class='line'>DBQuery.shellBatchSize <span class="o">=</span> 10<span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Shell Help</h2>

<ul>
<li>command line</li>
<li>shell</li>
<li>database</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># command line</span>
</span><span class='line'>&gt; mongo --help
</span><span class='line'>
</span><span class='line'><span class="c"># shell</span>
</span><span class='line'>&gt; <span class="nb">help</span>
</span></code></pre></td></tr></table></div></figure>


<p>database help</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># mongo</span>
</span><span class='line'>&gt; show dbs
</span><span class='line'>&gt; db.help<span class="o">()</span>
</span><span class='line'>&gt; db.updateUser
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="c"># collections</span>
</span><span class='line'>&gt; show collections
</span><span class='line'>&gt; db.collection.help<span class="o">()</span>
</span><span class='line'>&gt; db.collection.save
</span><span class='line'>
</span><span class='line'><span class="c"># cursor</span>
</span><span class='line'>&gt; db.collection.find<span class="o">()</span>.help<span class="o">()</span>
</span><span class='line'>&gt; db.collection.find<span class="o">()</span>.toArray
</span><span class='line'>
</span><span class='line'><span class="c"># wrapper object</span>
</span><span class='line'>&gt; <span class="nb">help </span>misc
</span></code></pre></td></tr></table></div></figure>


<h2>Scripting</h2>

<p>sripts: <code>*.js</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">new</span> <span class="nx">Mongo</span><span class="p">()</span>
</span><span class='line'><span class="k">new</span> <span class="nx">Mongo</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">host</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'><span class="k">new</span> <span class="nx">Mongo</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">host</span><span class="o">:</span><span class="nx">port</span><span class="o">&gt;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">conn</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Mongo</span><span class="p">();</span>
</span><span class='line'><span class="nx">db</span> <span class="o">=</span> <span class="nx">conn</span><span class="p">.</span><span class="nx">getDB</span><span class="p">(</span><span class="s2">&quot;myDatabase&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">db</span> <span class="o">=</span> <span class="nx">connect</span><span class="p">(</span><span class="s2">&quot;localhost:27020/myDatabase&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">cursor</span> <span class="o">=</span> <span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">find</span><span class="p">();</span>
</span><span class='line'><span class="k">while</span> <span class="p">(</span> <span class="nx">cursor</span><span class="p">.</span><span class="nx">hasNext</span><span class="p">()</span> <span class="p">)</span> <span class="p">{</span>
</span><span class='line'>   <span class="nx">printjson</span><span class="p">(</span> <span class="nx">cursor</span><span class="p">.</span><span class="nx">next</span><span class="p">()</span> <span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>how to run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>&gt; mongo <span class="nb">test</span> --eval <span class="s2">&quot;printjson(db.getCollectionNames())&quot;</span>
</span><span class='line'>&gt; mongo localhost:27017/test myjsfile.js
</span><span class='line'>&gt; load<span class="o">(</span><span class="s2">&quot;myjstest.js&quot;</span><span class="o">)</span>
</span><span class='line'>&gt; load<span class="o">(</span><span class="s2">&quot;scripts/myjstest.js&quot;</span><span class="o">)</span>
</span><span class='line'>&gt; load<span class="o">(</span><span class="s2">&quot;/data/db/scripts/myjstest.js&quot;</span><span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Data Types</h2>

<p>Date</p>

<ul>
<li>Date() method which returns the current date as a string.</li>
<li>new Date() constructor which returns a Date object using the ISODate() wrapper.</li>
<li>ISODate() constructor which returns a Date object using the ISODate() wrapper.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">myDateString</span> <span class="o">=</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">myDateString</span>
</span><span class='line'><span class="nx">Wed</span> <span class="nx">Dec</span> <span class="mi">19</span> <span class="mi">2012</span> <span class="mi">01</span><span class="o">:</span><span class="mi">03</span><span class="o">:</span><span class="mi">25</span> <span class="nx">GMT</span><span class="o">-</span><span class="mi">0500</span> <span class="p">(</span><span class="nx">EST</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="k">typeof</span> <span class="nx">myDateString</span>
</span><span class='line'>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">myDate</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">();</span>
</span><span class='line'><span class="o">&gt;</span> <span class="kd">var</span> <span class="nx">myDateInitUsingISODateWrapper</span> <span class="o">=</span> <span class="nx">ISODate</span><span class="p">();</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">myDate</span>
</span><span class='line'><span class="nx">ISODate</span><span class="p">(</span><span class="s2">&quot;2012-12-19T06:01:17.171Z&quot;</span><span class="p">)</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">myDate</span> <span class="k">instanceof</span> <span class="nb">Date</span>
</span><span class='line'><span class="o">&gt;</span> <span class="nx">myDateInitUsingISODateWrapper</span> <span class="k">instanceof</span> <span class="nb">Date</span>
</span></code></pre></td></tr></table></div></figure>


<p>ObjectId</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">new</span> <span class="nx">ObjectId</span>
</span></code></pre></td></tr></table></div></figure>


<p>NumberLong</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">NumberLong</span><span class="p">(</span><span class="s2">&quot;2090845886852&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">insert</span><span class="p">(</span> <span class="p">{</span> <span class="nx">_id</span><span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="nx">calc</span><span class="o">:</span> <span class="nx">NumberLong</span><span class="p">(</span><span class="s2">&quot;2090845886852&quot;</span><span class="p">)</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span> <span class="p">{</span> <span class="nx">_id</span><span class="o">:</span> <span class="mi">10</span> <span class="p">},</span>
</span><span class='line'>                      <span class="p">{</span> <span class="nx">$set</span><span class="o">:</span>  <span class="p">{</span> <span class="nx">calc</span><span class="o">:</span> <span class="nx">NumberLong</span><span class="p">(</span><span class="s2">&quot;2555555000000&quot;</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span> <span class="p">{</span> <span class="nx">_id</span><span class="o">:</span> <span class="mi">10</span> <span class="p">},</span>
</span><span class='line'>                      <span class="p">{</span> <span class="nx">$inc</span><span class="o">:</span> <span class="p">{</span> <span class="nx">calc</span><span class="o">:</span> <span class="nx">NumberLong</span><span class="p">(</span><span class="mi">5</span><span class="p">)</span> <span class="p">}</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">db</span><span class="p">.</span><span class="nx">collection</span><span class="p">.</span><span class="nx">findOne</span><span class="p">(</span> <span class="p">{</span> <span class="nx">_id</span><span class="o">:</span> <span class="mi">10</span> <span class="p">}</span> <span class="p">)</span>
</span><span class='line'><span class="p">{</span> <span class="s2">&quot;_id&quot;</span> <span class="o">:</span> <span class="mi">10</span><span class="p">,</span> <span class="s2">&quot;calc&quot;</span> <span class="o">:</span> <span class="nx">NumberLong</span><span class="p">(</span><span class="s2">&quot;2555555000005&quot;</span><span class="p">)</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>typeof</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">mydoc</span><span class="p">.</span><span class="nx">_id</span> <span class="k">instanceof</span> <span class="nx">ObjectId</span>
</span><span class='line'><span class="k">typeof</span> <span class="nx">mydoc</span><span class="p">.</span><span class="nx">_id</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reference</h2>

<ul>
<li><a href="https://docs.mongodb.org/manual/mongo/">The Mongo Shell</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Seasons]]></title>
    <link href="http://k.arttechresearch.com/art/2016/03/22/seasons/"/>
    <updated>2016-03-22T22:16:16+08:00</updated>
    <id>http://k.arttechresearch.com/art/2016/03/22/seasons</id>
    <content type="html"><![CDATA[<p><img src="https://s-media-cache-ak0.pinimg.com/originals/53/78/84/53788414461813a74bfe06e12c81571d.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/originals/4f/d1/37/4fd13713eb31f2845ff3271c0f2aae5a.jpg" /></p>

<p>Tool: Autodesk Pixlr</p>
]]></content>
  </entry>
  
</feed>
