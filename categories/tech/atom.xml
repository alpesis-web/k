<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | K]]></title>
  <link href="http://k.arttechresearch.com/categories/tech/atom.xml" rel="self"/>
  <link href="http://k.arttechresearch.com/"/>
  <updated>2015-11-17T23:57:53+08:00</updated>
  <id>http://k.arttechresearch.com/</id>
  <author>
    <name><![CDATA[K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Connecting to MSSQL Using FreeTDS / ODBC in Python]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/11/15/connecting-to-mssql-using-freetds-slash-odbc-in-python/"/>
    <updated>2015-11-15T21:23:21+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/11/15/connecting-to-mssql-using-freetds-slash-odbc-in-python</id>
    <content type="html"><![CDATA[<h2>Prequisitions</h2>

<ul>
<li>OS: Debian 7.8</li>
<li>Dependencies: freetds-dev, freetd-bin, unixodbc-dev, tdsodbc</li>
<li>Python packages: pyodbc, sqlalchemy</li>
</ul>


<h2>Steps</h2>

<p>Installing the dependencies</p>

<pre><code class="bash">$ sudo apt-get install freetds-dev freetds-bin unixodbc-dev tdsodbc
$ pip install pyodbc sqlalchemy
</code></pre>

<p>Configuring <code>/etc/odbcinst.ini</code></p>

<pre><code class="bash /etc/odbcinst.ini">[FreeTDS]
Description     = TDS driver (Sybase/MS SQL)
Driver          = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so
Setup           = /usr/lib/x86_64-linux-gnu/odbc/libtdsS.so
CPTimeout       =
CPReuse         =
UsageCount      = 1
</code></pre>

<p>Configuring <code>/etc/freetds/freetds.conf</code></p>

<pre><code class="bash /etc/freetds/freetds.conf">[global]
    port = 1433
    tds version = 7.0
</code></pre>

<p>Testing</p>

<pre><code class="bash">$ tsql -H host_name -p 3688 -U user_name
</code></pre>

<h3>example: pyodbc</h3>

<pre><code class="python">import pyodbc


def connect_db(HOST, DATABASE, UID, PWD, TDS_Version):

    connection = pyodbc.connect('DRIVER=FreeTDS; \
                             SERVER=HOST; \
                             PORT=1433; \
                             DATABASE=DATABASE; \
                             UID=UID; \
                             PWD=PWD; \
                             TDS_Version=8.0;')

    cursor = connection.cursor()
    return cursor

def query_data(cursor, query):

    for row in cursor.execute(query):
        print row

if __name__ = '__main__':

    HOST = ''                         # server
    DATABASE = ''                     # database_name
    UID = ''                          # user_name
    PWD = ''                          # password
    TDS_Version = ''                  # TDS_Version

    cursor = connect_db(HOST, DATABASE, UID, PWD, TDS_Version)
    query_data(cursor, 'select 6 * 7 as [Result];')
</code></pre>

<h3>example: sqlalchemy</h3>

<pre><code class="python">
import urllib
from sqlalchemy import create_engine

def connect_db(HOST, DATABASE, UID, PWD, TDS_Version):

    db_settings = 'DRIVER=FreeTDS; \
                   SERVER=%s; \
                   PORT=1433; \
                   DATABASE=%s; \
                   UID=%s; \
                   PWD=%s; \
                   TDS_Version=%s'.format(HOST, DATABASE, UID, PWD, TDS_Version)
    engine = create_engine('mssql+pyodbc:///?odbc_connect' + urllib.quote_plus(db_settings))

    return engine

def query_db(engine, query):

    for row in engine.excute(query):
        print row

if __name__ = '__main__':

    HOST = ''                         # server
    DATABASE = ''                     # database_name
    UID = ''                          # user_name
    PWD = ''                          # password
    TDS_Version = ''                  # TDS_Version

    engine = connect_db(HOST, DATABASE, UID, PWD, TDS_Version)
    query_data(engine, 'select 6 * 7 as [Result];')
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating a Self-Signed SSL Certificate]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/11/09/generating-a-self-signed-ssl-certificate/"/>
    <updated>2015-11-09T22:59:53+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/11/09/generating-a-self-signed-ssl-certificate</id>
    <content type="html"><![CDATA[<h2>Prequistion</h2>

<p>openssl</p>

<pre><code class="bash">$ which openssl

# OS X
$ brew install openssl

# Ubuntu
$ sudo apt-get install openssl
</code></pre>

<h2>1. Private key and certificate signing request</h2>

<pre><code class="bash">$ openssl genrsa -des3 -passout pass:x -out server.pass.key 2048
$ openssl rsa -passin pass:x -in server.pass.key -out server.key
$ rm server.pass.key
$ openssl req -new -key server.key -out server.csr
</code></pre>

<h2>2. SSL Certificate</h2>

<pre><code class="bash">$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Challenge L4]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/11/08/python-challenge-l4/"/>
    <updated>2015-11-08T21:30:05+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/11/08/python-challenge-l4</id>
    <content type="html"><![CDATA[<p><a href="">Python Challenge</a></p>

<h2>L4. Linkedlist</h2>

<p><a href="http://www.pythonchallenge.com/pc/def/linkedlist.php">L4</a></p>

<p>urllib may help. DON&rsquo;T TRY ALL NOTHINGS, since it will never end. 400 times is more than enough.</p>

<pre><code class="python linkedlist.py">import urllib

def get_param(param_value):
    """Return the nothing_value from the specific url
    """

    param = urllib.urlencode({'nothing': param_value})
    url = "http://www.pythonchallenge.com/pc/def/linkedlist.php?%s" % param
    content = urllib.urlopen(url).read()
    # split the content by " " and return the last word
    value = content.split(" ")[-1]

    return value


if __name__ == '__main__':

    init_value = "12345"
    param = get_param(init_value)
    while param &gt; 0:
        print param
        param = get_param(param)
</code></pre>

<p>The figures are repeating, but once <code>peak.html</code> occurs, update the url with
<code>peak.html</code>, then jump to L5.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Challenge L3]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/11/07/python-challenge-l3/"/>
    <updated>2015-11-07T20:35:25+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/11/07/python-challenge-l3</id>
    <content type="html"><![CDATA[<p><a href="">Python Challenge</a></p>

<h2>L3. Equality</h2>

<p><a href="http://www.pythonchallenge.com/pc/def/equality.html">L3</a></p>

<p>One small letter, surrounded by EXACTLY three big bodyguards on each of its
sides.</p>

<pre><code class="python equality.py">import re

def search_equality(text):
    """ Return the letter if that matches the pattern, else return None
    """

    # pattern: [1 lower](3 uppers)[1 lower](3 uppers)[1 lower], e.g.: aBBDiLDMx
    pattern = "[a-z][A-Z][A-Z][A-Z][a-z][A-Z][A-Z][A-Z][a-z]"
    equality = re.search(pattern, text)
    if equality:
        # just return the lowercase on the position 5 (index[4])
        return equality.group()[4]
    else:
        return None

if __name__ == '__main__':

    text_path = "./data/3_equality.txt"

    equalities = []
    text = open(text_path, 'r')
    for line in text.readlines():
        # search the letters those matching the patterns
        equality = search_equality(line.strip())
        # just append the valid letters, None exclusive
        equalities.append(equality) if equality is not None else equalities
    text.close()

    print ''.join(letter for letter in equalities)
</code></pre>

<p>output</p>

<pre><code class="python equality ouptut">linkedlist
</code></pre>

<p>Update the url with <code>linkedlist</code>, then jump to a new page with <code>linkedlist.php</code>,
update the url with <code>linkedlist.php</code>, then jump to L4.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configurating Colortheme for iTerm]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/11/05/configurating-colortheme-for-iterm/"/>
    <updated>2015-11-05T23:08:34+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/11/05/configurating-colortheme-for-iterm</id>
    <content type="html"><![CDATA[<p>The colortheme files of iTerm is <code>*.itermcolors</code>, everyone can create or update a colortheme and
then import it to iTerm. Alternatively, you can download the colorthemes which are shared in
public and then update them in iTerm.</p>

<p>If Vim is set as the editor, it would be better to keep the colortheme as the same as iTerm.</p>

<h2>1. Colorthemes</h2>

<pre><code class="bash">$ git clone git://github.com/altercation/solarized.git
$ git clone https://github.com/mbadolato/iTerm2-Color-Schemes.git
</code></pre>

<h2>2. iTerm</h2>

<ul>
<li>iTerm -> Preferences -> Profiles -> Colors -> Load Presets -> import</li>
</ul>


<p>import the colorthemes</p>

<ul>
<li>if solarized: iterm2-colors-soloarized</li>
<li>if iTerm2-Color-Schemes: <code>*.itermcolors</code></li>
</ul>


<h2>3. .bash_profile</h2>

<pre><code class="bash">$ brew install coreutils
$ vim ~/.bash_profile             # add export clicolor
$ source ~/.bash_profile
</code></pre>

<p>.bash_profile</p>

<pre><code class="bash">export CLICOLOR=1
</code></pre>

<p>Preview</p>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/d7/ba/d3/d7bad3e5432d03d2330b88f49dc4b488.jpg" /></p>

<h2>4. vim</h2>

<pre><code class="bash"># copy the colorscheme
$ mkdir ~/.vim/colors
$ cd ~/.vim/colors
$ cp /path/to/solarized/vim-colors-solarized/colors/solarized.vim ./

# update the .vimrc
$ vim ~/.vimrc
</code></pre>

<p>.vimrc</p>

<pre><code class="bash">syntax enable
set background=dark
colorscheme solarized
</code></pre>

<p>Preview</p>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/31/f1/93/31f19309e06e9affcd25b81f0b8ddc06.jpg" /></p>
]]></content>
  </entry>
  
</feed>
