<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | K]]></title>
  <link href="http://k.arttechresearch.com/categories/tech/atom.xml" rel="self"/>
  <link href="http://k.arttechresearch.com/"/>
  <updated>2016-02-28T16:48:00+08:00</updated>
  <id>http://k.arttechresearch.com/</id>
  <author>
    <name><![CDATA[K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing Caffe on Ubuntu With VirtualBox]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/02/27/installing-caffe-on-ubuntu-with-virtualbox/"/>
    <updated>2016-02-27T22:47:46+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/02/27/installing-caffe-on-ubuntu-with-virtualbox</id>
    <content type="html"><![CDATA[<h2>Ubuntu + VirtualBox</h2>

<ul>
<li>download Ubuntu ISO file</li>
<li>create a new VM in VirtualBox (Linux/Ubuntu/64bit/DynamicHD/8GbRAM/â€¦)</li>
<li>install Ubuntu OS and update and upgrade</li>
</ul>


<pre><code class="bash">$ sudo apt-get install build-essential
$ sudo apt-get install linux-headers-`uname -r`
</code></pre>

<p>VirtualBox</p>

<ul>
<li>VirtualBox ToolBar -> Devices -> Insert Guest Additions CD Image -> Install GuestAddition</li>
<li>VirtualBox VM -> Preferences -> General -> Advanced -> Shared Clipboard</li>
</ul>


<h2>Cuda</h2>

<p><a href="https://developer.nvidia.com/cuda-downloads">CUDA 7.5</a></p>

<pre><code class="bash">$ sudo apt-get install curl
$ cd ~/Downloads/
$ curl -O "http://developer.download.nvidia.com/compute/cuda/6_5/rel/installers/cuda_6.5.14_linux_64.run"
$ chmod +x cuda_6.5.14_linux_64.run
$ sudo ./cuda_6.5.14_linux_64.run --kernel-source-path=/usr/src/linux-headers-`uname -r`/
# - Accept the EULA
# - DO NOT INSTALL DRIVER
# - Install the toolkit
# - Install the symbolic link
# - Install samples

$ echo 'export PATH=/usr/local/cuda/bin:$PATH' &gt;&gt; ~/.bashrc
$ echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib' &gt;&gt; ~/.bashrc
$ source ~/.bashrc
</code></pre>

<h2>Caffe</h2>

<pre><code class="bash">$ sudo apt-get install -y libprotobuf-dev libleveldb-dev libsnappy-dev libopencv-dev libboost-all-dev libhdf5-serial-dev protobuf-compiler gfortran libjpeg62 libfreeimage-dev libatlas-base-dev git python-dev python-pip libgoogle-glog-dev libbz2-dev libxml2-dev libxslt-dev libffi-dev libssl-dev libgflags-dev liblmdb-dev python-yaml
$ sudo easy_install pillow

$ cd ~
$ git clone https://github.com/BVLC/caffe.git
$ cd caffe
$ cat python/requirements.txt | xargs -L 1 sudo pip install
$ sudo ln -s /usr/include/python2.7/ /usr/local/include/python2.7
$ sudo ln -s /usr/local/lib/python2.7/dist-packages/numpy/core/include/numpy/ /usr/local/include/python2.7/numpy

$ cp Makefile.config.example Makefile.config
$ nano Makefile.config
# - uncomment # CPU_ONLY := 1
# - PYTHON_INCLUDE: 
#   - /usr/include/python2.7 -&gt; /usr/local/include/python2.7
#   - /usr/lib/python2.7/dist-packages/numpy/core/include -&gt; /usr/local/lib/python2.7/dist-packages/numpy/core/include


$ make pycaffe
$ make all
$ make test
# if something error, then it could not recompile, try to delete build and .build_release
# and then rerun the commands
# or use `make clean`
</code></pre>

<h2>Reference</h2>

<p><a href="https://github.com/BVLC/caffe/wiki/Ubuntu-14.04-VirtualBox-VM">Ubuntu 14.04 VirtualBox VM</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing OpenCV on Ubuntu]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/02/25/installing-opencv-on-ubuntu/"/>
    <updated>2016-02-25T18:59:03+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/02/25/installing-opencv-on-ubuntu</id>
    <content type="html"><![CDATA[<p>Installation Steps:</p>

<ul>
<li>Dependencies</li>
<li>Python</li>
<li>OpenCV</li>
<li>Test</li>
</ul>


<h2>Dependencies</h2>

<pre><code class="bash">$ # update os
$ sudo apt-get update
$ sudo apt-get upgrade

$ # update devtools
$ sudo apt-get install build-essential cmake git pkg-config

$ # image I/O dependencies
$ sudo apt-get install libjpeg8-dev libtiff4-dev libjasper-dev libpng12-dev

$ # highgui dependencies
$ sudo apt-get install libgtk2.0-dev

$ # video dependencies
$ sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev

$ # opencv optimization dependencies
$ sudo apt-get install libatlas-base-dev gfortran
</code></pre>

<h2>Python</h2>

<pre><code class="bash">$ # pip and virtualenv
$ sudo apt-get install python-pip
$ sudo pip install virtualenv virtualenvwrapper
$ vim ~/.bashrc
$ #######################################
$ # virtualenv and virtualenvwrapper
$ export WORKON_HOME=$HOME/.virtualenvs
$ source /usr/local/bin/virtualenvwrapper.sh
$ #######################################
$ source ~/.bashrc
$ mkvirtualenv cv
$ sudo apt-get install python2.7-dev
$ pip install numpy
</code></pre>

<h2>OpenCV</h2>

<pre><code class="bash">$ # opencv
$ cd ~
$ git clone https://github.com/Itseez/opencv.git
$ cd opencv
$ git checkout 3.0.0

$ cd ~
$ git clone https://github.com/Itseez/opencv_contrib.git
$ cd opencv_contrib
$ git checkout 3.0.0

$ cd ~/opencv
$ mkdir build
$ cd build
# when build python, numpy is a must
$ cmake -D CMAKE_BUILD_TYPE=RELEASE \
        -D CMAKE_INSTALL_PREFIX=/usr/local \
        -D INSTALL_C_EXAMPLES=ON \
        -D INSTALL_PYTHON_EXAMPLES=ON \
        -D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib/modules \
        -D BUILD_EXAMPLES=ON ..
$ make -j4
$ sudo make install
$ sudo ldconfig
</code></pre>

<p>Installed Paths:</p>

<ul>
<li>OpenCV: /usr/local/share/OpenCV</li>
<li>PyOpenCV: /usr/local/lib/python2.7/site-packages/cv2.so</li>
</ul>


<h2>Test</h2>

<pre><code class="bash">$ # config opencv
$ cd ~/.virtualenvs/cv/lib/python2.7/site-packages/
$ cp /usr/local/lib/python2.7/site-packages/cv2.so cv2.so

$ # test
$ workon cv
$ python
$ &gt;&gt;&gt;import cv2
$ &gt;&gt;&gt;cv2.__version__
</code></pre>

<p>demo</p>

<pre><code class="python"># import the necessary packages
import numpy as np
import cv2

# load the games image
# games.jpg: http://www.pyimagesearch.com/wp-content/uploads/2015/06/games.jpg
image = cv2.imread("games.jpg")

# find the red color game in the image
upper = np.array([65, 65, 255])
lower = np.array([0, 0, 200])
mask = cv2.inRange(image, lower, upper)

# find contours in the masked image and keep the largest one
(_, cnts, _) = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
    cv2.CHAIN_APPROX_SIMPLE)
c = max(cnts, key=cv2.contourArea)

# approximate the contour
peri = cv2.arcLength(c, True)
approx = cv2.approxPolyDP(c, 0.05 * peri, True)

# draw a green bounding box surrounding the red game
cv2.drawContours(image, [approx], -1, (0, 255, 0), 4)
cv2.imshow("Image", image)
cv2.waitKey(0)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up DevEnv for Nao]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/02/25/setting-up-devenv-for-nao/"/>
    <updated>2016-02-25T13:07:11+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/02/25/setting-up-devenv-for-nao</id>
    <content type="html"><![CDATA[<p>Summary:</p>

<ul>
<li>Nao OS</li>
<li>Devkits

<ul>
<li>Choregraphe suite</li>
<li>Naoqi SDK</li>
<li>Simulators: webots</li>
</ul>
</li>
<li>VM</li>
<li>TroubleShooting</li>
</ul>


<h2>1. Nao OS</h2>

<h2>2. Choregraphe suite</h2>

<p>Linux/Mac/Windows</p>

<ul>
<li>Download the installation package, and install it in a specific os</li>
</ul>


<h2>3. Naoqi SDK</h2>

<ul>
<li>Python SDK</li>
<li>C++ SDK</li>
<li>Java SDK</li>
</ul>


<h3>3.1. Python SDK</h3>

<h4>Ubuntu</h4>

<pre><code class="bash"># download the package
$ cd /tmp
$ wget http://xxxx      # package path
$ tar -xvf pynaoqi-python2.7-x.x.x.x-linux64
$ mv pynaoqi-python2.7-x.x.x.x-linux64 pynaoqi-sdk
$ mv pynaoqi-sdk /usr/local/pynaoqi-sdk
$ vim ~/.bashrc
###########################################
export PYTHONPATH=${PYTHONPATH}:/usr/local/pynaoqi-sdk
########################################### 
$ source ~/.bashrc
$ python
###########################################
import naoqi
###########################################
</code></pre>

<h4>Mac</h4>

<pre><code class="bash"># download the package
$ cd /tmp
$ wget http://xxxx      # package path
$ tar -xvf pynaoqi-python2.7-x.x.x.x-linux64
$ mv pynaoqi-python2.7-x.x.x.x-linux64 pynaoqi-sdk
$ mv pynaoqi-sdk /usr/local/pynaoqi-sdk
$ vim ~/.bash_profile
###########################################
export PYTHONPATH=${PYTHONPATH}:/usr/local/pynaoqi-sdk
export DYLD_LIBRARY_PATH=${DYLD_LIBRARY_PATH}:/path/to/python-sdk
########################################### 
$ source ~/.bash_profile
$ python
###########################################
import naoqi
###########################################
</code></pre>

<h4>Windows</h4>

<h3>3.2. C++ SDK</h3>

<h4>Ubuntu</h4>

<h4>Mac</h4>

<h4>Windows</h4>

<h3>3.3. Java SDK</h3>

<h2>4. Simulators</h2>

<h3>4.1. Webot</h3>

<ul>
<li>Download the specific installation package</li>
<li>Install</li>
<li>Register a license</li>
<li>Update the packages</li>
<li>Go to the dashboard</li>
</ul>


<h2>5. VM</h2>

<ul>
<li>Download the box file</li>
<li>Load the file into VirtualBox</li>
<li>Login the OS with user/pass: nao/nao</li>
</ul>


<h2>6. TroubleShooting</h2>

<h2>References</h2>

<ul>
<li><a href="https://community.aldebaran.com/en/resources/software/language/en-gb">Aldebaran Softwares</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OpenCV Overview]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/02/25/opencv-overview/"/>
    <updated>2016-02-25T00:13:01+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/02/25/opencv-overview</id>
    <content type="html"><![CDATA[<ul>
<li>installation</li>
<li>modules</li>
<li>api</li>
</ul>


<h2>Installation</h2>

<ul>
<li>OS: Ubuntu 14.04</li>
</ul>


<pre><code class="bash">$ sudo apt-get install libopencv-dev python-opencv
$ # sudo apt-get autoremove libopencv-dev python-opencv
$ pkg-config opencv --cflags
$ pkg-config opencv --libs
$ pkg-config --modversion opencv
</code></pre>

<p>test</p>

<pre><code class="bash">$ vim test.cpp
$ g++ test.cpp -o test
$ ./test
</code></pre>

<h2>Modules</h2>

<ul>
<li><code>core</code>: main OpenCV, data structure + basic image processing</li>
<li><code>highgui</code>: user interface, image + video codecs/capturing/mouse etc.</li>
<li><code>imgproc</code>: image processing algorithms, image filtering/transformations etc.</li>
<li><code>video</code>: video analysis, object tracking algorithms + background subtraction etc.</li>
<li><code>objdetect</code>: object detection + object recognition</li>
</ul>


<h2>API</h2>

<h3>header files</h3>

<pre><code class="cpp">#include "opencv2/core/core.hpp"
#include "opencv2/flann/miniflann.hpp"
#include "opencv2/imgproc/imgproc.hpp"
#include "opencv2/photo/photo.hpp"
#include "opencv2/video/video.hpp"
#include "opencv2/features2d/features2d.hpp"
#include "opencv2/objdetect/objdetect.hpp"
#include "opencv2/calib3d/calib3d.hpp"
#include "opencv2/ml/ml.hpp"
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/contrib/contrib.hpp"
#include "opencv2/core/core_c.h"
#include "opencv2/highgui/highgui_c.h"
#include "opencv2/imgproc/imgproc_c.h"
</code></pre>

<h3>namespace</h3>

<pre><code class="cpp">#include "opencv2/core/core.hpp"
using namespace cv;

int main()
{
  Mat frame = cvQueryFrame(capture);
  imshow("Video", frame);
}
</code></pre>

<pre><code class="cpp">#include "opencv2/core/core.hpp"

int main()
{
  cv::Mat frame = cvQueryFrame(capture);
  cv::imshow("Video", frame);
}
</code></pre>

<h3>data types for arrays</h3>

<p>single channel array:</p>

<ul>
<li>CV_8U (8 bit unsigned integer)</li>
<li>CV_8S (8 bit signed integer)</li>
<li>CV_16U (16 bit unsigned integer)</li>
<li>CV_16S (16 bit signed integer)</li>
<li>CV_32S (32 bit signed integer)</li>
<li>CV_32F (32 bit floating point number)</li>
<li>CV_64F (64 bit float floating point number)</li>
</ul>


<p>multi channel array:</p>

<ul>
<li>CV_8UC1 (single channel array with 8 bit unsigned integers)</li>
<li>CV_8UC2 (2 channel array with 8 bit unsigned integers)</li>
<li>CV_8UC3 (3 channel array with 8 bit unsigned integers)</li>
<li>CV_8UC4 (4 channel array with 8 bit unsigned integers)</li>
<li>CV_8UC(n) (n channel array with 8 bit unsigned integers (n can be from 1 to 512) )</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing ROS on Ubuntu]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/02/20/installing-ros-on-ubuntu/"/>
    <updated>2016-02-20T21:04:48+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/02/20/installing-ros-on-ubuntu</id>
    <content type="html"><![CDATA[<h2>Requirement</h2>

<ul>
<li>Ubuntu 14.04</li>
</ul>


<h2>ROS</h2>

<h3>Installation</h3>

<pre><code class="bash">$ sudo sh -c 'echo "deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main" &gt; /etc/apt/sources.list.d/ros-latest.list'
$ sudo apt-key adv --keyserver hkp://pool.sks-keyservers.net:80 --recv-key 0xB01FA116
$ sudo apt-get update

$ sudo apt-get install ros-jade-desktop-full
</code></pre>

<h3>Configuration</h3>

<pre><code class="bash">$ sudo rosdep init
$ rosdep update

$ echo "source /opt/ros/jade/setup.bash" &gt;&gt; ~/.bashrc
$ source ~/.bashrc
</code></pre>

<h3>Additional Tools</h3>

<pre><code class="bash">$ sudo apt-get install python-rosinstall
</code></pre>
]]></content>
  </entry>
  
</feed>
