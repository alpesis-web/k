<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | Kelly Chan]]></title>
  <link href="http://k.arttechresearch.com/categories/tech/atom.xml" rel="self"/>
  <link href="http://k.arttechresearch.com/"/>
  <updated>2015-10-10T21:55:40+08:00</updated>
  <id>http://k.arttechresearch.com/</id>
  <author>
    <name><![CDATA[Kelly Chan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing Openstack Devstack]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/10/03/installing-openstack-devstack/"/>
    <updated>2015-10-03T12:33:38+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/10/03/installing-openstack-devstack</id>
    <content type="html"><![CDATA[<h3>Prequisition</h3>

<p>Softwares:</p>

<p>&ndash; (VM) <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox 5.0</a><br/>
&ndash; (OS) <a href="http://www.ubuntu.com/download/server">Ubuntu Server 14.04.3</a><br/>
&ndash; (SW) <a href="https://github.com/openstack-dev/devstack">Openstack</a></p>

<p>Steps:</p>

<p>&ndash; Installing VirtualBox<br/>
&ndash; Installing Ubuntu 14.04.03<br/>
&ndash; Installing Openstack<br/>
&ndash; Testing</p>

<h3>1. Installing VirtualBox</h3>

<p>Go to <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a>, download and install on the local machine.</p>

<h3>2. Installing Ubuntu</h3>

<p>Go to <a href="http://www.ubuntu.com/download/server">Ubuntu</a> page, download the ubuntu server 14.04.03 (NOTE: Preferring 14.04.03) iso image.</p>

<p>Once done, open VirtualBox, create a vm for Ubuntu server. The vm settings are:<br/>
&ndash; memory: 2GB<br/>
&ndash; storage: 100GB<br/>
&ndash; <strong>network: briaged adapter (IMPORTANT), promiscuous mode with ALLOW ALL</strong></p>

<p>Then, attach Ubuntu server iso file to the drive, double click the vm, the system will be jumped to the installation guide.</p>

<p>When installing Ubuntu, the installation mode should be:<br/>
&ndash; <strong>multi-server with MAAS (IMPORTANT)</strong></p>

<p>Once done, restart and config the system:</p>

<pre><code class="bash config system">    $ sudo apt-get update &amp;&amp; upgrade
    $ sudo apt-get install git
    $ git config --global user.name "username"
    $ git config --global user.email "user@example.com"
</code></pre>

<h3>3. Installing Openstack</h3>

<p>Go to <a href="https://github.com/openstack-dev/devstack">Openstack</a>, download the repo and install:</p>

<pre><code class="bash installing openstack">    # create a project folder and download the repo
    $ cd /
    $ sudo mkdir openstack
    $ cd openstack
    $ git clone https://github.com/openstack-dev/devstack.git
    $ cd devstack
    $ git checkout stable/juno

    # config user
    $ sudo ./tools/create-stack-user.sh
    $ sudo chown -R stack:stack /openstack

    # install
    $ ./stack.sh
</code></pre>

<p>Trouble Shooting</p>

<p><strong>(1)</strong> If something wrong, try <code>./unstack.sh</code> and then <code>./clean.sh</code>, restart and then <code>./stack.sh</code> again.</p>

<p><strong>(2)</strong> If re-run <code>./stack.sh</code> and the python packages flag some issue, try to delete <code>/opt/stack/xxx</code>, and re-run <code>./stack.sh</code>.</p>

<h3>4. Testing</h3>

<p>Open a browser, enter the dashboard with <code>http://ip_address</code>, login with <code>admin/password</code> (NOTE: password was set at previous).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Time Series With Pandas]]></title>
    <link href="http://k.arttechresearch.com/tech/2014/03/05/time-series-with-pandas/"/>
    <updated>2014-03-05T22:20:32+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2014/03/05/time-series-with-pandas</id>
    <content type="html"><![CDATA[<h3>1. date and time</h3>

<pre><code class="python"># get datetime from system
from datetime import datetime
now = datetime.now()
now.year, now.month, now.day

# calculate delta between days
delta = datetime(2011, 1, 7) - datetime(2008, 6, 24, 8, 15)
delta.days
delta.seconds

from datetime import timedelta
start = datetime(2011, 1, 7)
start + timedelta(12)
start - 2 * timedelta(12)
</code></pre>

<p>convert datetime and string</p>

<pre><code class="python"># convert with strftime
stamp = datetime(2011, 1, 3)
str(stamp)
stamp.strftime('%Y-%m-%d')

value = '2011-01-03'
datetime.strptime(value, '%Y-%m-%d')

datestrs = ['7/6/2011', '8/6/2011']
[datetime.strptime(x, '%m/%d/%Y') for x in datestrs]

# converte with parse
from dateutil.parser import parse
parse('2011-01-03')
parse('Jan 31, 1997 10:45 PM')
parse('6/12/2011', dayfirst=True)


# coverte with pandas
pandas.to_datetime(datestrs)
idx = pd.to_datetime(datestrs + [None])
idx
idx[2]
pandas.isnull(idx)
</code></pre>

<h3>2. time series</h3>

<p>create dates with pandas</p>

<pre><code class="python">from datetime import datetime

dates = [datetime(2011, 1, 2), datetime(2011, 1, 5), datetime(2011, 1, 7), 
         datetime(2011, 1, 8), datetime(2011, 1, 10), datetime(2011, 1, 12)]

ts = pandas.Series(np.random.randn(6), index=dates)
ts

type(ts)
ts.index
ts.index.dtype

stamp = ts.index[0]
stamp
</code></pre>

<p>indexing, selection, subsetting</p>

<pre><code class="python">stamp = ts.index[2]
ts[stamp]
ts['1/10/2011']
ts['20110110']

longer_ts = pandas.Series(np.random.randn(1000), index=pd.date_range('1/1/2000', periods=1000))
longer_ts['2001']
longer_ts['2001-05']

ts[datetime(2011, 1, 7):]
ts['1/6/2011':'1/11/2011']

ts.truncate(after='1/9/2011')

dates = pandas.date_range('1/1/2000', periods=100, freq='W-WED')
long_df = pandas.DataFrame(np.random.randn(100, 4), index=dates, columns=['Colorado', 'Texas', 'New York', 'Ohio'])
</code></pre>

<p>time series with duplicate indices</p>

<pre><code class="python">dates = pandas.DatetimeIndex(['1/1/2000', '1/2/2000', '1/2/2000', '1/2/2000', '1/3/2000'])
dup_ts = pandas.Series(np.arange(5), index=dates)
dup_ts.index.is_unique
dup_ts['1/3/2000']
dup_ts['1/2/2000']

grouped = dup_ts.groupby(level=0)
grouped.mean()
grouped.count()
</code></pre>

<p>date ranges, frequencies, shifting</p>

<pre><code class="python"># 1. resample
ts
ts.resample('D')

# 2. date_range
index = pandas.date_range('4/1/2012', '6/1/2012')

pandas.date_range(start='4/1/2012', periods=20)
pandas.date_range(end='6/1/2012', periods=20)
pandas.date_range('1/1/2000', '12/1/2000', freq='BM')

pandas.date_range('5/2/2012 12:56:31', periods=5)
pandas.date_range('5/2/2012 12:56:31', periods=5, normalize=True)

# 3. frequencies

from pandas.tseries.offsets import Hour, Minute
hour = Hour()
four_hours = Hour(4)
pandas.date_range('1/1/2000', '1/3/2000 23:59', freq='4h')

Hour(2) + Minute(30)
pandas.date_range('1/1/2000', periods=10, freq='1h30min')

# 4. week of month
rng = pandas.date_range('1/1/2012', '9/1/2012', freq='WOM-3FRI')
list(rng)

# 5. shifting (leading/lagging)
ts = pandas.Series(np.random.randn(4),index=pandas.date_range('1/1/2000', periods=4, freq='M'))
ts.shift(2)
ts.shift(-2)
ts.shift(2, freq='M')
ts.shift(3, freq='D')
ts.shift(1, freq='3D')
ts.shift(1, freq='90T')

# shifting dates with offsets
from pandas.tseries.offsets import Day, MonthEnd
now = datetime(2011, 11, 17)
now + 3 * Day()
now + MonthEnd()
now + MonthEnd(2)

offset = MonthEnd()
offset.rollforward(now)
offset.rollback(now)

ts = pandas.Series(np.random.randn(20),index=pandas.date_range('1/15/2000', periods=20, freq='4d'))
ts.groupby(offset.rollforward).mean()
ts.resample('M', how='mean')
</code></pre>

<h3>3. timezone handling</h3>

<pre><code class="python">import pytz
pytz.common_timezones[-5:]
tz = pytz.timezone('US/Eastern')
</code></pre>

<p>localization and conversion</p>

<pre><code class="python">rng = pandas.date_range('3/9/2012 9:30', periods=6, freq='D')
ts = pandas.Series(np.random.randn(len(rng)), index=rng)
print(ts.index.tz)

pandas.date_range('3/9/2012 9:30', periods=10, freq='D', tz='UTC')
ts_utc = ts.tz_localize('UTC')
ts_utc.index
ts_utc.tz_convert('US/Eastern')

ts_eastern = ts.tz_localize('US/Eastern')
ts_eastern.tz_convert('UTC')
ts_eastern.tz_convert('Europe/Berlin')
ts.index.tz_localize('Asia/Shanghai')
</code></pre>

<p>operations with timezone</p>

<pre><code class="python">stamp = pandas.Timestamp('2011-03-12 04:00')
stamp_utc = stamp.tz_localize('utc')
stamp_utc.tz_convert('US/Eastern')
stamp_moscow = pandas.Timestamp('2011-03-12 04:00', tz='Europe/Moscow')

stamp_utc.value
stamp_utc.tz_convert('US/Eastern').value

from pandas.tseries.offsets import Hour
stamp = pandas.Timestamp('2012-03-12 01:30', tz='US/Eastern')
stamp + Hour()
stamp = pandas.Timestamp('2012-11-04 00:30', tz='US/Eastern')
stamp + 2 * Hour()

rng = pandas.date_range('3/7/2012 9:30', periods=10, freq='B')
ts = pandas.Series(np.random.randn(len(rng)), index=rng)
ts1 = ts[:7].tz_localize('Europe/London')
ts2 = ts1[2:].tz_convert('Europe/Moscow')
result = ts1 + ts2
result.index
</code></pre>

<h3>4. periods</h3>

<p>periods of year, month, quarter</p>

<pre><code class="python"># period of years
p = pandas.Period(2007, freq='A-DEC')
p + 5
p - 2
pandas.Period('2014', freq='A-DEC') - p

# period of months
rng = pandas.period_range('1/1/2000', '6/30/2000', freq='M')
pandas.Series(np.random.randn(6), index=rng)

# period of quarter
values = ['2001Q3', '2002Q2', '2003Q1']
index = pandas.PeriodIndex(values, freq='Q-DEC')
</code></pre>

<p>period frequencies conversion</p>

<pre><code class="python">p = pandas.Period('2007', freq='A-DEC')
p.asfreq('M', how='start')
p.asfreq('M', how='end')

p = pandas.Period('2007', freq='A-JUN')
p.asfreq('M', 'start')
p.asfreq('M', 'end')

p = pandas.Period('2007-08', 'M')
p.asfreq('A-JUN')

rng = pandas.period_range('2006', '2009', freq='A-DEC')
ts = pandas.Series(np.random.randn(len(rng)), index=rng)
ts.asfreq('M', how='start')
ts.asfreq('B', how='end')
</code></pre>

<p>quarterly period frequencies</p>

<pre><code class="python">p = pandas.Period('2012Q4', freq='Q-JAN')
p.asfreq('D', 'start')
p.asfreq('D', 'end')

# to get the timestamp at 4PM on the 2nd to last business day of the quarter
p4pm = (p.asfreq('B', 'e') - 1).asfreq('T', 's') + 16 * 60
p4pm.to_timestamp()

rng = pandas.period_range('2011Q3', '2012Q4', freq='Q-JAN')
ts = pandas.Series(np.arange(len(rng)), index=rng)
new_rng = (rng.asfreq('B', 'e') - 1).asfreq('T', 's') + 16 * 60
ts.index = new_rng.to_timestamp()
</code></pre>

<p>converting timestamps to periods</p>

<pre><code class="python">rng = pandas.date_range('1/1/2000', periods=3, freq='M')
ts = pandas.Series(np.random.randn(3), index=rng)
pts = ts.to_period()

rng = pandas.date_range('1/29/2000', periods=6, freq='D')
ts2 = pandas.Series(np.random.randn(6), index=rng)
ts2.to_period('M')
pts = ts.to_period()
pts.to_timestamp(how='end')
</code></pre>

<h3>5. resampling</h3>

<pre><code class="python">rng = pandas.date_range('1/1/2000', periods=100, freq='D')
ts = pandas.Series(np.random.randn(len(rng)), index=rng)
ts.resample('M', how='mean')
ts.resample('M', how='mean', kind='period')
</code></pre>

<p>downsampling</p>

<pre><code class="python">rng = pandas.date_range('1/1/2000', periods=12, freq='T')
ts = pandas.Series(np.arange(12), index=rng)
ts.resample('5min', how='sum')
ts.resample('5min', how='sum', closed='left')
ts.resample('5min', how='sum', closed='left', label='left')

# ohlc: open high low close
ts.resample('5min', how='ohlc')
ts.resample('5min', how='sum', loffset='-1s')

rng = pandas.date_range('1/1/2000', periods=100, freq='D')
ts = pandas.Series(np.arange(100), index=rng)
ts.groupby(lambda x: x.month).mean()
ts.groupby(lambda x: x.weekday).mean()
</code></pre>

<p>upsampling and interpolation</p>

<pre><code class="python">frame = pandas.DataFrame(np.random.randn(2, 4),
                         index=pandas.date_range('1/1/2000', periods=2, freq='W-WED'),
                         columns=['Colorado', 'Texas', 'New York', 'Ohio'])
frame[:5]
df_daily = frame.resample('D')
df_daily
frame.resample('D', fill_method='ffill')
frame.resample('D', fill_method='ffill', limit=2)
frame.resample('W-THU', fill_method='ffill')
</code></pre>

<p>resampling with periods</p>

<pre><code class="python">frame = pandas.DataFrame(np.random.randn(24, 4),
                         index=pandas.period_range('1-2000', '12-2001', freq='M'),
                         columns=['Colorado', 'Texas', 'New York', 'Ohio'])
frame[:5]
annual_frame = frame.resample('A-DEC', how='mean')
annual_frame.resample('Q-DEC', fill_method='ffill')
annual_frame.resample('Q-DEC', fill_method='ffill', convention='start')
annual_frame.resample('Q-MAR', fill_method='ffill')
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Pandas]]></title>
    <link href="http://k.arttechresearch.com/tech/2014/03/05/python-pandas/"/>
    <updated>2014-03-05T12:33:47+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2014/03/05/python-pandas</id>
    <content type="html"><![CDATA[<p>libraries</p>

<pre><code class="python">import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
</code></pre>

<h3>1. object creation</h3>

<pre><code class="python"># create array
s = pd.Series([1,3,5,np.nan,6,8])

# create dates with dataframe
dates = pd.date_range('20130101',periods=6)

# create dataframe
df2 = pd.DataFrame({ 'header1' : 1.,
                     'header2' : pd.Timestamp('20130102'),
                     'header3' : pd.Series(1,index=list(range(4)),dtype='float32'),
                     'header4' : np.array([3] * 4,dtype='int32'),
                     'header5' : 'foo' })

# check data types of dataframe
dataframe.dtypes 
</code></pre>

<h3>2. viewing data</h3>

<pre><code class="python"># top/bottom rows of data
dataframe.head()
dataframe.tail(3)

# index/row, columns and values
dataframe.index
dataframe.columns
dataframe.values

# summary of numeric data
dataframe.describe()

# data transpose
dataframe.T

# sorting by header/names and values
dataframe.sort_index(axis=1, ascending=False)
dataframe.sort(columns='columnName')
</code></pre>

<h3>3. selection</h3>

<pre><code class="python"># get data by columns
dataframe['A']

# get data by rows
dataframe[0:3]
dataframe['20130102':'20130104']

# reshape dataframe
dataframe.loc[:,['A','B']]

# get one record with T
dataframe.iloc[3]

# get rows and columns as defined
dataframe.iloc[3:5,0:2]
dataframe.iloc[[1,2,4],[0,2]]
dataframe.iloc[1:3,:]
dataframe.iloc[:,1:3]

# get a specific value/cell
dataframe.iloc[1,1]
dataframe.iat[1,1]
</code></pre>

<h3>4. boolean index</h3>

<pre><code class="python"># filter data by a single column
df[df.A &gt; 0]

# filter data by all columns
df[df &gt; 0]                   # if value &lt;= 0, it will return NaN
</code></pre>

<h3>5. setting</h3>

<pre><code class="python"># set values by label, position and array
df.at[dates[0],'A'] = 0
df.iat[0,1] = 0
df.loc[:,'D'] = np.array([5] * len(df))

df2 = df.copy()
df2[df2 &gt; 0] = -df2

# rename columns
df = df.rename(columns={'$a': 'a', '$b': 'b'}, inplace=True)
</code></pre>

<h3>6. missing values</h3>

<pre><code class="python"># drop any rows those have missing values
df1.dropna(how='any')

# fill missing values
df1.fillna(value=5)

# get the boolean mask where values are nan
pd.isnull(df1)
</code></pre>

<h3>7. operations</h3>

<pre><code class="python"># mean
df.mean()

# frequency count
df['A'].value_counts()

# correlation
df.corr()

# string
s.str.lower()
</code></pre>

<h3>8. merge</h3>

<pre><code class="python"># merge data by rows
pieces = [df[:3], df[3:7], df[7:]]

# join
left = pd.DataFrame({'key': ['foo', 'foo'], 'lval': [1, 2]})
right = pd.DataFrame({'key': ['foo', 'foo'], 'rval': [4, 5]})
pd.merge(left, right, on='key')

# append
df = pd.DataFrame(np.random.randn(8, 4), columns=['A','B','C','D'])
s = df.iloc[3]
df.append(s, ignore_index=True)
</code></pre>

<h3>9. grouping</h3>

<pre><code class="python"># (histogram)/group all columns by one column
df.groupby('A').sum()

# (cross tabs)/group all columns by multi-columns
df.groupby(['A','B']).sum()
</code></pre>

<h3>10. reshape</h3>

<pre><code class="python"># stack
tuples = list(zip(*[['bar', 'bar', 'baz', 'baz', 'foo', 'foo', 'qux', 'qux'],
                    ['one', 'two', 'one', 'two', 'one', 'two', 'one', 'two']]))

index = pd.MultiIndex.from_tuples(tuples, names=['first', 'second'])
df = pd.DataFrame(np.random.randn(8, 2), index=index, columns=['A', 'B'])
df2 = df[:4]
stacked = df2.stack()
stacked.unstack()
stacked.unstack(1)
stacked.unstack(0)

# pivot table
df = pd.DataFrame({'A' : ['one', 'one', 'two', 'three'] * 3,
                   'B' : ['A', 'B', 'C'] * 4,
                   'C' : ['foo', 'foo', 'foo', 'bar', 'bar', 'bar'] * 2,
                   'D' : np.random.randn(12),
                   'E' : np.random.randn(12)})

pd.pivot_table(df, values='D', rows=['A', 'B'], cols=['C'])
</code></pre>

<h3>11. get data in/out</h3>

<pre><code class="python"># csv in/out
pd.read_csv('foo.csv')
df.to_csv('foo.csv')

# excel in/out
pd.read_excel('foo.xlsx', 'Sheet1', index_col=None, na_values=['NA'])
df.to_excel('foo.xlsx', sheet_name='Sheet1')

# HDF5 in/out
d.read_hdf('foo.h5','df')
df.to_hdf('foo.h5','df')
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Vim Commands]]></title>
    <link href="http://k.arttechresearch.com/tech/2014/01/18/vim-commands/"/>
    <updated>2014-01-18T19:34:30+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2014/01/18/vim-commands</id>
    <content type="html"><![CDATA[<ul>
<li>normal mode: to edit a file</li>
<li>command mode: to edit a file with commands</li>
</ul>


<h2>1. Normal Mode</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> Type                  </th>
<th style="text-align:left;"> Action                </th>
<th style="text-align:left;"> Command                                      </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> edit                  </td>
<td style="text-align:left;"> insert                </td>
<td style="text-align:left;"> i                                            </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> delete                </td>
<td style="text-align:left;"> x                                            </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> exit                  </td>
<td style="text-align:left;"> esc                                          </td>
</tr>
<tr>
<td style="text-align:left;"> move                  </td>
<td style="text-align:left;"> left, right, down, up </td>
<td style="text-align:left;"> h, l, j, k                                   </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> back word             </td>
<td style="text-align:left;"> b                                            </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> next word             </td>
<td style="text-align:left;"> w                                            </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> end of line           </td>
<td style="text-align:left;"> $                                            </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> page up               </td>
<td style="text-align:left;"> ctrl + u                                     </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> page down             </td>
<td style="text-align:left;"> ctrl + d                                     </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> top of the file       </td>
<td style="text-align:left;"> gg                                           </td>
</tr>
<tr>
<td style="text-align:left;"> copy, paste, change   </td>
<td style="text-align:left;"> yank, copy            </td>
<td style="text-align:left;"> y(xxx)                                       </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> cureent line          </td>
<td style="text-align:left;"> yy                                           </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> paste                 </td>
<td style="text-align:left;"> p                                            </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> change                </td>
<td style="text-align:left;"> c                                            </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> change word           </td>
<td style="text-align:left;"> cw                                           </td>
</tr>
<tr>
<td style="text-align:left;"> search, find, replace </td>
<td style="text-align:left;"> search                </td>
<td style="text-align:left;"> /(word)                                      </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> search to top         </td>
<td style="text-align:left;"> #                                            </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> search to end         </td>
<td style="text-align:left;"> *                                            </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> find                  </td>
<td style="text-align:left;"> f(a letter)                                  </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> find former           </td>
<td style="text-align:left;"> ,                                            </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> find next             </td>
<td style="text-align:left;"> ;                                            </td>
</tr>
<tr>
<td style="text-align:left;"> delete                </td>
<td style="text-align:left;"> delelte a line        </td>
<td style="text-align:left;"> dd                                           </td>
</tr>
<tr>
<td style="text-align:left;"> fold                  </td>
<td style="text-align:left;"> fold                  </td>
<td style="text-align:left;"> zc                                           </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> unfold (single)       </td>
<td style="text-align:left;"> zo                                           </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> unfold (all)          </td>
<td style="text-align:left;"> zr                                           </td>
</tr>
</tbody>
</table>


<p>Note: all for editing.</p>

<h2>2. Command Mode</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> Type                  </th>
<th style="text-align:left;"> Action                </th>
<th style="text-align:left;"> Command                                      </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> coding                </td>
<td style="text-align:left;"> shift                 </td>
<td style="text-align:left;"> :line,line&lt; or :line,line>                   </td>
</tr>
<tr>
<td style="text-align:left;"> files                 </td>
<td style="text-align:left;"> save                  </td>
<td style="text-align:left;"> :w                                           </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> open                  </td>
<td style="text-align:left;"> :e                                           </td>
</tr>
<tr>
<td style="text-align:left;"> buffer                </td>
<td style="text-align:left;"> switch                </td>
<td style="text-align:left;"> :b<n>                                        </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> close                 </td>
<td style="text-align:left;"> :bd                                          </td>
</tr>
<tr>
<td style="text-align:left;"> copy, replce          </td>
<td style="text-align:left;"> copy paragraph        </td>
<td style="text-align:left;"> :&lt;line,line> copy &lt;line,line>                </td>
</tr>
<tr>
<td style="text-align:left;">                       </td>
<td style="text-align:left;"> replace               </td>
<td style="text-align:left;"> :%s/(words)/(words replaced)/g, g for global </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sqrt Newton's Method of Successive Approximations]]></title>
    <link href="http://k.arttechresearch.com/tech/2010/01/14/sqrt-newtons-method-of-successive-approximations/"/>
    <updated>2010-01-14T00:00:14+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2010/01/14/sqrt-newtons-method-of-successive-approximations</id>
    <content type="html"><![CDATA[<p><img src="http://media-cache-ec0.pinimg.com/736x/4d/5d/8a/4d5d8aeb52644182af61a7eac04cdfc9.jpg" /></p>

<h3>Algorithm</h3>

<pre><code>    1. Guess

    2. Good-enough?
                      | Guess^2 - Radicant | &lt; Predetermined Tolerance

    If yes, Guess = Root
       else, Improve Guess

    3. Improve
                      Quotient = Radicant / Guess
                      Average  = ( Guess + Quotient ) / 2
                      Guess    = Average
</code></pre>

<p>Importance: Radicant -> Large/Small -> very small fraction of the Guess -> STOP?</p>

<pre><code class="perl">(define (sqrt x)
  (sqrt-iter 1.0 x))
(define (sqrt-iter guess x)
  (if (good-enough? guess x)
      guess
      (sqrt-iter (improve guess x) x)))
(define (good-enough? guess x)
  (&lt; (abs (- (square guess) x)) 0.001))
(define (improve guess x)
  (average guess (/ x guess)))
</code></pre>

<p>Block Structure</p>

<pre><code class="perl">(define (sqrt x)
  (define (good-enough? guess x)
    (&lt; (abs (- (square guess) x)) 0.001))
  (define (improve guess x)
    (average guess (/ x guess)))
  (define (sqrt-iter guess x)
    (if (good-enough? guess x)
        guess
        (sqrt-iter (improve guess x) x)))
  (sqrt-iter 1.0 x))
</code></pre>

<p>References:<br/>
&ndash; <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-10.html#%_sec_1.1.7">Square Roots by Newton&rsquo;s Method</a><br/>
&ndash; <a href="http://mitpress.mit.edu/sicp/">Structure and Interpretation of Computer Programs</a></p>
]]></content>
  </entry>
  
</feed>
