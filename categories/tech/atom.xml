<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | Kelly Chan]]></title>
  <link href="http://k.arttechresearch.com/categories/tech/atom.xml" rel="self"/>
  <link href="http://k.arttechresearch.com/"/>
  <updated>2015-10-12T22:24:18+08:00</updated>
  <id>http://k.arttechresearch.com/</id>
  <author>
    <name><![CDATA[Kelly Chan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing Openstack Devstack]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/10/03/installing-openstack-devstack/"/>
    <updated>2015-10-03T12:33:38+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/10/03/installing-openstack-devstack</id>
    <content type="html"><![CDATA[<h3>Prequisition</h3>

<p>Softwares:</p>

<p>&ndash; (VM) <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox 5.0</a><br/>
&ndash; (OS) <a href="http://www.ubuntu.com/download/server">Ubuntu Server 14.04.3</a><br/>
&ndash; (SW) <a href="https://github.com/openstack-dev/devstack">Openstack</a></p>

<p>Steps:</p>

<p>&ndash; Installing VirtualBox<br/>
&ndash; Installing Ubuntu 14.04.03<br/>
&ndash; Installing Openstack<br/>
&ndash; Testing</p>

<h3>1. Installing VirtualBox</h3>

<p>Go to <a href="https://www.virtualbox.org/wiki/Downloads">VirtualBox</a>, download and install on the local machine.</p>

<h3>2. Installing Ubuntu</h3>

<p>Go to <a href="http://www.ubuntu.com/download/server">Ubuntu</a> page, download the ubuntu server 14.04.03 (NOTE: Preferring 14.04.03) iso image.</p>

<p>Once done, open VirtualBox, create a vm for Ubuntu server. The vm settings are:<br/>
&ndash; memory: 2GB<br/>
&ndash; storage: 100GB<br/>
&ndash; <strong>network: briaged adapter (IMPORTANT), promiscuous mode with ALLOW ALL</strong></p>

<p>Then, attach Ubuntu server iso file to the drive, double click the vm, the system will be jumped to the installation guide.</p>

<p>When installing Ubuntu, the installation mode should be:<br/>
&ndash; <strong>multi-server with MAAS (IMPORTANT)</strong></p>

<p>Once done, restart and config the system:</p>

<pre><code class="bash config system">    $ sudo apt-get update &amp;&amp; upgrade
    $ sudo apt-get install git
    $ git config --global user.name "username"
    $ git config --global user.email "user@example.com"
</code></pre>

<h3>3. Installing Openstack</h3>

<p>Go to <a href="https://github.com/openstack-dev/devstack">Openstack</a>, download the repo and install:</p>

<pre><code class="bash installing openstack">    # create a project folder and download the repo
    $ cd /
    $ sudo mkdir openstack
    $ cd openstack
    $ git clone https://github.com/openstack-dev/devstack.git
    $ cd devstack
    $ git checkout stable/juno

    # config user
    $ sudo ./tools/create-stack-user.sh
    $ sudo chown -R stack:stack /openstack

    # install
    $ ./stack.sh
</code></pre>

<p>Trouble Shooting</p>

<p><strong>(1)</strong> If something wrong, try <code>./unstack.sh</code> and then <code>./clean.sh</code>, restart and then <code>./stack.sh</code> again.</p>

<p><strong>(2)</strong> If re-run <code>./stack.sh</code> and the python packages flag some issue, try to delete <code>/opt/stack/xxx</code>, and re-run <code>./stack.sh</code>.</p>

<h3>4. Testing</h3>

<p>Open a browser, enter the dashboard with <code>http://ip_address</code>, login with <code>admin/password</code> (NOTE: password was set at previous).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Jenkins on Ubuntu]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/05/01/installing-jenkins-on-ubuntu/"/>
    <updated>2015-05-01T11:46:00+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/05/01/installing-jenkins-on-ubuntu</id>
    <content type="html"><![CDATA[<h2>Jenkins</h2>

<p>installation</p>

<pre><code>wget -q -O - https://jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ &gt; /etc/apt/sources.list.d/jenkins.list'
sudo apt-get update
sudo apt-get install jenkins
</code></pre>

<p>open the link: <a href="http://202.120.83.101:8080">http://202.120.83.101:8080</a></p>

<h2>Nginx</h2>

<p>installation</p>

<pre><code>sudo aptitude -y install nginx

# remove default setting
cd /etc/nginx/sites-available
sudo cp default default.backup
sudo rm default ../sites-enabled/default
</code></pre>

<p>/etc.nginx.sites-available: add the configurations of jenkins</p>

<pre><code>sudo nano jenkins
upstream app_server {
    server 127.0.0.1:8080 fail_timeout=0;
}

server {
    listen 80;
    listen [::]:80 default ipv6only=on;
    server_name ci.yourcompany.com;

    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_redirect off;

        if (!-f $request_filename) {
            proxy_pass http://app_server;
            break;
        }
    }
}
</code></pre>

<p>adding the link</p>

<pre><code>sudo ln -s /etc/nginx/sites-available/jenkins /etc/nginx/sites-enabled/
</code></pre>

<p>start service</p>

<pre><code>sudo service nginx restart
</code></pre>

<h2>Configurating Jenkins</h2>

<p>installing java</p>

<pre><code>sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-java7-installer
sudo update-java-alternatives -s java-7-oracle  
sudo update-alternatives --config java
</code></pre>

<p>configurating java home</p>

<pre><code>sudo nano $HOME/.bashrc
</code></pre>

<p>adding the configuration</p>

<pre><code># set JAVA_HOME
JAVA_HOME=/usr/lib/jvm/java-7-oracle/ 
export JAVA_HOME
PATH=$PATH:$JAVA_HOME
export PATH
</code></pre>

<p>source</p>

<pre><code>source $HOME/.bashrc
echo $JAVA_HOME
</code></pre>

<p>configurating jenkins</p>

<ul>
<li><p>Manage Jenkins -> Configure System -> JDK/Ant/Maven</p></li>
<li><p>Manage Jenkins -> Configure Global Security -> security/matrix/admin</p></li>
<li><p>restart jenkins, sign up with admin</p></li>
<li><p>Manage Jenkins -> Manage Plugins -> Git Plugin</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Cloudera Hadoop on Ubuntu]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/05/01/installing-cloudera-hadoop-on-ubuntu/"/>
    <updated>2015-05-01T11:10:00+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/05/01/installing-cloudera-hadoop-on-ubuntu</id>
    <content type="html"><![CDATA[<p>NOTE: All hosts should be finished all the steps listed below.</p>

<h2>Preparation</h2>

<p>hosts</p>

<pre><code>202.120.83.101 insight-master
202.120.83.102 insight-slave1
202.120.83.103 insight-slave2
202.120.83.104 insight-slave3
202.120.83.105 insight-slave4
</code></pre>

<p>updating softwares</p>

<pre><code>sudo apt-get update
sudo apt-get upgrade
sudo apt-get dist-upgrade
</code></pre>

<p>modifing the hosts</p>

<pre><code>sudo nano /etc/hosts
</code></pre>

<p>hosts</p>

<pre><code>127.0.0.1       localhost
#127.0.1.1      insight

# Cloudera-Hadoop Cluster
202.120.83.101 insight-master
202.120.83.102 insight-slave1
202.120.83.103 insight-slave2
202.120.83.104 insight-slave3
202.120.83.105 insight-slave4
</code></pre>

<p>ssh</p>

<pre><code>sudo apt-get install ssh

ssh-keygen -t rsa

# copy the publick key
cat /home/insight/.ssh/id_rsa.pub
sudo nano /home/insight/.ssh/authorized_keys
</code></pre>

<p>authorized_keys</p>

<pre><code># 202.120.83.101
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+JcGP7MopXAdZUJR1AK7tCXHELACXh++6kxUf1FCAwdooJ8MlLiqMJTgCCSNMghiB0w442XB+lohQmFPDTLJDRaTZxbCvo82aD0sJ1slaxZDuu5/B3hv+pO7Nz4P1CHLw6JHsY+ml48GjX2FhI/iYDFg0RyEt3d91f+Bha9nubB3+uh9MGhAfpxsxMlc1J4/GTm6F1YfGV5aVfrztEM07bqVVaMS6tT0wrp5L57IzBhdcTOhd9asEmO/OpCQLytoIFS5kTv+M6bTU23ChMj7Df4BNEr2idwqUI/h3zx/jT25LR6qryWiwxZ2jho1yYUMM3jN6LqKSKXOarcrwgjOX insight@insight

# 202.120.83.102
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDHa6O+7kg+T6+G5UMhiPqG9PLcNu0LvO5VPIsuTMbWaer8w8ZRJE2R1KMlXmowMpiADFxeGWUEhruxyDp16JFv/axYc67dfvS1SSJiuNnAZ5PDQ7EIbPcOZqP7641XWY1kHrYbBr4gWnb/EectDQAzdb3GScWlEAu9/vamu7baHfm6C2X+0o3m3nkfB2i/Fd35TGL0xMJx3H/oOcX7Jm8MqCSgdJwIqBxilfqRrHC4VICYB2zDmzFNpgWEPlZZ0do1BKXOBddKMU7c0tgRCcuPLtMWJkIrEZIR7K9UGY7GniXA2Zq8GytjZj1215CyXaLQD9XhC5f0td3KxgmWCzxN insight@insight

# 202.120.83.103
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDeICFND0O2JSt7lXo7r8cFiqhFpZ9Vbc9AG2yQau6xQPvbwPZd6xtCljUWMTAMhdKOFsJp6TbYPWQr25HYUxw+7VUziN1dyXrfchRB4uBQqvYmwcay2vBJlZRAfEK1Ahm6LumXi+kozmHm+7SjBhY/24IRxLf+G1g7ldNW3jLx+GNXtHffH9mw6Uc/ihV/AaFHThR1s4j28mLTBMwVxAHSXadwN863u/hd9rsES7vpxKRNK6U3TymPE5gIRPkXTO5xoxoGKX9E8ClKjl7/D1/sOJI0WZWhlslhSQDGLpMLU1uwK8RT5f4saqZyOv9kva7ad1gIYXXibmhzuct7sk67 insight@insight

# 202.120.83.104
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCbDG89bL9yNik01Xo2fhf8QHh1MzWcvIRIfK1GyGOh5b8LvaE3iZtX2RKYI4CCzvJ6y3A8peTWUuRZSV0lO7cpyOIoFIFRHScSuLulv8dHj0gYyjsH66R6lbnFYk72Ih/XzRUSH8Fo4Ar+eXWVZfBzWZWTL3ftRR7fmc5mZP+4IH7LdgZI2Wgb/GwksCx09vlMQmiQzHIYRs3iD6fsfL5prvcPKHYmwqslZcrBuy9nW2s0un3yRTeWwxYgRT15CHKXeOq5N+H0WxORCkY7FvLttPQbaAhbldvnir3NaIwCnds7vOvry5dm79LJzIC+2br7WQ2spUGCRtrzw8IcO4N9 insight@insight

# 202.120.83.105
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDAjeDr/HcUsjs7xq7MlpFnGbr/hDr9SaQhet4Fp8UQnQKwuFVtUqP48Dwr0sVYY8xueqhylI2q9wL+rovIk2T1DKeD+z0BX9P1C3CrcHNMpirEotdQd2OGGwsIEMTeMugox1oER3LWLjGBcxZ71KOx2INSxBq/6EoDSOhMIbVH0ZC9fPdG/mEScf3VmvzBT1UwyewZVoVPqSr6NmOJ1RVxKA9c0P7hHtBTcUhwFNLgitM8ca6Y4eL6DsTuIl3zQA+dSnpa8IudCY1oARnphQInHIa9wCrnMCAEgRqPHfyRwg8hcOrOerWEq2Q95m15dPoIrmfy8T63p0zrhKXN34lJ insight@insight
</code></pre>

<p>validation</p>

<pre><code>ssh 202.120.83.xxx
</code></pre>

<h2>MySQL</h2>

<p>installation</p>

<pre><code>sudo apt-get install mysql-server libmysql-java
</code></pre>

<p>configuration</p>

<pre><code>sudo nano /etc/mysql/conf.d/mysql_cloudera_manager.cnf
</code></pre>

<p>mysql_cloudera_manager.cnf</p>

<pre><code>[mysqld]
transaction-isolation=READ-COMMITTED
# Disabling symbolic-links is recommended to prevent assorted security risks;
# to do so, uncomment this line:
# symbolic-links=0

key_buffer              = 16M
key_buffer_size         = 32M
max_allowed_packet      = 16M
thread_stack            = 256K
thread_cache_size       = 64
query_cache_limit       = 8M
query_cache_size        = 64M
query_cache_type        = 1
# Important: see Configuring the Databases and Setting max_connections
max_connections         = 550

# log-bin should be on a disk with enough free space
log-bin=/var/log/mysql/mysql_binary_log

# For MySQL version 5.1.8 or later. Comment out binlog_format for older versions.
binlog_format           = mixed

read_buffer_size = 2M
read_rnd_buffer_size = 16M
sort_buffer_size = 8M
join_buffer_size = 8M

# InnoDB settings
innodb_file_per_table = 1
innodb_flush_log_at_trx_commit  = 2
innodb_log_buffer_size          = 64M
innodb_buffer_pool_size         = 4G
innodb_thread_concurrency       = 8
innodb_flush_method             = O_DIRECT
innodb_log_file_size = 512M

[mysqld_safe]
log-error=/var/log/mysqld.log
pid-file=/var/run/mysqld/mysqld.pid
</code></pre>

<p>configurating my.cnf</p>

<pre><code>sudo nano /etc/mysql/my.cnf

# comment the bind-address
# bind-address   = 127.0.0.1
</code></pre>

<p>configurating innodb</p>

<pre><code>sudo su
mv /var/lib/mysql/ib_logfile* /var/tmp/
exit
</code></pre>

<p>initialization</p>

<pre><code>sudo service mysql restart
mysql -uroot -p

create database amon DEFAULT CHARACTER SET utf8;
grant all on amon.* TO 'amon'@'%' IDENTIFIED BY 'amon_password';
grant all on amon.* TO 'amon'@'insight-master' IDENTIFIED BY 'amon_password';
create database smon DEFAULT CHARACTER SET utf8;
grant all on smon.* TO 'smon'@'%' IDENTIFIED BY 'smon_password';
grant all on smon.* TO 'smon'@'insight-master' IDENTIFIED BY 'smon_password';
create database rman DEFAULT CHARACTER SET utf8;
grant all on rman.* TO 'rman'@'%' IDENTIFIED BY 'rman_password';
grant all on rman.* TO 'rman'@'insight-master' IDENTIFIED BY 'rman_password';
create database hmon DEFAULT CHARACTER SET utf8;
grant all on hmon.* TO 'hmon'@'%' IDENTIFIED BY 'hmon_password';
grant all on hmon.* TO 'hmon'@'insight-master' IDENTIFIED BY 'hmon_password';
create database hive DEFAULT CHARACTER SET utf8;
grant all on hive.* TO 'hive'@'%' IDENTIFIED BY 'hive_password';
grant all on hive.* TO 'hive'@'insight-master' IDENTIFIED BY 'hive_password';

create database nav DEFAULT CHARACTER SET utf8;
grant all on nav.* TO 'nav'@'%' IDENTIFIED BY 'nav_password';
grant all on nav.* TO 'nav'@'insight-master' IDENTIFIED BY 'nav_password';

create database navms DEFAULT CHARACTER SET utf8;
grant all on navms.* TO 'navms'@'%' IDENTIFIED BY 'navms_password';
grant all on navms.* TO 'navms'@'insight-master' IDENTIFIED BY 'navms_password';
</code></pre>

<h2>Cloudera Manager</h2>

<p>installing java</p>

<pre><code>sudo apt-get install python-software-properties
sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update

sudo nano /etc/apt/sources.list.d/cloudera.list
</code></pre>

<p>cloudera.list</p>

<pre><code>deb [arch=amd64] http://archive.cloudera.com/cdh5/ubuntu/precise/amd64/cdh precise-cdh5 contrib
deb-src http://archive.cloudera.com/cdh5/ubuntu/precise/amd64/cdh precise-cdh5 contrib
deb [arch=amd64] http://archive.cloudera.com/cm5/ubuntu/precise/amd64/cm precise-cm5 contrib
deb-src http://archive.cloudera.com/cm5/ubuntu/precise/amd64/cm precise-cm5 contrib
</code></pre>

<p>adding key</p>

<pre><code>curl -s http://archive.cloudera.com/cdh5/ubuntu/precise/amd64/cdh/archive.key | sudo apt-key add -
sudo apt-get update
</code></pre>

<p>installing manager by manual</p>

<pre><code>sudo apt-get -q -y --force-yes install oracle-j2sdk1.7 cloudera-manager-server-db cloudera-manager-server cloudera-manager-daemons cloudera-manager-agent

# config cloudera-manager-server db
sudo /usr/share/cmf/schema/scm_prepare_database.sh mysql  -uroot -p --scm-host localhost scm scm scm_password

# start service
service cloudera-scm-server-db initdb
service cloudera-scm-server-db start
service cloudera-scm-server start
</code></pre>

<p>installing manager automatically</p>

<pre><code>sudo ./cloudera-mangaer-installer.bin
</code></pre>

<p>steps:</p>

<pre><code>apt-get -q -y --force-yes install oracle-j2sdk1.7 cloudera-manager-server-db cloudera-manager-server cloudera-manager-daemons
service cloudera-scm-server-db initdb
service cloudera-scm-server-db start
service cloudera-scm-server start
</code></pre>

<h2>Cloudera Agent</h2>

<p>installing java</p>

<pre><code>sudo apt-get install python-software-properties
sudo add-apt-repository ppa:webupd8team/java
sudo apt-get update
sudo apt-get install oracle-j2sdk1.7
</code></pre>

<p>adding sources</p>

<pre><code>sudo nano /etc/apt/sources.list.d/cloudera.list
</code></pre>

<p>cloudera.list</p>

<pre><code>deb [arch=amd64] http://archive.cloudera.com/cdh5/ubuntu/precise/amd64/cdh precise-cdh5 contrib
deb-src http://archive.cloudera.com/cdh5/ubuntu/precise/amd64/cdh precise-cdh5 contrib
deb [arch=amd64] http://archive.cloudera.com/cm5/ubuntu/precise/amd64/cm precise-cm5 contrib
deb-src http://archive.cloudera.com/cm5/ubuntu/precise/amd64/cm precise-cm5 contrib
</code></pre>

<p>adding keys</p>

<pre><code>curl -s http://archive.cloudera.com/cdh5/ubuntu/precise/amd64/cdh/archive.key | sudo apt-key add -
sudo apt-get update
</code></pre>

<p>installing agent</p>

<pre><code>sudo apt-get install cloudera-manager-agent cloudera-manager-daemons
</code></pre>

<p>configurating agent</p>

<pre><code>sudo nano /etc/cloudera-scm-agent/config.ini
</code></pre>

<p>config.ini</p>

<pre><code>server_host=insight-master  # master host name
</code></pre>

<p>start services</p>

<pre><code>sudo service cloudera-scm-agent  restart
</code></pre>

<h2>Cloudera Hadoop</h2>

<p>restart agents on slaves</p>

<pre><code>sudo service cloudera-scm-agent  restart
</code></pre>

<p>restart master</p>

<pre><code>sudo service cloudera-scm-server restart
sudo service cloudera-scm-agent  restart
</code></pre>

<p>open the link on browser:</p>

<ul>
<li><a href="http://202.120.83.101:7180">http://202.120.83.101:7180</a></li>
<li>username/password: admin/admin</li>
</ul>


<p>steps:</p>

<ul>
<li><p>step1. login</p></li>
<li><p>step2. welcome</p></li>
<li><p>step3. select hosts</p></li>
<li><p>step4. express-wizard</p></li>
<li><p>step5. install parcel</p></li>
<li><p>step6. host inspector</p></li>
</ul>


<p>updating swappiness</p>

<pre><code>vagrant ssh insight-master/insight-slave1/insight-slave2/insight-slave3/insight-slave4 # for all hosts
sudo nano /proc/sys/vm/swappiness

# modification
60 -&gt; 0
</code></pre>

<ul>
<li><p>step7. select services</p></li>
<li><p>step8. assign roles</p></li>
<li><p>step9. config db</p></li>
<li><p>step10. review steps</p></li>
<li><p>step11. start services</p></li>
<li><p>step12. done</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Configurating Nginx for Django Projects on Ubuntu]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/05/01/configurating-nginx-for-django-projects-on-ubuntu/"/>
    <updated>2015-05-01T10:54:00+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/05/01/configurating-nginx-for-django-projects-on-ubuntu</id>
    <content type="html"><![CDATA[<h2>1. Nginx</h2>

<p>installation</p>

<pre><code class="bash">$ sudo apt-get install nginx
</code></pre>

<p>configurating users</p>

<pre><code class="bash">$ sudo groupadd --system edx
$ sudo useradd --system --gid edx --home /edx/analytics/apps/edx-analytics-data-api analyticsapi
$ sudo useradd --system --gid edx --home /edx/analytics/apps/edx-analytics-dashboard analyticsdashboard

$ sudo chown -R insight:insight /edx/analytics/apps/edx-analytics-data-api
$ sudo chmod -R g+w /edx/analytics/apps/edx-analytics-data-api

$ sudo chown -R insight:insight /edx/analytics/apps/edx-analytics-dashboard
$ sudo chmod -R g+w /edx/analytics/apps/edx-analytics-dashboard
</code></pre>

<h2>2. Supervisor</h2>

<p>installation</p>

<pre><code class="bash">$ sudo apt-get install supervisor
</code></pre>

<p>configurating supervisor</p>

<pre><code class="bash">$ cd /edx/analytics
$ mkdir -p var/logs
$ cd var/logs
$ touch gunicorn_supervisor.log 
</code></pre>

<h2>3. Django Project</h2>

<p>django settings</p>

<pre><code class="bash">$ cd /edx/analytics/apps/edx-analytics-data-api/app/analyticsdataserver/settings
$ nano production.py
</code></pre>

<p>gunicorn</p>

<pre><code class="bash">$ cd /edx/analytics/apps/edx-analytics-data-api
$ source api_env/bin/activate
$ cd app
$ pip install gunicorn
$ pip install setproctitle

$ cd app
$ gunicorn analyticsdataserver.wsgi:application --bind 0.0.0.0:9001

$ cd /edx/analytics/apps/edx-analytics-data-api/api_env/bin
$ sudo nano gunicorn_start
$ sudo chown insight:insight gunicorn_start
$ sudo chmod u+x gunicorn_start
</code></pre>

<p>gunicorn_start</p>

<pre><code class="bash">#!/bin/bash
NAME="analyticsapi" # Name of the application
DJANGODIR=/edx/analytics/apps/edx-analytics-data-api/ # Django project directory
SOCKFILE=/edx/analytics/apps/edx-analytics-data-api/var/run/gunicorn.sock # we will communicte using this unix socket
USER=insight # the user to run as
GROUP=edx # the group to run as
NUM_WORKERS=3 # how many worker processes should Gunicorn spawn
DJANGO_SETTINGS_MODULE=analyticsdataserver.settings # which settings file should Django use

echo "Starting $NAME" 

# Activate the virtual environment
cd $DJANGODIR
source api_env/bin/activate
#export DJANGO_SETTINGS_MODULE=$DJANGO_SETTINGS_MODULE
export PYTHONPATH=/edx/analytics/apps/edx-analytics-data-api/api_env/bin/python

# Create the run directory if it doesn't exist
RUNDIR=$(dirname $SOCKFILE)
test -d $RUNDIR || mkdir -p $RUNDIR

# Start your Django Unicorn
# Programs meant to be run under supervisor should not daemonize themselves (do not use --daemon)
cd app
gunicorn \
--name $NAME \
--workers $NUM_WORKERS  \
analyticsdataserver.wsgi:application --bind 0.0.0.0:9001
</code></pre>

<p>supervisor</p>

<pre><code class="bash">$ sudo nano /etc/supervisor/conf.d/analyticsapi.conf
</code></pre>

<p>analyticsapi.conf</p>

<pre><code class="bash">[program:analyticsapi]
command = /edx/analytics/apps/edx-analytics-data-api/api_env/bin/gunicorn_start                    ; Command to start app
user = insight                                                                                     ; User to run as
stdout_logfile = /edx/analytics/apps/edx-analytics-data-api/var/logs/gunicorn_supervisor.log       ; Where to write log messages
redirect_stderr = true                                                                             ; Save stderr in the same log
</code></pre>

<p>run</p>

<pre><code class="bash">$ sudo supervisorctl reread
$ sudo supervisorctl update
$ sudo supervisorctl start analyticsapi
</code></pre>

<h2>4. Configurating Nginx</h2>

<p>modification</p>

<pre><code class="bash">$ sudo nano /etc/nginx/sites-available/analyticsapi
</code></pre>

<p>analyticsapi</p>

<pre><code class="bash">server {
listen   8088;
server_name 202.120.83.105;

client_max_body_size 4G;

access_log /edx/analytics/apps/edx-analytics-data-api/var/logs/nginx-access.log;
error_log /edx/analytics/apps/edx-analytics-data-api/var/logs/nginx-error.log;

location ~ ^/static/ {
    autoindex on;
    expires 1y;
    root /edx/analytics/apps/edx-analytics-data-api/app/;
    #alias  /edx/analytics/apps/edx-analytics-data-api/app/assets;
    #alias http://202.120.83.105/static/rest_framework_swagger;
}

location ~ ^/media/ {         
    root /edx/analytics/apps/edx-analytics-data-api/app/; 
    expires 24h;
    access_log   off;
}

location / {
    try_files $uri @proxy;
}

location @proxy {
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $http_host;
    proxy_redirect off;
    proxy_pass http://0.0.0.0:9001;
}
} 
</code></pre>

<p>run</p>

<pre><code class="bash">$ sudo ln -s /etc/nginx/sites-available/analyticsapi /etc/nginx/sites-enabled/analyticsapi
$ sudo service nginx restart
</code></pre>

<h3>5. Testing</h3>

<p>open the link: <a href="http://202.120.83.105:8088">http://202.120.83.105:8088</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up MySQL on Ubuntu]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/05/01/setting-up-mysql-on-ubuntu/"/>
    <updated>2015-05-01T10:50:00+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/05/01/setting-up-mysql-on-ubuntu</id>
    <content type="html"><![CDATA[<p>installation</p>

<pre><code class="bash">$ sudo apt-get install mysql-server libmysql-java
</code></pre>

<p>configuration</p>

<pre><code class="bash">$ sudo nano /etc/mysql/my.cnf

# comment bind-address
# bind-address = 127.0.0.1
</code></pre>

<p>configurating database</p>

<pre><code class="bash">$ sudo service mysql restart
$ mysql -uroot -p

$ create database analytics DEFAULT CHARACTER SET utf8;
$ grant all on analytics.* TO 'insight'@'%' IDENTIFIED BY 'analytics_password';
$ grant all on analytics.* TO 'insight'@'202.120.83.105' IDENTIFIED BY 'analytics_password';
$ grant all on analytics.* TO 'insight'@'202.120.83.101' IDENTIFIED BY 'analytics_password';

$ GRANT ALL ON *.* TO insight@'localhost'  IDENTIFIED BY 'insight' WITH GRANT OPTION;

$ exit;
</code></pre>
]]></content>
  </entry>
  
</feed>
