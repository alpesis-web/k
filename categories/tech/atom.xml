<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | K]]></title>
  <link href="http://k.arttechresearch.com/categories/tech/atom.xml" rel="self"/>
  <link href="http://k.arttechresearch.com/"/>
  <updated>2016-01-04T14:04:42+08:00</updated>
  <id>http://k.arttechresearch.com/</id>
  <author>
    <name><![CDATA[K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing Scala]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/01/04/installing-scala/"/>
    <updated>2016-01-04T13:06:34+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/01/04/installing-scala</id>
    <content type="html"><![CDATA[<h2>Installation</h2>

<h3>Ubuntu 14.04</h3>

<pre><code class="bash">$ cd /tmp
$ wget http://www.scala-lang.org/files/archive/scala-2.11.6.deb
$ sudo dpkg -i scala-2.11.6.deb
$ sudo apt-get update
$ sudo apt-get install scala
</code></pre>

<h3>OS X</h3>

<pre><code class="bash">$ brew update
$ brew install scala
$ brew install sbt
</code></pre>

<h2>Testing</h2>

<pre><code class="bash">vagrant@vagrant-ubuntu-trusty-64:/vagrant/scala$ scala
Welcome to Scala version 2.11.6 (Java HotSpot(TM) 64-Bit Server VM, Java 1.8.0_66).
Type in expressions to have them evaluated.
Type :help for more information.

scala&gt; 1+1
res0: Int = 2

scala&gt; println("Hello")
Hello

scala&gt;
</code></pre>

<h2>Vim Configuration</h2>

<p>syntax highlight: <a href="https://github.com/derekwyatt/vim-scala">vim-scala</a></p>

<pre><code class="bash"># wget
$ mkdir -p ~/.vim/{ftdetect,indent,syntax} &amp;&amp; for d in ftdetect indent syntax ; do wget -O ~/.vim/$d/scala.vim https://raw.githubusercontent.com/derekwyatt/vim-scala/master/$d/scala.vim; done

# curl
$ mkdir -p ~/.vim/{ftdetect,indent,syntax} &amp;&amp; for d in ftdetect indent syntax ; do curl -o ~/.vim/$d/scala.vim https://raw.githubusercontent.com/derekwyatt/vim-scala/master/$d/scala.vim; done
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Advanced Commands]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/01/03/linux-advanced-commands/"/>
    <updated>2016-01-03T22:20:08+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/01/03/linux-advanced-commands</id>
    <content type="html"><![CDATA[<h2>mkdir</h2>

<pre><code class="bash">$ mkdir -p project/{bin,venvs,app/{requirements,app/tests,docs,scripts}}
</code></pre>

<h2>tar</h2>

<pre><code class="bash">$ tar xvf -C /path/to/dest xxx.tar.gz
$ cd /path/to/dest &amp;&amp; tar xvf xxx.tar.gz
$ cd /path/to/dest || mkdir -p /path/to/dest

$ cd /path/to/dest || mkdir -p /path/to/dest &amp;&amp; tar xvf -C /path/to/dest xxx.tar.gz

$ cd /path/to/dest || \
&gt; mkdir -p /path/to/dest &amp;&amp; \
&gt; tar xvf -C /path/to/dest xxx.tar.gz

$ ( cd /path/to/dest || mkdir -p /path/to/dest &amp;&amp; \
&gt; VAR=$PWD; cd ~; tar xvf -C $VAR archive.tar ) | \
&gt; mailx admin -S "Archive contents"

$ { cp $(VAR)a . &amp;&amp; chown -R guest.guest a &amp;&amp; \
&gt; tar cvf newarchive.tar a; } | \
&gt; mailx admin -S "New archive"
</code></pre>

<h2>patterns</h2>

<h3>file name: xargs</h3>

<pre><code class="bash">$ find some-file-criteria some-file-path | xargs some-great-command-that-needs-filename-arguements
</code></pre>

<h3>file contents: grep</h3>

<pre><code class="bash">$ time grep and tmp/a/longfile.txt | wc -l             # multiple files
$ time grep -c and tmp/a/longfile.txt                  # single file

$ grep -o and tmp/a/longfile.txt | wc -l
</code></pre>

<h3>content lines: awk</h3>

<pre><code class="bash">$ ls -la | awk '$6 == "Dec"'
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Flask-Restless]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/01/03/flask-restless/"/>
    <updated>2016-01-03T00:09:13+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/01/03/flask-restless</id>
    <content type="html"><![CDATA[<p>Source Codes:</p>

<ul>
<li>original: <a href="https://github.com/jfinkels/flask-restless">https://github.com/jfinkels/flask-restless</a></li>
<li>refactored: <a href="https://github.com/KellyChan/flask-restless">https://github.com/KellyChan/flask-restless</a></li>
</ul>


<p>Notes:
Flask-restless was developed by jfinkels, this article is the study notes
of his source code, and refactoring some codes by personal purpose.</p>

<p>All the commands and codes below are based on the <a href="https://github.com/KellyChan/flask-restless">refactored codes</a>.</p>

<h2>Setup DevEnv</h2>

<pre><code class="bash">$ git clone https://github.com/KellyChan/flask-restless
$ cd flask-restless

# update Vagrantfile (Virtualbox + Vagrant)
# then create the project and setup the virtualenv
$ virtualenv venvs/flask-restless
$ source venvs/flask-restless/bin/activate

# install requirements
$ pip install -r requirements/base.txt
$ pip install -r requirements/test.txt
$ pip install -r requirements/docs.txt
</code></pre>

<h2>Project Structure</h2>

<pre><code class="bash">Dev
  |---- requirements/
  |---- flask_restless/
  |---- artwork/

DevOps
  |---- setup.cfg
  |---- setup.py
  |---- scripts/

Tests
  |---- tests/

Docs
  |---- docs/
  |---- examples/

Others
  |---- AUTHORS
  |---- licenses/
  |---- CHANGES
  |---- README.md
</code></pre>

<h2>Dev</h2>

<p>files</p>

<pre><code class="bash">flask-restless/
    |---- helpers.py                   # utils, mostly about SQLalchemy objects
    |---- manager.py                   # API creator
    |---- search.py                    # seraching database
    |---- views.py                     # views
</code></pre>

<h2>Test</h2>

<h3>cli</h3>

<pre><code class="bash">$ nosetests
$ python setup.py test
$ nosetests --with-coverage --cover-package=flask_restless --cover-html \
    --cover-html-dir=&lt;somedir&gt;
$ savalidation
</code></pre>

<h2>Docs</h2>

<h3>cli</h3>

<pre><code class="bash">$ git submodule update --init
$ python setup.py develop
$ cd docs
$ make html
$ sphinx-autobuild ./ _build/html/
</code></pre>

<h3>theming</h3>

<h2>DevOps</h2>

<p>installation</p>

<pre><code class="bash">$ python setup.py --help
$ python setup.py install
</code></pre>

<h2>References</h2>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Sphinx]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/12/31/python-sphinx/"/>
    <updated>2015-12-31T01:25:59+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/12/31/python-sphinx</id>
    <content type="html"><![CDATA[<p>Sphinx is a Python documentation generator. To write the project documentation with
Sphinx, here are the steps:</p>

<ol>
<li>Installing Sphinx and setting up a project</li>
<li>Configuring Sphinx</li>
<li>Customizing the theme</li>
<li>Writing the docs</li>
</ol>


<h2>Sphinx Setup</h2>

<p>Sphinx and plugins</p>

<ul>
<li>sphinx</li>
<li>sphinx-autobuild: live html preview</li>
</ul>


<h3>Installation</h3>

<pre><code class="bash">$ pip install sphinx
$ pip install sphinx-autobuild
</code></pre>

<h3>Quick Start</h3>

<pre><code class="bash">$ sphinx-quickstart

# sphinx-autobuild &lt;DOCS_PATH&gt; &lt;DOCS_PATH/BUILD/HTML&gt;
$ sphinx-autobuild docs docs/_build/html
</code></pre>

<p>other commands</p>

<pre><code class="bash make.bat">if "%1" == "help" (
        :help
        echo.Please use `make ^&lt;target^&gt;` where ^&lt;target^&gt; is one of
        echo.  html       to make standalone HTML files
        echo.  dirhtml    to make HTML files named index.html in directories
        echo.  singlehtml to make a single large HTML file
        echo.  pickle     to make pickle files
        echo.  json       to make JSON files
        echo.  htmlhelp   to make HTML files and a HTML help project
        echo.  qthelp     to make HTML files and a qthelp project
        echo.  devhelp    to make HTML files and a Devhelp project
        echo.  epub       to make an epub
        echo.  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter
        echo.  text       to make text files
        echo.  man        to make manual pages
        echo.  texinfo    to make Texinfo files
        echo.  gettext    to make PO message catalogs
        echo.  changes    to make an overview over all changed/added/deprecated items
        echo.  xml        to make Docutils-native XML files
        echo.  pseudoxml  to make pseudoxml-XML files for display purposes
        echo.  linkcheck  to check all external links for integrity
        echo.  doctest    to run all doctests embedded in the documentation if enabled
        echo.  coverage   to run coverage check of the documentation if enabled
        goto end
)
</code></pre>

<h2>Sphinx Settings</h2>

<pre><code class="python conf.py"># -- General configuration ------------------------------------------------
# -- Options for HTML output ----------------------------------------------
# -- Options for LaTeX output ---------------------------------------------
# -- Options for manual page output ---------------------------------------
# -- Options for Texinfo output -------------------------------------------
</code></pre>

<h2>Sphinx Theming</h2>

<p>There are two options to create a theme:</p>

<ul>
<li>one is to change a default theme,</li>
<li>another is to create a new one by yourself.</li>
</ul>


<h3>Default Themes</h3>

<p>All html configurations are stored in <code>conf.py</code>. Official docs is <a href="http://sphinx-doc.org/theming.html">here</a>.</p>

<pre><code class="python conf.py"># -- Options for HTML output ----------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
# default themes: alabaster, sphinx_rtd_theme, classic, sphinxdoc,
#     scrolls, agogo, traditional, nature, haiku, pyramid, bizstyle
html_theme = 'nature'

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
# html_theme_options = {
#     "rightsidebar": "true",
#     "relbarbgcolor": "black"
# }
html_theme_options = {}

# Add any paths that contain custom themes here, relative to this directory.
# html_theme_path = ["."]
html_theme_path = []
</code></pre>

<h3>Custom Themes</h3>

<h2>RST</h2>

<h3>Makeup Constructs</h3>

<p>Official docs is <a href="http://sphinx-doc.org/markup/index.html">here</a>.</p>

<h4>toctree</h4>

<pre><code class="python toctree">.. toctree::
   :maxdepth: 2

.. toctree::
   :numbered:

.. toctree::
   :caption: Table of Contents
   :name: mastertoc

.. toctree::
   :titlesonly:

.. toctree::
   :glob:

.. toctree::
   :hidden:

.. toctree::
   :includehidden:
</code></pre>

<h4>paragraph-level makeup</h4>

<pre><code class="python paragraph-level">.. note::
.. warning::

.. versionadded:: 2.5
.. versionchanged:: version
.. deprecated:: 3.1

.. seealso::

.. rubric:: title

.. centered:: LICENSE AGREEMENT

.. hlist::
   :columns: 3

   * A list of
   * short items
   * that should be
   * displayed
   * horizontally

.. glossary::
.. productionlist::
</code></pre>

<h4>codes</h4>

<p>Official docs is <a href="http://sphinx-doc.org/markup/code.html">here</a>.</p>

<pre><code class="python codes">.. highlight:: c
.. code-block:: ruby

.. highlight:: python
   :linenothreshold: 5

.. code-block:: ruby
   :linenos:

.. code-block:: python
   :emphasize-lines: 3,5

.. literalinclude:: example.py

.. literalinclude:: example.rb
   :language: ruby
   :emphasize-lines: 12,15-18
   :linenos:

.. literalinclude:: example.py
   :encoding: latin-1

.. literalinclude:: example.py
   :pyobject: Timer.start

.. literalinclude:: example.py
   :lines: 1,3,5-10,20-

.. literalinclude:: example.py
   :diff: example.py.orig

.. code-block:: python
   :caption: this.py
   :name: this-py

.. literalinclude:: example.rb
   :language: ruby
   :dedent: 4
   :lines: 10-15
</code></pre>

<h4>inline makeup</h4>

<p>Official docs is <a href="http://sphinx-doc.org/markup/inline.html">here</a>.</p>

<pre><code class="python inline">:any:
:ref:
:doc:

:download:

:numref:

:envvar:
:token:
:keyword:
:option:
:term:

:abbr:
:command:
:dfn:
:file:
:guilabel:
:kbd:
:mailheader:
:makevar:
:manpage:
:menuselection:
:mimetype:
:newsgroup:
:program:
:regexp:
:samp:
:pep:
:rfc:

|release|
|version|
|today|
</code></pre>

<h4>others</h4>

<pre><code class="python otheres">:fieldname: Field content

.. sectionauthor:: name &lt;email&gt;
.. sectionauthor:: Guido van Rossum &lt;guido@python.org&gt;
.. codeauthor:: name &lt;email&gt;

.. index:: &lt;entries&gt;
.. index::
   single: execution; context
   module: __main__
   module: sys
   triple: module; search; path

.. index:: Python
.. index:: ! Python
.. index:: BNF, grammar, syntax, notation

.. only:: &lt;expression&gt;
.. only:: html and draft

.. tabularcolumns:: column spec
|l|l|l|
</code></pre>

<h3>Primer</h3>

<p>Official docs is <a href="http://sphinx-doc.org/rest.html">here</a>.</p>

<h2>References</h2>

<ul>
<li><a href="http://sphinx-doc.org/contents.html">Official Docs</a></li>
<li><a href="https://pythonhosted.org/sphinxcontrib-httpdomain/">sphinxcontrib-httpdomain</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Web APIs]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/12/30/web-apis/"/>
    <updated>2015-12-30T16:21:13+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/12/30/web-apis</id>
    <content type="html"><![CDATA[<h2>Definition</h2>

<p>Web API is a set of Hypertext Transfer Protocol (HTTP) request mesages along with the structure of reponse messages (XML or JSON format).</p>

<p>Types:</p>

<ul>
<li>Simple Object Access Protocol (SOAP)</li>
<li>REpresentational State Transfer (REST)</li>
</ul>


<h2>SOAP</h2>

<p>SOAP is a protocol specification for exchanging structured inforamtion of web service (XML based) by Hypertext Transfer Protocol (HTTP) or Simple Mail Transfer Protocol (SMTP).</p>

<h2>REST</h2>

<h3>Definition</h3>

<p>REST was definied by Roy Thomas Fieldiing in his 2000 PhD dissertation <a href="http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm">&ldquo;Architectural Styles and the Design of Network-based Software Architectures&rdquo;</a>.</p>

<p>Referring to Wikipedia, <a href="https://en.wikipedia.org/wiki/Representational_state_transfer">REST</a> communicates over Hypertext Transfer Protocal (HTTP) with the same HTTP verbs (GET, POST, PUT, DELETE, etc.) that web browsers user to retrieve web pages and to send data to remote servers.</p>

<p>REST architectural style</p>

<ul>
<li>Performance</li>
<li>Scalability</li>
<li>Simplicity of interfaces</li>
<li>Modifiability of components to meet changing needs (even while the application is running)</li>
<li>Visibility of communication between components by service agents</li>
<li>Portability of components by moving program code with the data</li>
<li>Reliability is the resistance to failure at the system level in the presence of failures within components, connectors, or data</li>
</ul>


<h3>RESTful APIs</h3>

<p>elements</p>

<ul>
<li>URI</li>
<li>JSON data</li>
<li>HTTP methods: GET, POST, PUT, DELETE, etc</li>
</ul>


<p>design rules</p>

<ul>
<li>client-server: there should be a sepration between the server that offers a service, and the client that consumes it.</li>
<li>stateless: each requests from a client must contain all the inforamtion required by the server to carry out the request.</li>
<li>cacheable: the server must indicate to the client if requests can be cached or not.</li>
<li>layered system: communication between a client and a server should be standarized in such a way that allows intermediaries to respond to requests instead of the end server, without the client having to do anything different.</li>
<li>code on demand: servers can provide executable code or scripts for clients to execute in their context.</li>
</ul>

]]></content>
  </entry>
  
</feed>
