<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | Kelly Chan]]></title>
  <link href="http://k.arttechresearch.com/categories/tech/atom.xml" rel="self"/>
  <link href="http://k.arttechresearch.com/"/>
  <updated>2015-10-19T11:30:30+08:00</updated>
  <id>http://k.arttechresearch.com/</id>
  <author>
    <name><![CDATA[Kelly Chan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setup the Devstack for edX Alton]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/10/18/setup-the-devstack-for-edx-alton/"/>
    <updated>2015-10-18T16:24:54+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/10/18/setup-the-devstack-for-edx-alton</id>
    <content type="html"><![CDATA[<h2>Prequisitions</h2>

<ul>
<li>Ubuntu 14.04</li>
<li>Docker</li>
<li>Git</li>
</ul>


<h2>1. Installation</h2>

<pre><code class="bash">$ cd /path/to/project
$ git clone https://github.com/edx/alton.git
$ cd althon
$ sudo docker build -t alton .
</code></pre>

<p>Once done, check the image with <code>docker images</code></p>

<pre><code class="bash">vagrant@vagrant-ubuntu-trusty-64:/tmp/alton$ sudo docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
alton               latest              367fc778d527        29 seconds ago      1.084 GB
python              2.7.7               a87a2288ce78        15 months ago       1.043 GB
</code></pre>

<h2>References</h2>

<ul>
<li><a href="https://github.com/edx/alton">alton</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Key Concepts]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/10/18/docker-key-concepts/"/>
    <updated>2015-10-18T14:43:07+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/10/18/docker-key-concepts</id>
    <content type="html"><![CDATA[<h2>1. Docker Host and Docker Client</h2>

<h3>1.1. Linux</h3>

<p><img src="https://docs.docker.com/installation/images/linux_docker_host.svg" /></p>

<p>In a Docker installation on Linux, your physical machine is both the localhost and the Docker host.</p>

<ul>
<li>networking, (localhost) your computer, (docker host) the computer which the containers run</li>
<li>(localhost) runs docker client, docker daemon, any containers</li>
<li>(port) docker containers using standard <code>localhost</code> addressing such as <code>localhost:8000</code> or <code>0.0.0.0:8376</code></li>
</ul>


<h3>1.2. OS X</h3>

<p><img src="https://docs.docker.com/installation/images/mac_docker_host.svg" /></p>

<p>In an OS X installation, the docker daemon is running inside a Linux VM called i<code>default</code>.
The <code>default</code> is a lightweight Linux VM made specifically to run the Docker daemon on Mac OS X.
The VM runs completely from RAM, is a small ~24MB download, and boots in approximately 5s.</p>

<p>In OS X, the Docker host address is the address of the Linux VM.</p>

<ul>
<li>OS X &lt;=> VM &lt;=> containers</li>
<li>When you start the VM with docker-machine it is assigned an IP address.</li>
<li>When you start a container, the ports on a container map to ports on the VM.</li>
</ul>


<h2>Docker vs Vagrant/VirtualBox + Git</h2>

<table>
<thead>
<tr>
<th style="text-align:left;"> Docker     </th>
<th style="text-align:left;"> Vagrant         </th>
<th style="text-align:left;"> VirtualBox  </th>
<th style="text-align:left;"> Git   </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> Dockerfile </td>
<td style="text-align:left;"> Vagrantfile     </td>
<td style="text-align:left;">             </td>
<td style="text-align:left;">       </td>
</tr>
<tr>
<td style="text-align:left;"> image      </td>
<td style="text-align:left;"> box             </td>
<td style="text-align:left;">             </td>
<td style="text-align:left;">       </td>
</tr>
<tr>
<td style="text-align:left;"> container  </td>
<td style="text-align:left;">                 </td>
<td style="text-align:left;">             </td>
<td style="text-align:left;">       </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating TOC With Javascript for Octopress]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/10/17/generating-toc-with-javascript-for-octopress/"/>
    <updated>2015-10-17T12:37:04+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/10/17/generating-toc-with-javascript-for-octopress</id>
    <content type="html"><![CDATA[<p>Features:</p>

<ul>
<li>genearting a table of contents in a article</li>
<li>user can set toc if true/false</li>
</ul>


<p>Devkits:</p>

<ul>
<li>javascript</li>
<li>html</li>
<li>sass</li>
</ul>


<h2>1. HTML</h2>

<h3>1.1. toc_generator.html</h3>

<p>octopress/source/_includes/toc_generator.html</p>

<pre><code class="html toc_generator.html">    {\% if index %\}
      {\% comment %\}
        No table of contents on the index page.
      {\% endcomment %\}

    {\% elsif page.toc == true %\}
      &lt;script type="text/javascript"&gt;
      jQuery(document).ready(function() {
        // Put a TOC right before the entry content.
        generateTOC('.entry-content', 'Table of Contents');
      });
      &lt;/script&gt;
    {\% endif %\}
</code></pre>

<h3>1.2. article.html</h3>

<p>Include <code>toc_generator.html</code> at the end of <code>article.html</code></p>

<pre><code class="html article.html">...

{\% include toc_generator.html %\}
</code></pre>

<h2>2. Javascript</h2>

<h3>2.1. update the libraries</h3>

<p>octopress/source/_includes/head.html</p>

<p>```javascript head.html</p>

<script src="http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.9.1.min.js"></script>


<script src="{\{ root_url }\}/javascripts/jquery.tableofcontents.min.js" type="text/javascript"></script>


<script src="{\{ root_url }\}/javascripts/toc_generator.js" type="text/javascript"></script>


<pre><code>
### 2.2. jquery.tableofcontents.min.js

Go to [TOC jQuery Plugin](http://fuelyourcoding.com/scripts/toc/), 
download the library, and copy `jquery.tableofcontents.min.js` to `octopress/source/javascript/`.


### 2.3. toc_generator.js

octopress/source/javascript/toc_generator.js
</code></pre>

<pre><code>function generateTOC(insertBefore, heading) {
  var container = jQuery("&lt;div id='tocBlock'&gt;&lt;/div&gt;");
  var div = jQuery("&lt;ul id='toc'&gt;&lt;/ul&gt;");
  var content = $(insertBefore).first();

  if (heading != undefined &amp;&amp; heading != null) {
    container.append('&lt;span class="tocHeading"&gt;' + heading + '&lt;/span&gt;');
  }

  div.tableOfContents(content);
  container.append(div);
  container.insertBefore(insertBefore);
}
</code></pre>

<pre><code>
## 3. SASS

### 3.1. _utilities.scss

octopress/sass/base/_utilities.scss
</code></pre>

<pre><code>@mixin rounded-border($radius: 10px) {
    border-radius: $radius;
    -moz-border-radius: $radius;
   padding: $radius;
}

@mixin centered($width: auto) {
    width: $width !important;
    margin-left: auto !important;
    margin-right: auto !important;
}

@mixin drop-shadow-right-bottom($width: 5px, $color: #999) {
    box-shadow: $width $width $width $color;
    -moz-box-shadow: $width $width $width $color;
    -webkit-box-shadow: $width $width $width $color;
}
</code></pre>

<pre><code>
### 3.2. _toc_generator.scss

ocotpress/sass/partials/_toc_generator.scss
</code></pre>

<pre><code>bg: #e8e8e8;
$toc-incr: 5px;

div#tocBlock {
    @include drop-shadow-right-bottom(5px, #999);
    @include rounded-border(10px);
    float: right;
    font-size: 10pt;
    width: 300px;
    padding-left: 20px;
    padding-right: 10px;
    padding-top: 10px;
    padding-bottom: 0px;

    background: $toc-bg;
    border: solid 1px #ccc;
    margin: 0 0 10px 15px;

    .tocHeading {
    font-weight: bold;
    font-size: 125%;
    }

    ul { list-style: none; }

    #toc {
    background: $toc-bg;
    ul {
        li {
        margin-left: $toc-incr !important;
        padding: 0 !important;
        list-style: disc;
        }
    }
    }
}
</code></pre>

<pre><code>
### 3.3. _partials.scss

octopress/sass/_particials.scss
</code></pre>

<pre><code>@import "partials/toc_generator";
</code></pre>

<pre><code>
## 4. Rakefile

`octopress/Rakefile`: update the head variable for `new_post_tech`, `new_post_art` and `new_post_life`.
</code></pre>

<pre><code>post.puts "toc: false"
</code></pre>

<p>```</p>

<h2>5. Testing</h2>

<p><code>rake new_post_tech['post_name']</code>, check the header if <code>toc: false</code> exists.</p>

<p>If <code>toc: true</code>, the table of contents will be generated, if <code>toc:false</code>, no table of contents.</p>

<h2>Reference</h2>

<ul>
<li><a href="http://brizzled.clapper.org/blog/2012/02/04/generating-a-table-of-contents-in-octopress/">Generating a table of contents in Octopress</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding TOC Plugin for Octopress]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/10/16/adding-toc-plugin-for-octopress/"/>
    <updated>2015-10-16T22:31:58+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/10/16/adding-toc-plugin-for-octopress</id>
    <content type="html"><![CDATA[<h2>1. Plugin: toc_generator.rb</h2>

<h3>1.1. toc_generator.rb</h3>

<p>octopress/plugins/toc_generator.rb</p>

<pre><code class="ruby toc_generator.rb">require 'nokogiri'

module Jekyll

  module TOCGenerator

    TOGGLE_HTML = '&lt;div id="toctitle"&gt;&lt;h2&gt;%1&lt;/h2&gt;%2&lt;/div&gt;'
    TOC_CONTAINER_HTML = '&lt;div id="toc-container"&gt;&lt;table class="toc" id="toc"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;%1&lt;ul&gt;%2&lt;/ul&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/div&gt;'
    HIDE_HTML = '&lt;span class="toctoggle"&gt;[&lt;a id="toctogglelink" class="internal" href="#"&gt;%1&lt;/a&gt;]&lt;/span&gt;'

    def toc_generate(html)
      # No Toc can be specified on every single page
      # For example the index page has no table of contents
      no_toc = @context.environments.first["page"]["noToc"] || false;

      return html if no_toc

      config = @context.registers[:site].config

      # Minimum number of items needed to show TOC, default 0 (0 means no minimum)
      min_items_to_show_toc = config["minItemsToShowToc"] || 0

      anchor_prefix = config["anchorPrefix"] || 'tocAnchor-'

      # better for traditional page seo, commonlly use h1 as title
      toc_top_tag = config["tocTopTag"] || 'h1'
      toc_top_tag = toc_top_tag.gsub(/h/, '').to_i

      toc_top_tag = 5 if toc_top_tag &gt; 5

      toc_sec_tag = toc_top_tag + 1
      toc_top_tag = "h#{toc_top_tag}"
      toc_sec_tag = "h#{toc_sec_tag}"


      # Text labels
      contents_label     = config["contentsLabel"] || 'Contents'
      hide_label         = config["hideLabel"] || 'hide'
      # show_label       = config["showLabel"] || 'show' # unused
      show_toggle_button = config["showToggleButton"]

      toc_html = ''
      toc_level = 1
      toc_section = 1
      item_number = 1
      level_html = ''

      doc = Nokogiri::HTML(html)

      # Find H1 tag and all its H2 siblings until next H1
      doc.css(toc_top_tag).each do |tag|
        # TODO This XPATH expression can greatly improved
        ct    = tag.xpath("count(following-sibling::#{toc_top_tag})")
        sects = tag.xpath("following-sibling::#{toc_sec_tag}[count(following-sibling::#{toc_top_tag})=#{ct}]")

        level_html    = '';
        inner_section = 0;

        sects.map.each do |sect|
          inner_section += 1;
          anchor_id = [
                        anchor_prefix, toc_level, '-', toc_section, '-',
                        inner_section
                      ].map(&amp;:to_s).join ''

          sect['id'] = "#{anchor_id}"

          level_html += create_level_html(anchor_id,
                                          toc_level + 1,
                                          toc_section + inner_section,
                                          item_number.to_s + '.' + inner_section.to_s,
                                          sect.text,
                                          '')
        end

        level_html = '&lt;ul&gt;' + level_html + '&lt;/ul&gt;' if level_html.length &gt; 0

        anchor_id = anchor_prefix + toc_level.to_s + '-' + toc_section.to_s;
        tag['id'] = "#{anchor_id}"

        toc_html += create_level_html(anchor_id,
                                      toc_level,
                                      toc_section,
                                      item_number,
                                      tag.text,
                                      level_html);

        toc_section += 1 + inner_section;
        item_number += 1;
      end

      # for convenience item_number starts from 1
      # so we decrement it to obtain the index count
      toc_index_count = item_number - 1

      return html unless toc_html.length &gt; 0

      hide_html = '';
      hide_html = HIDE_HTML.gsub('%1', hide_label) if (show_toggle_button)

      if min_items_to_show_toc &lt;= toc_index_count
        replaced_toggle_html = TOGGLE_HTML
        .gsub('%1', contents_label)
        .gsub('%2', hide_html);

        toc_table = TOC_CONTAINER_HTML
        .gsub('%1', replaced_toggle_html)
        .gsub('%2', toc_html);

        doc.css('body').children.before(toc_table)
      end

      doc.css('body').children.to_xhtml(indent:3, indent_text:" ")
    end

    private

    def create_level_html(anchor_id, toc_level, toc_section, tocNumber, tocText, tocInner)
      link = '&lt;a href="#%1"&gt;&lt;span class="tocnumber"&gt;%2&lt;/span&gt; &lt;span class="toctext"&gt;%3&lt;/span&gt;&lt;/a&gt;%4'
      .gsub('%1', anchor_id.to_s)
      .gsub('%2', tocNumber.to_s)
      .gsub('%3', tocText)
      .gsub('%4', tocInner ? tocInner : '');
      '&lt;li class="toc_level-%1 toc_section-%2"&gt;%3&lt;/li&gt;'
      .gsub('%1', toc_level.to_s)
      .gsub('%2', toc_section.to_s)
      .gsub('%3', link)
    end

  end

end

Liquid::Template.register_filter(Jekyll::TOCGenerator)
</code></pre>

<h3>1.2. Gemfile</h3>

<pre><code>gem 'nokogiri'
</code></pre>

<h3>1.3. _config.yml</h3>

<pre><code class="yml _config.yml">#---------------------------#
#      TOC Settings         #
#---------------------------#

minItemsToShowToc: 0
tocTopTag: h1
anchorPrefix: tocAnchor-
showToggleButton: false
</code></pre>

<p>Variable definitions</p>

<table>
<tr>
<th>Parameter name</th>
<th>Description</th>
<th>Default value</th>
</tr>

<tr>
<td>minItemsToShowToc</td>
<td>Minimum number of items to show the TOC<br/>Suppose you want to generated the TOC only if there are at least 3 H1</td>
<td>0 (no limit)</td>
</tr>

<tr>
<td>tocTopTag</td>
<td>The top level tag given nokogiri to find<br/>Suppose you want to generated the TOC start form h1 to h5</td>
<td>h1</td>
</tr>
<tr>
<td>anchorPrefix</td>
<td>The prefix used to generate the anchor name</td>
<td>tocAnchor-</td>
</tr>

<tr>
<td>showToggleButton</td>
<td>The TOC has a button used to collapse/expand the list, this requires a little of Javascript
<br/>This package contains a jQuery plugin to handle the click</td>
<td>false</td>
</tr>
</table>


<h2>2. HTML: source/_includes/article.html</h2>

<p>source/_includes/article.html</p>

<pre><code class="html article.html">    &lt;div&gt;
        {\{ content | toc_generate }\}
    &lt;/div&gt;
</code></pre>

<h2>3. SASS: _toc_generator.scss</h2>

<p>sass/plugins/_toc_generator.scss</p>

<pre><code class="css _toc_generator.scss">#toc, .toc, .mw-warning {
    background-color: #F9F9F9;
    border: 1px solid #AAAAAA;
    font-size: 95%;
    padding: 5px;
}
#toc h2, .toc h2 {
    border: medium none;
    display: inline;
    font-size: 100%;
    font-weight: bold;
    padding: 0;
}
#toc #toctitle, .toc #toctitle, #toc .toctitle, .toc .toctitle {
    text-align: center;
    margin:0 8px 4px 14px;
    padding-top:8px;
    line-height: 1.5;
    overflow:hidden;
}


#toc ul, .toc ul {
    list-style-image: none;
    list-style-type: none;
    margin:0 8px 7px 14px;
    padding-left: 0;
    text-align: left;
}
#toc ul ul, .toc ul ul {
    margin: 0 0 0 2em;
}
#toc .toctoggle, .toc .toctoggle {
    font-size: 94%;
}

#toc ul li {
    list-style-type: none;
    padding-left: 0;
}

#toc-container {
    margin-bottom: 10px;
}
</code></pre>

<h2>4. Javascript: jquery.tocLight.js</h2>

<pre><code class="javascript jquery.tocLight.js">/*
 * jQuery Table of Content Generator Support for Jekyll v1.0
 *
 * https://github.com/dafi/jekyll-tocmd-generator
 * Examples and documentation at: https://github.com/dafi/jekyll-tocmd-generator
 *
 * Requires: jQuery v1.7+
 *
 * Copyright (c) 2013 Davide Ficano
 *
 * Dual licensed under the MIT and GPL licenses:
 *   http://www.opensource.org/licenses/mit-license.php
 *   http://www.gnu.org/licenses/gpl.html
 */
(function($) {
    $.toc = {};
    $.toc.clickHideButton = function(settings) {
        var config = {
            saveShowStatus: false,
            hideText: 'hide',
            showText: 'show'};

        if (settings) {
            $.extend(config, settings);
        }

        $('#toctogglelink').click(function() {
            var ul = $($('#toc ul')[0]);

            if (ul.is(':visible')) {
                ul.hide();
                $(this).text(config.showText);
                if (config.saveShowStatus) {
                    $.cookie('toc-hide', '1', { expires: 365, path: '/' });
                }
                $('#toc').addClass('tochidden');
            } else {
                ul.show();
                $(this).text(config.hideText);
                if (config.saveShowStatus) {
                    $.removeCookie('toc-hide', { path: '/' });
                }
                $('#toc').removeClass('tochidden');
            }
            return false;
        });

        if (config.saveShowStatus &amp;&amp; $.cookie('toc-hide')) {
            var ul = $($('#toc ul')[0]);

            ul.hide();
            $('#toctogglelink').text(config.showText);
            $('#toc').addClass('tochidden');
        }

    }
})(jQuery);
</code></pre>

<p>update the html template</p>

<pre><code class="html article.html">&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;{\{ page.title }\}&lt;/title&gt;

    &lt;script src="http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="js/jquery.tocLight.js"&gt;&lt;/script&gt;

    &lt;script type="text/javascript"&gt;
        $(function() {
          $.toc.clickHideButton();
        });
  &lt;/script&gt;

  &lt;/head&gt;
  &lt;body id="small"&gt;
        {\{ content | toc_generate }\}
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>

<h2>4. Testing</h2>

<p><code>rake generate</code> and <code>rake preview</code></p>

<h2>Reference</h2>

<ul>
<li><a href="https://github.com/dafi/jekyll-toc-generator">jekyll-toc-generator</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MathJax With Octopress]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/10/13/using-mathjax-with-octopress/"/>
    <updated>2015-10-13T10:26:29+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/10/13/using-mathjax-with-octopress</id>
    <content type="html"><![CDATA[<h2>1. Adding MathJax</h2>

<pre><code class="bash">$ vim octopress/_includes/mathjax.html
</code></pre>

<p>mathjax.html</p>

<p>```html</p>

<!-- MathJax -->


<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    tex2jax: {
      inlineMath: [ ['$','$'], ["\\(","\\)"] ],
      processEscapes: true
    }
  });
</script>


<script type="text/x-mathjax-config">
    MathJax.Hub.Config({
      tex2jax: {
        skipTags: ['script', 'noscript', 'style', 'textarea', 'pre', 'code']
      }
    });
</script>


<script type="text/x-mathjax-config">
    MathJax.Hub.Queue(function() {
        var all = MathJax.Hub.getAllJax(), i;
        for(i=0; i < all.length; i += 1) {
            all[i].SourceElement().parentNode.className += ' has-jax';
        }
    });
</script>


<script type="text/javascript"
   src="http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML">
</script>


<pre><code>
## 2. Including MathJax in head.html
</code></pre>

<p>$ vim octopress/_includes/head.html
```</p>

<p>head.html</p>

<pre><code class="html">{\% include mathjax.html %\}
</code></pre>
]]></content>
  </entry>
  
</feed>
