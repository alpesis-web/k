<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | K]]></title>
  <link href="http://k.arttechresearch.com/categories/tech/atom.xml" rel="self"/>
  <link href="http://k.arttechresearch.com/"/>
  <updated>2016-04-08T01:34:58+08:00</updated>
  <id>http://k.arttechresearch.com/</id>
  <author>
    <name><![CDATA[K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Programming Languages Comparison: Operators]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/04/07/programming-languages-comparison-operators/"/>
    <updated>2016-04-07T23:57:09+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/04/07/programming-languages-comparison-operators</id>
    <content type="html"><![CDATA[<h2>Task</h2>

<ul>
<li>get the input: mealCost, tipPercent, taxPercent</li>
<li>calculate the tip: tip = mealCost * tipPercent / 100</li>
<li>calculate the tax: tax = mealCost * taxPercent / 100</li>
<li>calculate the totalCost: totalCost = mealCost + tip + tax</li>
<li>round the totalCost</li>
<li>print the output</li>
</ul>


<h2>Solutions</h2>

<h3>C</h3>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;

int main() {

    /* Enter your code here. Read input from STDIN. Print output to STDOUT */
    float mealCost;
    float tipPercent;
    float taxPercent;

    scanf("%f", &amp;mealCost);
    scanf("\n%f\n", &amp;tipPercent);
    scanf("%f", &amp;taxPercent);

    double tip = mealCost * tipPercent / 100.0;
    double tax = mealCost * taxPercent / 100.0;
    int totalCost = round(mealCost + tip + tax);

    printf("The total meal cost is %d dollars.", totalCost);

    return 0;
}
</code></pre>

<h3>C++</h3>

<pre><code class="cpp">#include &lt;cmath&gt;
#include &lt;cstdio&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;


int main() {
    /* Enter your code here. Read input from STDIN. Print output to STDOUT */ 
    double mealCost;
    double tipPercent;
    double taxPercent;

    cin &gt;&gt; mealCost;
    cin &gt;&gt; tipPercent;
    cin &gt;&gt; taxPercent;

    double tip = mealCost * tipPercent / 100;
    double tax = mealCost * taxPercent / 100;
    double totalCost = mealCost + tip + tax;
    cout &lt;&lt; "The total meal cost is " &lt;&lt; round(totalCost) &lt;&lt; " dollars." &lt;&lt; endl;

    return 0;
}
</code></pre>

<h3>Java</h3>

<pre><code class="java">import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;
public class Arithmetic {

    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        double mealCost = scan.nextDouble(); // original meal price
        double tipPercent = scan.nextInt(); // tip percentage
        double taxPercent = scan.nextInt(); // tax percentage
        scan.close();

        // Write your calculation code here.
        double tip = mealCost * (tipPercent/100);
        double tax = mealCost * (taxPercent/100);

        // cast the result of the rounding operation to an int and save it as totalCost
        int totalCost = (int) Math.round(mealCost+tip+tax);

        // Print your result
        System.out.println("The total meal cost is " + totalCost + " dollars.");
    }
}
</code></pre>

<h3>Python</h3>

<p>Python 2</p>

<pre><code class="python">mealCost = float(raw_input())
tipPercent = float(raw_input())
taxPercent = float(raw_input())

tip = mealCost * ( tipPercent/100)
tax = mealCost * (taxPercent/100)

totalCost = round(mealCost + tip + tax)

print "The total meal cost is %d dollars." % totalCost
</code></pre>

<p>Python 3</p>

<pre><code class="python">mealCost = float(input())
tipPercent = float(input())
taxPercent = float(input())

tip = mealCost * (tipPercent/100)
tax = mealCost * (taxPercent/100)

totalCost = round(mealCost + tip + tax)
print("The total meal cost is %d dollars." % totalCost)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Languages Comparison: Data Types]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/04/07/programming-languages-comparison-data-types/"/>
    <updated>2016-04-07T01:55:32+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/04/07/programming-languages-comparison-data-types</id>
    <content type="html"><![CDATA[<h2>Task</h2>

<ul>
<li>get the variables: int, double, string</li>
<li>calculate the sum of the digits and concat the strings</li>
<li>print the results</li>
</ul>


<h2>Solutions</h2>

<h3>C</h3>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;

int main() {
    int i = 4;
    double d = 4.0;
    char s[] = "HackerRank ";

    // Declare second integer, double, and String variables.
    int num;
    float digit;
    char string[100];

    // Read and save an integer, double, and String to your variables.
    scanf("%d", &amp;num);
    scanf("\n%f\n", &amp;digit);
    scanf("%[^\n]", string);

    // Print the sum of both integer variables on a new line.
    printf("%d\n", i+num);    

    // Print the sum of the double variables on a new line.
    printf("%.1f\n", d+digit);    

    // Concatenate and print the String variables on a new line
    // The 's' variable above should be printed first.
    printf("%s%s", s, string);

    return 0;
}
</code></pre>

<h3>C++</h3>

<pre><code class="cpp">#include &lt;iostream&gt;
#include &lt;iomanip&gt;
#include &lt;limits&gt;

using namespace std;

int main() {
    int i = 4;
    double d = 4.0;
    string s = "HackerRank ";

    return 0;
}
</code></pre>

<h3>Java</h3>

<pre><code class="java">import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
        int i = 4;
        double d = 4.0;
        String s = "HackerRank ";

        Scanner scan = new Scanner(System.in);

        /* Declare second integer, double, and String variables. */
        int i2 = scan.nextInt();
        double d2 = scan.nextDouble();
        String empty = scan.nextLine();
        String s2 = scan.nextLine();

        /* Read and save an integer, double, and String to your variables.*/
        int int_sum = i + i2;
        double double_sum = d + d2;
        String combine_s = s + s2;

        /* Print the sum of both integer variables on a new line. */
        System.out.println(int_sum);
        /* Print the sum of the double variables on a new line. */
        System.out.println(double_sum);
        /* Concatenate and print the String variables on a new line; 
            the 's' variable above should be printed first. */
        System.out.println(combine_s);

        scan.close();
    }
}
</code></pre>

<h3>Python</h3>

<p>python 2</p>

<pre><code class="python">i = 4
d = 4.0
s = 'HackerRank '

# Declare second integer, double, and String variables.
i2 = int(raw_input())
d2 = float(raw_input())
s2 = str(raw_input())

# Read and save an integer, double, and String to your variables.
total_i = i + i2
total_d = d + d2
strings = s + s2

# Print the sum of both integer variables on a new line.
print str(total_i)

# Print the sum of the double variables on a new line.
print str(total_d)

# Concatenate and print the String variables on a new line
# The 's' variable above should be printed first.
print strings
</code></pre>

<p>python 3</p>

<pre><code>i = 4
d = 4.0
s = 'HackerRank '

# Declare second integer, double, and String variables.
i2 = int(input())
d2 = float(input())
s2 = str(input())

# Read and save an integer, double, and String to your variables.
total_i = i + i2
total_d = d + d2
strings = s + s2

# Print the sum of both integer variables on a new line.
print(total_i)

# Print the sum of the double variables on a new line.
print(total_d)

# Concatenate and print the String variables on a new line
# The 's' variable above should be printed first.
print(strings)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Languages Comparison: Print]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/04/05/programming-languages-comparison-print/"/>
    <updated>2016-04-05T17:08:53+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/04/05/programming-languages-comparison-print</id>
    <content type="html"><![CDATA[<h2>Task</h2>

<ul>
<li>Save a line of input from stdin to a variable</li>
<li>Print <code>Hello, World</code> on a single line</li>
<li>Print the value of the variable on a second line</li>
</ul>


<h2>Solutions</h2>

<h3>C</h3>

<pre><code class="c">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;math.h&gt;
#include &lt;stdlib.h&gt;
int main() {
   char inputString[105]; // declare a variable to hold our input
   scanf("%[^\n]", inputString); // get a line of input from stdin and save it to our variable

   // Your first line of output goes here
   printf("Hello, World.\n");

   // Write the second line of output
   printf(inputString);

   return 0;
}
</code></pre>

<h3>C++</h3>

<pre><code class="cpp">#include &lt;cmath&gt;
#include &lt;cstdio&gt;
#include &lt;vector&gt;
#include &lt;iostream&gt;
#include &lt;algorithm&gt;
using namespace std;

int main() {
   string inputString; // declare a variable to hold our input
   getline(cin, inputString); // get a line of input from cin and save it to our variable

   // Your first line of output goes here
   cout &lt;&lt; "Hello, World." &lt;&lt; endl;

   // Write the second line of output
   cout &lt;&lt; inputString &lt;&lt; endl;

   return 0;
}
</code></pre>

<h3>Java</h3>

<pre><code class="java">import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {
   public static void main(String[] args) {
      Scanner scan = new Scanner(System.in); // use the Scanner class to read from stdin
      String inputString = scan.nextLine(); // read a line of input and save it to a variable
      scan.close(); // close the scanner

      // Your first line of output goes here
      System.out.println("Hello, World.");

      // Write the second line of output
      System.out.println(inputString);
   }
}
</code></pre>

<h3>Python</h3>

<p>python2</p>

<pre><code class="python">inputString = raw_input() # get a line of input from stdin and save it to our variable

# Your first line of output goes here
print 'Hello, World.'

# Write the second line of output
print inputString
</code></pre>

<p>python3</p>

<pre><code class="python">inputString = input() # get a line of input from stdin and save it to our variable

# Your first line of output goes here
print('Hello, World.')

# Write the second line of output
print(inputString)
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Algorithms]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/28/algorithms/"/>
    <updated>2016-03-28T21:50:20+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/28/algorithms</id>
    <content type="html"><![CDATA[<h2>Analysis of Algorithms</h2>

<h2>Data Structure</h2>

<h3>Array: Searching and Sorting</h3>

<p>searching:</p>

<ul>
<li>Binary Search</li>
</ul>


<p>sorting:</p>

<ul>
<li>Selection Sort</li>
<li>Bubble Sort</li>
<li>Insertion Sort</li>
<li>Merge Sort</li>
<li>Heap Sort</li>
<li>Quick Sort</li>
<li>Radix Sort</li>
<li>Counting Sort</li>
<li>Bucket Sort</li>
<li>Shell Sort</li>
<li>Comb Sort</li>
<li>Pigeonhole Sort</li>
</ul>


<h3>Tree &amp; Graph: Greedy and Graph</h3>

<h4>Search</h4>

<ul>
<li>DFS</li>
<li>BFS</li>
</ul>


<h4>Greedy Algorithms</h4>

<ul>
<li>Activity selectioin problem</li>
<li>spanning tree

<ul>
<li>Kruskal’s minimum spanning tree</li>
<li>Prim’s minimum spanning tree</li>
<li>Prim’s MST for Adjacency list representation</li>
</ul>
</li>
<li>path

<ul>
<li>Dijkstra’s shortest path algorithm</li>
<li>Dijkstra’s algorithm for Adjacency list representation</li>
</ul>
</li>
<li>value

<ul>
<li>Huffman coding</li>
<li>Efficient Huffman coding for sorted input</li>
</ul>
</li>
</ul>


<h4>Graph Algorithms</h4>

<ul>
<li>Connectivity</li>
<li>Hard Problems</li>
<li>Maximum Flow</li>
<li>Misc</li>
</ul>


<h2>String</h2>

<h3>Pattern Searching</h3>

<h3>String Algorithms</h3>

<h2>Strategics</h2>

<h3>Divide and Conquer</h3>

<h2>Mathematics</h2>

<h3>Backtracking</h3>

<h3>Geometric Algorithms</h3>

<h3>Mathematical Algorithms</h3>

<h3>Bit Algorithms</h3>

<h2>Reference</h2>

<ul>
<li><a href="http://www.geeksforgeeks.org/fundamentals-of-algorithms/#SearchingandSorting">Algorithms</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL]]></title>
    <link href="http://k.arttechresearch.com/tech/2016/03/28/sql/"/>
    <updated>2016-03-28T18:46:05+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2016/03/28/sql</id>
    <content type="html"><![CDATA[<p>Types of SQL queries:</p>

<ul>
<li>DDL: data definition language

<ul>
<li>DML: data manipulation laugnage</li>
<li>DQL: data query language</li>
<li>DCL: data control language</li>
<li>DTL: data transaction language</li>
</ul>
</li>
<li>VDL: view definition language</li>
<li>SDL: storage definition language</li>
</ul>


<h2>DDL</h2>

<pre><code class="sql">CREATE TABLE [table name] ( [column definitions] ) [table parameters]
CREATE TABLE employees (
    id            INTEGER      PRIMARY KEY,
    first_name    VARCHAR(50) not null,
    last_name     VARCHAR(75) not null,
    fname         VARCHAR(50) not null,
    dateofbirth   DATE         not null
);

DROP objecttype objectname
DROP TABLE employees;

ALTER objecttype objectname parameters
ALTER TABLE sink ADD bubbles INTEGER;
ALTER TABLE sink DROP COLUMN bubbles;

RENAME TABLE old_name TO new_name;
</code></pre>

<h2>DML</h2>

<pre><code class="sql">SELECT ... FROM ... WHERE ...
INSERT INTO ... VALUES ...
UPDATE ... SET ... WHERE ...
DELETE FROM ... WHERE ...

SELECT nom, service
FROM employe
WHERE status = 'stagiaire'
ORDER BY nom;

INSERT INTO employees(first_name, last_name, fname) VALUES ('John', 'Capita', 'xcapit00');
UPDATE a_table SET field1 = 'updated value' WHERE field2 = 'N';
DELETE FROM a_table WHERE field2 = 'N';

MERGE INTO table_name USING table_reference ON (condition)
   WHEN MATCHED THEN
   UPDATE SET column1 = value1 [, column2 = value2 ...]
   WHEN NOT MATCHED THEN
   INSERT (column1 [, column2 ...]) VALUES (value1 [, value2 ...
</code></pre>

<h3>UPDATE</h3>

<p>Update top 10 state in the table authors.</p>

<pre><code class="sql">UPDATE state
SET state.saleprice = state.saleprice + 2
FROM (
         SELECT TOP 10 *
         FROM sales ORDER BY saleid
     ) AS t1, sales state
WHERE state.saleid = t1.saleid


UPDATE state
SET state.saleprice = state.saleprice + 2
FROM sales state
WHERE state.sale.id in (
                           SELECT TOP 10 saleid
                           FROM sales
                           ORDER BY saleid
                       )
</code></pre>

<h2>DQL</h2>

<pre><code class="sql">- functions: COUNT, AVG, MIN, MAX, SUM

SELECT *    column(s)
FROM *
            table(s)
            FULL OUTER JOIN
            RIGHT OUTER JOIN
            LEFT OUTER JOIN
            INNER JOIN
            Alias (AS)
WHERE *
            Predicate (=,&lt;&gt;,&lt;,&lt;=,&gt;,&gt;=)
            Operators (AND, OR, NOT)
            LIKE (%,_)
            BETWEEN ... IN ...
            EXISTS
            IS NULL
ORDER BY *
            ASC/DESC
GROUP BY *
            column(s)
HAVING *
            clause
FETCH *
            clause
</code></pre>

<h3>JOIN/UNION</h3>

<ul>
<li>inner join: A &amp;&amp; B, # of rows = (A&amp;&amp;B)</li>
<li>left join: A (full) &amp;&amp; B (null), # of rows = rows(A)</li>
<li>right join: A (null) &amp;&amp; B (full), # of rows = rows(B)</li>
<li>full join: union, # of rows = rows(A) + rows(B) - rows (A&amp;&amp;B)</li>
</ul>


<p>join</p>

<pre><code class="sql">SELECT orders.orderid, customers.customerid, customers.customername, orders.orderdate
FROM orders
INNER JOIN customers
ON orders.customerid = customers.customerid;

SELECT orders.orderid, customers.customerid, customers.customername, orders.orderdate
FROM orders
LEFT JOIN customers
ON orders.customerid = customers.customerid;

SELECT orders.orderid, customers.customerid, customers.customername, orders.orderdate
FROM orders
RIGHT JOIN customers
ON orders.customerid = customers.customerid;
</code></pre>

<p>union</p>

<pre><code class="sql">SELECT customerid FROM customers
UNION
SELECT customerid FROM orders
ORDER BY customerid
</code></pre>

<h3>TOP</h3>

<p>Display all fields of the last record.</p>

<pre><code class="sql">SELECT top 1 *
FROM table_name
RODER BY ID DESC

# mysql
SELECT * 
FROM table_name
ORDER BY field_name DESC/ASC
LIMIT 1;

SELECT MAX(ID) AS MAXID
FROM table_name;

SELECT id, otherfields, ..., ...
FROM table_name
WHERE id=(SELECT MAX(id) FROM table)
</code></pre>

<h2>DCL</h2>

<pre><code class="sql">GRANT SELECT, UPDATE
ON example
TO some_user, another_user;

REVOKE SELECT, UPDATE
ON example
FROM some_user, another_user;
</code></pre>

<h2>DTL</h2>

<pre><code class="sql">commit;
savepoint;
rollback;
</code></pre>

<h3>ROLLBACK</h3>

<p>NULL is allowed in a column which is all of the non-null values should be unique.</p>

<pre><code class="sql">CREATE trigger mytrigger on t1 for insert, update as

BEGIN
    IF (
            SELECT MAX(cnt)
            FROM (
                     SELECT COUNT(i.c1) as cnt
                     FROM t1, iinserted i
                     WHERE t1.c1 = i.c1
                     GROUP BY i.c1
                 ) x
       ) &gt; 1
    ROLLBACK TRAN
END
</code></pre>

<h2>VDL</h2>

<pre><code class="sql">CREATE VIEW "VIEW_NAME" AS "SQL Statement";

CREATE VIEW V_Customer
AS SELECT First_Name, Last_Name, Country
FROM Customer;

CREATE VIEW V_REGION_SALES
AS SELECT A1.Region_Name REGION, SUM(A2.Sales) SALES
FROM Geography A1, Store_Information A2
WHERE A1.Store_Name = A2.Store_Name
GROUP BY A1.Region_Name;

SELECT * FROM V_REGION_SALES;
</code></pre>
]]></content>
  </entry>
  
</feed>
