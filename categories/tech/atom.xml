<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | K]]></title>
  <link href="http://k.arttechresearch.com/categories/tech/atom.xml" rel="self"/>
  <link href="http://k.arttechresearch.com/"/>
  <updated>2015-12-27T21:05:16+08:00</updated>
  <id>http://k.arttechresearch.com/</id>
  <author>
    <name><![CDATA[K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Machine Learning From Facebook Tech Talk]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/12/13/machine-learning-from-facebook-tech-talk/"/>
    <updated>2015-12-13T22:39:48+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/12/13/machine-learning-from-facebook-tech-talk</id>
    <content type="html"><![CDATA[<p>There were three topics about machine learning on Facebook Tech Talk 2015 (Shanghai).</p>

<ul>
<li>Ads Click</li>
<li>Friend Recommendation</li>
<li>Content Feeds</li>
</ul>


<p>Login Facebook, and go to the user dashboard, content feeds are in the middle, friend
recommendataion is located at the right sidebar (top right), ads click is located at
the right sidebar (behind the friend recommendation)</p>

<pre><code>    |------------------------------------------------------------------|
    |             |                                  |                 |
    |             |                                  |                 |
    |             | content feeds                    | friends         |
    |             |                                  | ads             |
    |             |                                  |                 |
    |------------------------------------------------------------------|
</code></pre>

<h2>1. Ads Click</h2>

<p>NOTE:</p>

<p>If you play a song on piano, some phrases might be easy to play, some might be hard, then
 you have to practice the hard parts again and again, memorizing the techniques by hands.</p>

<p>For machine learning, somelike as the same. One algorith might be fitted for some data,
some might be not, for improving the accurency, you&rsquo;d better apply other algorithms which
are fit these kinds of the dataset to the incorrect outputs, retrain the data again and
again.</p>

<h3>Overview</h3>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/9f/87/62/9f87621c1ed63452776097be842713de.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/5f/64/13/5f641372540309676f956a4771034e24.jpg" /></p>

<h3>Layer 1</h3>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/d2/73/ad/d273adf93b99c3b0813584976a77f8ce.jpg" /></p>

<h3>Layer 2</h3>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/8d/5d/4f/8d5d4fa8dc863fa4d226c36b91a07bc7.jpg" /></p>

<h3>Model</h3>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/67/4e/26/674e268a17b893d14ac2a2a3d8b507c6.jpg" /></p>

<h3>Outputs</h3>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/f4/b8/7c/f4b87c2a0afda71f33786bfc06bb186b.jpg" /></p>

<p>When a user views the ads once, he/she might not click these ads, but he/she might click
the ads a few minutes later, then we&rsquo;d better show the ads to the user by time ranges (
such as 15 minutes later, 1 hour laster etc), that&rsquo;s why we use the queue.</p>

<h3>Evaluation</h3>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/1e/64/a2/1e64a2626be15098c6d7aa13643cc05b.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/3c/ba/02/3cba02e1a2b4d9548c974d86980f94dc.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/fb/5e/6d/fb5e6d541ea0e57a4f303b1ade61ce5c.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/99/69/35/996935ee6fa3a20152453c9c0d20a755.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/0e/68/60/0e6860c4634db9ff38097662332d00c7.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/1b/e7/5b/1be75bf3f92ab17af4a73b0398b2f7a1.jpg" /></p>

<h2>2. Friend Recommendation</h2>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/9e/ec/14/9eec1418e533540b4ec5d64a14f1a137.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/fc/75/b7/fc75b7ce4dd488307eae141995f21db4.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/c0/3b/be/c03bbe0c49f67684b094ddbf5244c02b.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/c4/ee/a9/c4eea9ff648979eb05650e0288458c61.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/69/9e/11/699e1119bc29df039a907fcb3e58a00f.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/cc/fc/ce/ccfcce6747a28857f567caa0dd8d1bf5.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/26/f6/45/26f6453e61da588965960e78c9260fd1.jpg" /></p>

<h2>3. Content Feeds</h2>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/76/67/70/7667706db9c43f7cbe5f672b75daee03.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/0d/83/b9/0d83b9c9cd86bcfde10ff208efcadb79.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/38/dc/72/38dc72e03b726c3025d3dfcb37725d9f.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/4f/22/e9/4f22e9f3d21b05c84d634e3a7dd113d9.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/0b/38/82/0b3882c2b3c956bb8ccf8ff343e2d88a.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/04/38/4e/04384edef1d3726b9b2ea4debd3a3012.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/c0/f9/e5/c0f9e5c432913bbfd310e7f4c9ea6a87.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting to MSSQL Using FreeTDS / ODBC in Python]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/11/15/connecting-to-mssql-using-freetds-slash-odbc-in-python/"/>
    <updated>2015-11-15T21:23:21+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/11/15/connecting-to-mssql-using-freetds-slash-odbc-in-python</id>
    <content type="html"><![CDATA[<h2>Prequisitions</h2>

<ul>
<li>OS: Debian 7.8</li>
<li>Dependencies: freetds-dev, freetd-bin, unixodbc-dev, tdsodbc</li>
<li>Python packages: pyodbc, sqlalchemy</li>
</ul>


<h2>Steps</h2>

<p>Installing the dependencies</p>

<pre><code class="bash">$ sudo apt-get install freetds-dev freetds-bin unixodbc-dev tdsodbc
$ pip install pyodbc sqlalchemy
</code></pre>

<p>Configuring <code>/etc/odbcinst.ini</code></p>

<pre><code class="bash /etc/odbcinst.ini">[FreeTDS]
Description     = TDS driver (Sybase/MS SQL)
Driver          = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so
Setup           = /usr/lib/x86_64-linux-gnu/odbc/libtdsS.so
CPTimeout       =
CPReuse         =
UsageCount      = 1
</code></pre>

<p>Configuring <code>/etc/freetds/freetds.conf</code></p>

<pre><code class="bash /etc/freetds/freetds.conf">[global]
    port = 1433
    tds version = 7.0
</code></pre>

<p>Testing</p>

<pre><code class="bash">$ tsql -H host_name -p 3688 -U user_name
</code></pre>

<h3>example: pyodbc</h3>

<pre><code class="python">import pyodbc


def connect_db(HOST, DATABASE, UID, PWD, TDS_Version):

    connection = pyodbc.connect('DRIVER=FreeTDS; \
                             SERVER=HOST; \
                             PORT=1433; \
                             DATABASE=DATABASE; \
                             UID=UID; \
                             PWD=PWD; \
                             TDS_Version=8.0;')

    cursor = connection.cursor()
    return cursor

def query_data(cursor, query):

    for row in cursor.execute(query):
        print row

if __name__ = '__main__':

    HOST = ''                         # server
    DATABASE = ''                     # database_name
    UID = ''                          # user_name
    PWD = ''                          # password
    TDS_Version = ''                  # TDS_Version

    cursor = connect_db(HOST, DATABASE, UID, PWD, TDS_Version)
    query_data(cursor, 'select 6 * 7 as [Result];')
</code></pre>

<h3>example: sqlalchemy</h3>

<pre><code class="python">
import urllib
from sqlalchemy import create_engine

def connect_db(HOST, DATABASE, UID, PWD, TDS_Version):

    db_settings = 'DRIVER=FreeTDS; \
                   SERVER=%s; \
                   PORT=1433; \
                   DATABASE=%s; \
                   UID=%s; \
                   PWD=%s; \
                   TDS_Version=%s'.format(HOST, DATABASE, UID, PWD, TDS_Version)
    engine = create_engine('mssql+pyodbc:///?odbc_connect' + urllib.quote_plus(db_settings))

    return engine

def query_db(engine, query):

    for row in engine.excute(query):
        print row

if __name__ = '__main__':

    HOST = ''                         # server
    DATABASE = ''                     # database_name
    UID = ''                          # user_name
    PWD = ''                          # password
    TDS_Version = ''                  # TDS_Version

    engine = connect_db(HOST, DATABASE, UID, PWD, TDS_Version)
    query_data(engine, 'select 6 * 7 as [Result];')
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generating a Self-Signed SSL Certificate]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/11/09/generating-a-self-signed-ssl-certificate/"/>
    <updated>2015-11-09T22:59:53+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/11/09/generating-a-self-signed-ssl-certificate</id>
    <content type="html"><![CDATA[<h2>Prequistion</h2>

<p>openssl</p>

<pre><code class="bash">$ which openssl

# OS X
$ brew install openssl

# Ubuntu
$ sudo apt-get install openssl
</code></pre>

<h2>1. Private key and certificate signing request</h2>

<pre><code class="bash">$ openssl genrsa -des3 -passout pass:x -out server.pass.key 2048
$ openssl rsa -passin pass:x -in server.pass.key -out server.key
$ rm server.pass.key
$ openssl req -new -key server.key -out server.csr
</code></pre>

<h2>2. SSL Certificate</h2>

<pre><code class="bash">$ openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Challenge L4]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/11/08/python-challenge-l4/"/>
    <updated>2015-11-08T21:30:05+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/11/08/python-challenge-l4</id>
    <content type="html"><![CDATA[<p><a href="">Python Challenge</a></p>

<h2>L4. Linkedlist</h2>

<p><a href="http://www.pythonchallenge.com/pc/def/linkedlist.php">L4</a></p>

<p>urllib may help. DON&rsquo;T TRY ALL NOTHINGS, since it will never end. 400 times is more than enough.</p>

<pre><code class="python linkedlist.py">import urllib

def get_param(param_value):
    """Return the nothing_value from the specific url
    """

    param = urllib.urlencode({'nothing': param_value})
    url = "http://www.pythonchallenge.com/pc/def/linkedlist.php?%s" % param
    content = urllib.urlopen(url).read()
    # split the content by " " and return the last word
    value = content.split(" ")[-1]

    return value


if __name__ == '__main__':

    init_value = "12345"
    param = get_param(init_value)
    while param &gt; 0:
        print param
        param = get_param(param)
</code></pre>

<p>The figures are repeating, but once <code>peak.html</code> occurs, update the url with
<code>peak.html</code>, then jump to L5.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Challenge L3]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/11/07/python-challenge-l3/"/>
    <updated>2015-11-07T20:35:25+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/11/07/python-challenge-l3</id>
    <content type="html"><![CDATA[<p><a href="">Python Challenge</a></p>

<h2>L3. Equality</h2>

<p><a href="http://www.pythonchallenge.com/pc/def/equality.html">L3</a></p>

<p>One small letter, surrounded by EXACTLY three big bodyguards on each of its
sides.</p>

<pre><code class="python equality.py">import re

def search_equality(text):
    """ Return the letter if that matches the pattern, else return None
    """

    # pattern: [1 lower](3 uppers)[1 lower](3 uppers)[1 lower], e.g.: aBBDiLDMx
    pattern = "[a-z][A-Z][A-Z][A-Z][a-z][A-Z][A-Z][A-Z][a-z]"
    equality = re.search(pattern, text)
    if equality:
        # just return the lowercase on the position 5 (index[4])
        return equality.group()[4]
    else:
        return None

if __name__ == '__main__':

    text_path = "./data/3_equality.txt"

    equalities = []
    text = open(text_path, 'r')
    for line in text.readlines():
        # search the letters those matching the patterns
        equality = search_equality(line.strip())
        # just append the valid letters, None exclusive
        equalities.append(equality) if equality is not None else equalities
    text.close()

    print ''.join(letter for letter in equalities)
</code></pre>

<p>output</p>

<pre><code class="python equality ouptut">linkedlist
</code></pre>

<p>Update the url with <code>linkedlist</code>, then jump to a new page with <code>linkedlist.php</code>,
update the url with <code>linkedlist.php</code>, then jump to L4.</p>
]]></content>
  </entry>
  
</feed>
