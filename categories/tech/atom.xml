<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tech | K]]></title>
  <link href="http://k.arttechresearch.com/categories/tech/atom.xml" rel="self"/>
  <link href="http://k.arttechresearch.com/"/>
  <updated>2015-12-29T17:21:27+08:00</updated>
  <id>http://k.arttechresearch.com/</id>
  <author>
    <name><![CDATA[K]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Installing Logstack ElasticSearch Kibana on Ubuntu]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/12/29/installing-logstack-elasticsearch-kibana-on-ubuntu/"/>
    <updated>2015-12-29T14:52:55+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/12/29/installing-logstack-elasticsearch-kibana-on-ubuntu</id>
    <content type="html"><![CDATA[<h2>Installation Steps</h2>

<ul>
<li>Step 1. java</li>
<li>Step 2. elasticsearch</li>
<li>Step 3. kibana/nginx</li>
<li>Step 4. logstack</li>
<li>Step 5. filebeat</li>
</ul>


<h2>Process</h2>

<ul>
<li>filebeat: ship logs</li>
<li>logstack: process and index logs</li>
<li>elasticsearch: store logs</li>
<li>kibana: search and visualize logs</li>
<li>nginx: reverse proxy</li>
</ul>


<pre><code>App Server - filebeat -|
                       |-&gt; logstack -&gt; elasticsearch -&gt; kibana -&gt; nginx
DB Server  - filebeat -|
</code></pre>

<h2>Prequisitions</h2>

<ul>
<li>Ubuntu 14.04</li>
<li>Java 8</li>
<li>Logstack</li>
<li>ElasticSearch</li>
<li>Kibana</li>
<li>Filebeat</li>
</ul>


<h2>Java 8</h2>

<pre><code class="bash">$ sudo add-apt-repository -y ppa:webupd8team/java
$ sudo apt-get update
$ sudo apt-get -y install oracle-java8-installer
</code></pre>

<h2>ElasticSearch</h2>

<pre><code class="bash">$ wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
$ echo "deb http://packages.elastic.co/elasticsearch/2.x/debian stable main" | sudo tee -a /etc/apt/sources.list.d/elasticsearch-2.x.list
$ sudo apt-get update
$ sudo apt-get -y install elasticsearch

$ sudo vim /etc/elasticsearch/elasticsearch.yml
# network.host: 192.168.0.1
network.host: localhost


$ sudo service elasticsearch restart
$ sudo update-rc.d elasticsearch defaults 95 10
</code></pre>

<h2>Kibana</h2>

<pre><code class="bash">$ sudo groupadd -g 1999 kibana
$ sudo useradd -u 1999 -g 1999 kibana

$ cd /tmp
$ wget https://download.elastic.co/kibana/kibana/kibana-4.3.0-linux-x64.tar.gz
$ tar xvf kibana-*.tar.gz
$ cd kibana-4.3.0-linux-x64
$ vim config/kibana.yml      # update some configurations


$ sudo mkdir -p /opt/kibana
$ sudo cp -R kibana-4.3.0-linux-x64/* /opt/kibana/
$ ls /opt/kibana/
$ sudo chown -R kibana: /opt/kibana

$ cd /etc/init.d &amp;&amp; sudo curl -o kibana https://gist.githubusercontent.com/thisismitch/8b15ac909aed214ad04a/raw/fc5025c3fc499ad8262aff34ba7fde8c87ead7c0/kibana-4.x-init
$ cd /etc/default &amp;&amp; sudo curl -o kibana https://gist.githubusercontent.com/thisismitch/8b15ac909aed214ad04a/raw/fc5025c3fc499ad8262aff34ba7fde8c87ead7c0/kibana-4.x-default 

$ sudo chmod +x /etc/init.d/kibana
$ sudo update-rc.d kibana defaults 96 9
$ sudo service kibana start
</code></pre>

<p>test: <a href="http://localhost:5601">http://localhost:5601</a></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/cf/05/2c/cf052c0e3e1b3781238082cb844e33e1.jpg" /></p>

<h3>Nginx</h3>

<pre><code class="bash">$ sudo apt-get install nginx apache2-utils
$ sudo htpasswd -c /etc/nginx/htpasswd.users kibanaadmin

$ sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/kibana # update config
$ sudo ln /etc/nginx/sites-available/kibana /etc/nginx/sites-enabled/kibana
$ sudo service nginx restart
</code></pre>

<p>/etc/nginx/sites-available/kibana</p>

<pre><code class="bash">server {
    listen 80;

    server_name example.com;

    auth_basic "Restricted Access";
    auth_basic_user_file /etc/nginx/htpasswd.users;

    location / {
        proxy_pass http://localhost:5601;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_cache_bypass $http_upgrade;        
    }
}
</code></pre>

<h2>Logstack</h2>

<h3>Install Logstack</h3>

<pre><code class="bash">$ echo 'deb http://packages.elasticsearch.org/logstash/2.1/debian stable main' | sudo tee /etc/apt/sources.list.d/logstash.list
$ sudo apt-get update
$ sudo apt-get install logstash
</code></pre>

<h3>SSL Certificate</h3>

<pre><code class="bash">$ sudo mkdir -p /etc/pki/tls/certs
$ sudo mkdir /etc/pki/tls/private
$ cd /etc/pki/tls; sudo openssl req -subj '/CN=logstash_server_fqdn/' -x509 -days 3650 -batch -nodes -newkey rsa:2048 -keyout private/logstash-forwarder.key -out certs/logstash-forwarder.crt
</code></pre>

<h3>Config Logstack</h3>

<ul>
<li>/etc/logstash/conf.d/02-filebeat-input.conf</li>
<li>/etc/logstash/conf.d/10-syslog.conf</li>
<li>/etc/logstash/conf.d/30-elasticsearch-output.conf</li>
</ul>


<pre><code class="bash">$ sudo vi /etc/logstash/conf.d/02-filebeat-input.conf
</code></pre>

<p>02-filebeat-input.conf</p>

<pre><code class="bash">input {
  beats {
    port =&gt; 5044
    type =&gt; "logs"
    ssl =&gt; true
    ssl_certificate =&gt; "/etc/pki/tls/certs/logstash-forwarder.crt"
    ssl_key =&gt; "/etc/pki/tls/private/logstash-forwarder.key"
  }
}
</code></pre>

<pre><code class="bash">$ sudo vi /etc/logstash/conf.d/10-syslog.conf
</code></pre>

<p>10-syslog.conf</p>

<pre><code class="bash">filter {
  if [type] == "syslog" {
    grok {
      match =&gt; { "message" =&gt; "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
      add_field =&gt; [ "received_at", "%{@timestamp}" ]
      add_field =&gt; [ "received_from", "%{host}" ]
    }
    syslog_pri { }
    date {
      match =&gt; [ "syslog_timestamp", "MMM  d HH:mm:ss", "MMM dd HH:mm:ss" ]
    }
  }
}
</code></pre>

<pre><code class="bash">$ sudo vi /etc/logstash/conf.d/30-elasticsearch-output.conf
</code></pre>

<p>30-elasticsearch-output.conf</p>

<pre><code class="bash">output {
  elasticsearch { hosts =&gt; ["localhost:9200"] }
  stdout { codec =&gt; rubydebug }
}
</code></pre>

<p>test</p>

<pre><code class="bash">$ sudo service logstash configtest
$ sudo service logstash restart
$ sudo update-rc.d logstash defaults 96 9
</code></pre>

<h2>Filebeat (Client)</h2>

<h3>SSL Certificate</h3>

<pre><code class="bash">$ scp /etc/pki/tls/certs/logstash-forwarder.crt user@client_server_private_address:/tmp
</code></pre>

<h3>Install Filebeat</h3>

<pre><code class="bash">$ echo "deb https://packages.elastic.co/beats/apt stable main" |  sudo tee -a /etc/apt/sources.list.d/beats.list
$ wget -qO - https://packages.elastic.co/GPG-KEY-elasticsearch | sudo apt-key add -
$ sudo apt-get update
$ sudo apt-get install filebeat

$ sudo mkdir -p /etc/pki/tls/certs
$ sudo cp /tmp/logstash-forwarder.crt /etc/pki/tls/certs/
</code></pre>

<h3>Config Filebeat</h3>

<pre><code class="bash">$ sudo vi /etc/filebeat/filebeat.yml
</code></pre>

<p>/etc/filebeat/filebeat.yml</p>

<pre><code class="bash">...
      paths:
         - /var/log/auth.log
         - /var/log/syslog
#        - /var/log/*.log
...

...
      document_type: syslog
...

...
output:

  ### Elasticsearch as output
  elasticsearch:
    enabled: false
...

  ### Logstash as output
  logstash:
    # The Logstash hosts
    hosts: ["ELK_server_private_IP:5044"]

...
    tls:
      # List of root certificates for HTTPS server verifications
      certificate_authorities: ["/etc/pki/tls/certs/logstash-forwarder.crt"]
</code></pre>

<p>test</p>

<pre><code class="bash">$ sudo service filebeat restart
$ sudo update-rc.d filebeat defaults 95 10
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up OpenNao With VirtualBox]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/12/28/setting-up-opennao-with-virtualbox/"/>
    <updated>2015-12-28T22:44:11+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/12/28/setting-up-opennao-with-virtualbox</id>
    <content type="html"><![CDATA[<h2>1. Downloading OpenNao</h2>

<p>Download OpenNao <a href="https://community.aldebaran.com/en/dl/ZmllbGRfY29sbGVjdGlvbl9pdGVtLTU1NC1maWVsZF9zb2Z0X2RsX2V4dGVybmFsX2xpbmstMC1mYTc0ZTQ%3D?width=500&amp;height=auto">OVA file</a>.</p>

<h2>2. Setting up VirtualBox</h2>

<p>Start VirtualBox: File -> Import Appliance -> Import *.ova file</p>

<p>Start VM, login with username/password: nao/nao</p>

<h2>References</h2>

<ul>
<li><a href="https://community.aldebaran.com/en/resources/software/language/en-gb">Aldebaran Dev Toolkits</a></li>
<li><a href="http://doc.aldebaran.com/1-14/dev/tools/vm-setup.html">Setting up the OpenNAO virtual machine</a></li>
<li><a href="http://doc.aldebaran.com/1-14/dev/tools/opennao.html#opennao-user-account">OpenNAO - NAO OS</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Getting Started With Cassandra]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/12/28/getting-started-with-cassandra/"/>
    <updated>2015-12-28T18:26:26+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/12/28/getting-started-with-cassandra</id>
    <content type="html"><![CDATA[<h2>1. Installation</h2>

<ul>
<li>Ubuntu 14.04</li>
<li>Java 8</li>
<li>Apache Cassandra</li>
</ul>


<p>Java</p>

<pre><code class="bash">$ sudo add-apt-repository ppa:webupd8team/java
$ sudo apt-get update
$ sudo apt-get install oracle-java8-installer
$ java -version
$ sudo apt-get install oracle-java8-set-default
</code></pre>

<p>Cassandra</p>

<pre><code class="bash">$ sudo vim /etc/apt/source.list.d/cassandra.list

# add source list
deb http://www.apache.org/dist/cassandra/debian 21x main
deb-src http://www.apache.org/dist/cassandra/debian 21x main

# add public key
$ gpg --keyserver pgp.mit.edu --recv-keys F758CE318D77295D
$ gpg --export --armor F758CE318D77295D | sudo apt-key add -

$ sudo apt-get update
$ sudo apt-get install cassandra
</code></pre>

<h2>2. Configuration</h2>

<p>config paths:</p>

<ul>
<li>data directories: /var/lib/cassandra</li>
<li>log directory: /var/log/cassandra</li>
<li>runtime files: /var/run/cassandra</li>
<li>environment settings: /usr/share/cassandra</li>
<li>JAR files: /usr/share/cassandra/lib</li>
<li>binary files: /usr/bin</li>
<li>/usr/sbin</li>
<li>configuration files: /etc/cassandra</li>
<li>service startup script: /etc/init.d</li>
<li>cassandra user limits: /etc/security/limits.d</li>
<li>/etc/default</li>
</ul>


<h2>3. Testing</h2>

<p>running cassandra</p>

<pre><code class="bash">$ sudo cassandra
$ sudo cassandra -f

$ cassandra-cli
</code></pre>

<p>running cql</p>

<pre><code class="bash">$ sudo cqlsh
$ sudo cqlsh 127.0.0.1 9042
Connected to Test Cluster at 127.0.0.1:9042.
[cqlsh 5.0.1 | Cassandra 2.1.12 | CQL spec 3.2.1 | Native protocol v3]
Use HELP for help.

cqlsh&gt; CREATE KEYSPACE test WITH REPLICATION = { 'class': 'SimpleStrategy', 'replication_factor': 1 }; 

cqlsh&gt; USE test;
cqlsh:test&gt; CREATE TABLE users (
        ... user_id int PRIMARY KEY,
        ... fname text,
        ... lname text
        ... );
cqlsh:test&gt; INSERT INTO users (user_id, fname, lname) VALUES (1722, 'joe', 'lambert');
cqlsh:test&gt; INSERT INTO users (user_id, fname, lname) VALUES (1832, 'alice', 'parker');

cqlsh:test&gt; SELECT * FROM users;
cqlsh:test&gt; CREATE INDEX ON users (lname);
cqlsh:test&gt; SELECT * FROM users WHERE lname = 'smith';
</code></pre>

<h2>Trouble Shooting</h2>

<h3>CQL Connection refused</h3>

<p>error message</p>

<pre><code class="bash">Connection error: ('Unable to connect to any servers', {'127.0.0.1': error(111, "Tried connecting to [('127.0.0.1', 9042)]. Last error: Connection refused")})
</code></pre>

<p>solution: update Java Version (Up to Java 8)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning From Facebook Tech Talk]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/12/13/machine-learning-from-facebook-tech-talk/"/>
    <updated>2015-12-13T22:39:48+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/12/13/machine-learning-from-facebook-tech-talk</id>
    <content type="html"><![CDATA[<p>There were three topics about machine learning on Facebook Tech Talk 2015 (Shanghai).</p>

<ul>
<li>Ads Click</li>
<li>Friend Recommendation</li>
<li>Content Feeds</li>
</ul>


<p>Login Facebook, and go to the user dashboard, content feeds are in the middle, friend
recommendataion is located at the right sidebar (top right), ads click is located at
the right sidebar (behind the friend recommendation)</p>

<pre><code>    |------------------------------------------------------------------|
    |             |                                  |                 |
    |             |                                  |                 |
    |             | content feeds                    | friends         |
    |             |                                  | ads             |
    |             |                                  |                 |
    |------------------------------------------------------------------|
</code></pre>

<h2>1. Ads Click</h2>

<p>NOTE:</p>

<p>If you play a song on piano, some phrases might be easy to play, some might be hard, then
 you have to practice the hard parts again and again, memorizing the techniques by hands.</p>

<p>For machine learning, somelike as the same. One algorith might be fitted for some data,
some might be not, for improving the accurency, you&rsquo;d better apply other algorithms which
are fit these kinds of the dataset to the incorrect outputs, retrain the data again and
again.</p>

<h3>Overview</h3>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/9f/87/62/9f87621c1ed63452776097be842713de.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/5f/64/13/5f641372540309676f956a4771034e24.jpg" /></p>

<h3>Layer 1</h3>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/d2/73/ad/d273adf93b99c3b0813584976a77f8ce.jpg" /></p>

<h3>Layer 2</h3>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/8d/5d/4f/8d5d4fa8dc863fa4d226c36b91a07bc7.jpg" /></p>

<h3>Model</h3>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/67/4e/26/674e268a17b893d14ac2a2a3d8b507c6.jpg" /></p>

<h3>Outputs</h3>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/f4/b8/7c/f4b87c2a0afda71f33786bfc06bb186b.jpg" /></p>

<p>When a user views the ads once, he/she might not click these ads, but he/she might click
the ads a few minutes later, then we&rsquo;d better show the ads to the user by time ranges (
such as 15 minutes later, 1 hour laster etc), that&rsquo;s why we use the queue.</p>

<h3>Evaluation</h3>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/1e/64/a2/1e64a2626be15098c6d7aa13643cc05b.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/3c/ba/02/3cba02e1a2b4d9548c974d86980f94dc.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/fb/5e/6d/fb5e6d541ea0e57a4f303b1ade61ce5c.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/99/69/35/996935ee6fa3a20152453c9c0d20a755.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/0e/68/60/0e6860c4634db9ff38097662332d00c7.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/1b/e7/5b/1be75bf3f92ab17af4a73b0398b2f7a1.jpg" /></p>

<h2>2. Friend Recommendation</h2>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/9e/ec/14/9eec1418e533540b4ec5d64a14f1a137.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/fc/75/b7/fc75b7ce4dd488307eae141995f21db4.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/c0/3b/be/c03bbe0c49f67684b094ddbf5244c02b.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/736x/c4/ee/a9/c4eea9ff648979eb05650e0288458c61.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/69/9e/11/699e1119bc29df039a907fcb3e58a00f.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/cc/fc/ce/ccfcce6747a28857f567caa0dd8d1bf5.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/26/f6/45/26f6453e61da588965960e78c9260fd1.jpg" /></p>

<h2>3. Content Feeds</h2>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/76/67/70/7667706db9c43f7cbe5f672b75daee03.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/0d/83/b9/0d83b9c9cd86bcfde10ff208efcadb79.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/38/dc/72/38dc72e03b726c3025d3dfcb37725d9f.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/4f/22/e9/4f22e9f3d21b05c84d634e3a7dd113d9.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/0b/38/82/0b3882c2b3c956bb8ccf8ff343e2d88a.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/04/38/4e/04384edef1d3726b9b2ea4debd3a3012.jpg" /></p>

<p><img src="https://s-media-cache-ak0.pinimg.com/474x/c0/f9/e5/c0f9e5c432913bbfd310e7f4c9ea6a87.jpg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Connecting to MSSQL Using FreeTDS / ODBC in Python]]></title>
    <link href="http://k.arttechresearch.com/tech/2015/11/15/connecting-to-mssql-using-freetds-slash-odbc-in-python/"/>
    <updated>2015-11-15T21:23:21+08:00</updated>
    <id>http://k.arttechresearch.com/tech/2015/11/15/connecting-to-mssql-using-freetds-slash-odbc-in-python</id>
    <content type="html"><![CDATA[<h2>Prequisitions</h2>

<ul>
<li>OS: Debian 7.8</li>
<li>Dependencies: freetds-dev, freetd-bin, unixodbc-dev, tdsodbc</li>
<li>Python packages: pyodbc, sqlalchemy</li>
</ul>


<h2>Steps</h2>

<p>Installing the dependencies</p>

<pre><code class="bash">$ sudo apt-get install freetds-dev freetds-bin unixodbc-dev tdsodbc
$ pip install pyodbc sqlalchemy
</code></pre>

<p>Configuring <code>/etc/odbcinst.ini</code></p>

<pre><code class="bash /etc/odbcinst.ini">[FreeTDS]
Description     = TDS driver (Sybase/MS SQL)
Driver          = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so
Setup           = /usr/lib/x86_64-linux-gnu/odbc/libtdsS.so
CPTimeout       =
CPReuse         =
UsageCount      = 1
</code></pre>

<p>Configuring <code>/etc/freetds/freetds.conf</code></p>

<pre><code class="bash /etc/freetds/freetds.conf">[global]
    port = 1433
    tds version = 7.0
</code></pre>

<p>Testing</p>

<pre><code class="bash">$ tsql -H host_name -p 3688 -U user_name
</code></pre>

<h3>example: pyodbc</h3>

<pre><code class="python">import pyodbc


def connect_db(HOST, DATABASE, UID, PWD, TDS_Version):

    connection = pyodbc.connect('DRIVER=FreeTDS; \
                             SERVER=HOST; \
                             PORT=1433; \
                             DATABASE=DATABASE; \
                             UID=UID; \
                             PWD=PWD; \
                             TDS_Version=8.0;')

    cursor = connection.cursor()
    return cursor

def query_data(cursor, query):

    for row in cursor.execute(query):
        print row

if __name__ = '__main__':

    HOST = ''                         # server
    DATABASE = ''                     # database_name
    UID = ''                          # user_name
    PWD = ''                          # password
    TDS_Version = ''                  # TDS_Version

    cursor = connect_db(HOST, DATABASE, UID, PWD, TDS_Version)
    query_data(cursor, 'select 6 * 7 as [Result];')
</code></pre>

<h3>example: sqlalchemy</h3>

<pre><code class="python">
import urllib
from sqlalchemy import create_engine

def connect_db(HOST, DATABASE, UID, PWD, TDS_Version):

    db_settings = 'DRIVER=FreeTDS; \
                   SERVER=%s; \
                   PORT=1433; \
                   DATABASE=%s; \
                   UID=%s; \
                   PWD=%s; \
                   TDS_Version=%s'.format(HOST, DATABASE, UID, PWD, TDS_Version)
    engine = create_engine('mssql+pyodbc:///?odbc_connect' + urllib.quote_plus(db_settings))

    return engine

def query_db(engine, query):

    for row in engine.excute(query):
        print row

if __name__ = '__main__':

    HOST = ''                         # server
    DATABASE = ''                     # database_name
    UID = ''                          # user_name
    PWD = ''                          # password
    TDS_Version = ''                  # TDS_Version

    engine = connect_db(HOST, DATABASE, UID, PWD, TDS_Version)
    query_data(engine, 'select 6 * 7 as [Result];')
</code></pre>
]]></content>
  </entry>
  
</feed>
